
Apr 24, 2018


 
                 Fortran Enhanced LALR BNF Grammar & Lexical Rules
                 -------------------------------------------------



 The Fortran Grammar
 -------------------

 This grammar is based on a Fortran 2003 draft ("N1601.pdf.gz") and has been transformed as needed to allow an Enhanced LALR Builder (Syntaxis.jar) to process it and create a conflicts-free parser that accepts in addition deprecated Fortran 77 features. Over the time, features of newer drafts have been added as well.

 The transformed grammar is supposed to describe accurately array elements and function references. In other words, it isn't a covering grammar. Further, it is also complete in the sense that we fully parse constructs (e.g. non-block do construct ). In other words, we don't parse one statement at a time.

 However, this grammar accepts declaration and execution constructs in any order, the assumed-shape-spec-list is used also for deferred-shaped arrays, and the section-subscript-list in example could likely be more accurate. It has passed a few tests; yet, bug reports by experienced Fortran programmers are welcome.

 Actually, I had written this grammar to stress test some LALR enhancements and some relevant details were
 originally posted at: http://compilers.iecc.com/comparch/article/13-07-011

 Notes: 
 [1] We use a stack to distinguish between ordinary labels and labels of non-block do constructs. 
 [2] Default actions don't overwrite the reduce actions on keywords "FUNCTION" & "SUBROUTINE" because
     the token "<name-f>" depends on them. In the serialised version of the grammar the directive ie
     "#reductions FUNCTION" indicates exactly this restriction. 
 [3] The syntax notation is almost pure BNF, with "Follow Restrictions" ( "+:", "-:", and "~:") and
     "Error Productions" ("::~"). 
 [4] Definitely, this non LR(k) grammar is ambiguous (see: users.otenet.gr/~drikosev/miscellaneous.html).
 [5] Since July 6, 2018, the ENLALR parser supports the SMA technique selectively on individual tokens,
     which is required in our free form Fortran parser because a "(/" in example is in a format statement
     a valid sequence of a '(' and a '/'. 


 Files
 -----

 1) The Fortran Parser
    1.1) The "Fortran_Parser.txt" contains the syntax rules of the Fortran parser.
    1.2) The "Fortran_Parser.html" has the same content with the "Fortran_Parser.txt" but in HTML
         format.

 2) The Fortran Scanner
    2.1) The "Fortran_Scanner.txt" contains the lexical rules of a Fortran scanner that is shared
         by several Fortran parsers. 
    2.1) The "Fortran_Scanner.html" has the same content with the "fortran_scanner.txt" but in HTML
         format.

 3) A Legacy Parser
    3.1) The "Legacy_Parser.txt" contains the syntax rules of a Fortran parser, which in addition to
         the above mentioned Fortran parser, accepts structures, unions, maps, and records. These
         extensions originate from VAX/DEC Fortran and are supported by the IntelÂ® Fortran Compiler.
         Many of these extensions are also supported by GNU Fortran (gfortran version 7 or newer). 

         At the moment, this grammar is just informative because one needs to implement semantic 
         actions that can distinguish a dotted operator from members of nested structures. This
         is required in example when the parser sees text of the form "var.op.field". 

         So, this grammar doesn't fail to parse statements of the form "a.b.c=a.b.d;" but without
         the semantic actions mentioned above, the RHS of the assignment is interpreted as an
         expression with two operands, 'a' and 'd', and a user defined dotted operator, ".b.".

         Further, the BNF syntax of these extensions is the result of a personal effort that involves
         some guessing. So, this grammar might not describe fully & accurately real code yet. 

         Again, this is just an informative grammar, without a distinct generated C++ parser yet!

    3.2) The "Legacy_Parser.html" has the same content with the "Legacy_Parser.txt" but in HTML format.

 4) ChangeLog
    4.1) The file "ChangeLog" contains known or solved bugs along with various supported extensions.

