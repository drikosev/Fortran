Fortran parser Issues
---------------------

[ 2015-01-05 ] The derived-type-def didn't accept labels in type-bound-proc-bindings and a few
               semicolons were missing (todo: test).
[ 2015-01-28 ] The "ONLY" keyword was undefined and the comma was omitted in "only-list".
[ 2015-03-03 ] Added the end-critical-stmt.
[ 2015-04-22 ] The parser rejected functions as lvalues, which are likely valid.
[ 2017-04-10 ] Removed the rule "ac-implied-do-object ::= keyword = expr". Added an accurate 
               "ac-implied-do-cntrl" .
[ 2017-05-01 ] The ERSP Extension was found to be buggy. So far cannot reproduce the bug in a
               small grammar (todo: handle this open issue).
[ 2017-05-03 ] touched name-f & removed name-r from lprocedure names and run all the tests in
               generated parser ( todo: test also in simulator my test cases)
[ 2017-05-06 ] Extended the grammar with the newer assumed-rank-spec as an option to array-spec
               (seems an overkill to run again the tests).
[ 2017-07-07 ] The rule part-name-p-section-subscript-list-l didn't allow a follow "%" after an
               p-actual-arg-spec-list-l. In addition the part-name-p-section-subscript-list didn't
               allow a follow "=" that could be proved too restrictive for future requirements.
[ 2017-07-07 ] A awkward name rule "actual-arg-low-priority" has been replaced by "actual-arg".
[ 2017-07-08 ] The "do-block" should be optional in a "block-do-construct".
[ 2018-04-16 ] Segmentation fault on an extra comma in a type declaration stmt (ie: "real, x"). (done)
               [22/7] pgfortran accepts the above declaration but gfortran only "character*4,x".
[ 2018-04-19 ] Found an undefined <-name> instead of a <name> in <suffix> (after a <language-bindic-spec>).
[ 2018-04-21 ] Extension: Allow old style initialisation with slashes ("real pi / 3.14159 /") (done).
[ 2018-04-21 ] Extension: Allow Dec style length specification "real x*8 (2)"  (done) 
               (in addition to "real x(2) * 8").
               It doesn't allow such a length specification in a function name, ie:
               "INTEGER FUNCTION FCN*2 ( A, B, C )", see [*2].
[ 2018-04-23 ] Extension: <cray-pointer-stmt>. 
[ 2018-04-25 ] GNU/PGI Extension: Allow an extra comma in a <write-stmt>. ie:
               write (*,*), "handler";
[ 2018-06-26 ] Bug: The following erroneous 2 line program sends the generated parser          (done)
               (not the simulator) to an infinitive loop:
               READ(nunit(k),'(6e17.6)')((xtrajc0(i,k),ytrajc0(i,k),ztrajc0(i,k)),i=1,ntrajcs)
               END
               [13/9] No longer hangs but I don't remember how it has been solved. 	
[ 2018-06-27 ] Bug: Added the keyword GOTO as an alternative to "Go To" in  <goto-stmt> 
               & <computed-goto-stmt>. (done)
[ 2018-06-27 ] Bug: It fails to parse an empty CASE DEFAULT, due to a wrong <case-block>. (done)
[ 2018-06-27 ] Bug (free form): In a format stmt, '(/','//','/)' are valid sequences of '(','/',')'. (done)
               See the directive "#sma" in the serialised version of the grammar (ie fortran_parser.txt).
[ 2018-06-27 ] Also, the Simulator (not the generated parser) fails to return a shorter match for '(/'. 
               It returns the label of the format stmt, instead of a '(' !!!
               [24/8] It fails if the shorter match hasn't been declared as a lexical token.
[ 2018-07-03 ] Bug: The parser rejects this: "REAL :: trigs1(3*(nx-1)/2+1)". (done)
               The bug has been introduced by one of the changes made between 2017-07-08 and 2018-07-03.
               The problem is solved if the <p-array-spec-buggy> or <initialization-obsolete> is
               removed. In this parser I've removed the latter (in the legacy parser below the former).
[ 2018-07-25 ] [8/9] Missing named constants in complex constants (see ie lapack/src/zsyrfsx.f:601) (done)
[ 2018-07-25 ] GNU Extension: Added DOUBLE COMPLEX (see ie lapack/CBLAS/testing/c_zblat3.f:2275).  (done)


Fortran scanner Issues
----------------------
[ 2017-05-03 ] I'd predicted only array context after "call*" and the scanner was returning a
               name-l on "call r('s')" (todo: confirm not_cons_keys ).
[ 2018-04-19 ] A scalar-int-constant-name may have underscores (ie: c_char_"kernel32.dll").
[ 2018-04-28 ] Extension: GNU/VMS/Oracle <hex-constant> with X in addition to Z (see [*2] ie: X'1f').
[ 2018-04-28 ] An invalid <,> token has been removed.
[ 2018-05-04 ] Undefined Lexical Rule "ID::=I D" (ie: write (iu, rec=n, asynchronous="YES", id=id) buffer;)
[ 2018-06-26 ] Extension: Keywords STATIC/AUTOMATIC (done)
[ 2018-06-27 ] Bug: Added the keyword GOTO (done)
[ 2018-07-03 ] Extension: added <octal-legacy> as an alternative that accepts some old style constants.  (done)
               (ie n=1B as in the ARPS model src/arpsagr/packcray.f90:284). Yet see fcvs21/FM901.FOR:54
               [22/7] <char-length> ::= <LABEL> and activated semantic actions on SMA due to "do-labels".
               [27/8] undo the above as the scanner now returns on SMA all the alternative tokens.
[ 2018-07-25 ] GNU Extension: Added DOUBLE COMPLEX (see ie lapack/CBLAS/testing/c_zblat3.f:2275).  (done)
[ 2018-09-24 ] Remove  from token: <.EQ.>,<.NE.>,<.LT.>,<.LE.>,<.GT.>,<.GE.>                       (todo)
               Only a <rel-op> is known to the parser and on error the "unexpected part" is missing:
	       $ fcheck -fopenmp ../gomp/udr1.f90
               ../gomp/udr1.f90:4: error: syntax:Expected: ".AND.", ".NOT.", ".OR.", "IAND", "IEOR",
               "IOR", "MAX", "MIN", "add-op", "equiv-op", "mult-op", or "name".


The Following bug-fix has not been tested very well yet:

[ 2018-07-24 ] The Lexical Rule <name-f> fails when the following three conditions are met:              (done)
               (1) A Function is an external subprogram (2) with a prefix that is a type, ie "real", and    
               (3) the function name contains an underscore (see ie src/skewt/misc_kb.f:227).
               Now, the semantic action takes full control and returns either a FUNCTION or a <name-l>.
        note:  [1/9] The scanners are now capable not to return specific tokens as a shorter match, in 
                     this case a <name-r> which the parser could shift.      


 OMP (Legacy) Scanner Issues
 ---------------------------
 [2018-09-17]  The <omp-compound> shouldn't begin with "EXIT" because the parser then accepts           (done)
               in free form the invalid statement "exitcn", where "cn" is the name of a construct.  
 [2018-09-21]  This scanner doesn't accept in free form an omitted space between the keywords "DO"
               and "SIMD", in construct headers. I think there are six constructs in OpenMP (4.5)
               which are affected by this shortcoming:
               -distribute parallel do simd
               -do simd 
               -parallel do simd 
               -target parallel do simd
               -target teams distribute parallel do simd
               -teams distribute parallel do simd
 [2018-09-21]  PGI Extension. Allow in free form an omitted space between "CANCELLATION" and "POINT".   (done) 
 [2018-09-24]  Remove  from token: <.EQ.>,<.NE.>,<.LT.>,<.LE.>,<.GT.>,<.GE.>                            (done) 
               The parser knows only the <rel-op> and on error the "unexpected part" is missing:
	       $ fcheck -fopenmp ../gomp/udr1.f90
               ../gomp/udr1.f90:4: error: syntax:Expected: ".AND.", ".NOT.", ".OR.", "IAND", "IEOR",
               "IOR", "MAX", "MIN", "add-op", "equiv-op", "mult-op", or "name".


Legacy parser Issues
--------------------
[ 2018-04-22 ] Support for VAX/DEC structures, unions, maps, and records. 
[ 2018-04-23 ] The keyword "RECORD" wasn't acceptable in the interface of a PROCEDURE declaration stmt
               (Fortran 2003).  (done).
[ 2018-04-23 ] The Dec specific <parameter-stmt> isn't supported in fixed form (ie PARAMETER y = 1 is
               interpreted as PARAMETERy= 1).
[ 2018-04-23 ] Extension: <cray-pointer-stmt>. 
[ 2018-04-25 ] GNU/PGI Extension: Allow an extra comma in a <write-stmt>. ie:
               write (*,*), "hello";
[ 2018-04-26 ] Extension: Allow an originally IBM specific DEFINE FILE Statement, <define-file-unit-stmt>.
               See also [*1].
[ 2018-04-28 ] Extension: GNU/VMS/Oracle '$' as a <data-edit-desc> (see [*3] ie:
               "100  FORMAT (' ENTER RADIUS VALUE ',$)").               
[ 2018-06-26 ] Extension: Allow DEC/GNU STATIC/AUTOMATIC attributes in <type-declaration-stmt> and
               <save-stmt>. See: http://gcc.gnu.org/onlinedocs/gfortran/AUTOMATIC-and-STATIC-attributes.html
[ 2018-06-26 ] Extension: Allow a parenthesised <io-implied-do-object-list>  (done)
[ 2018-06-27 ] Bug: Added the keyword GOTO as an alternative to "Go To" in  <goto-stmt> & 
               <computed-goto-stmt>. (done)
[ 2018-06-27 ] Bug: It fails to parse an empty CASE DEFAULT, due to a wrong <case-block>. (done)
[ 2018-06-27 ] Bug (free form): In a format stmt, '(/','//','/)' are valid sequences of '(','/',')'. (done)
               See the directive "#sma" in the serialised version of the grammar (ie legacy_parser.txt).
[ 2018-06-27 ] Also, the Simulator (not the generated parser) fails to return a shorter match for '(/'. 
               It returns the label of the format stmt, instead of a '(' !!!
               [24/8] It fails if the shorter match hasn't been declared as a lexical token.
[ 2018-07-03 ] Bug: The legacy parser rejects this: "REAL :: trigs1(3*(nx-1)/2+1)". (done)
               The bug has been introduced by one of the changes made between 2017-07-08 and 2018-07-03.
               If the error production <p-array-spec-buggy> is removed, then the problem is solved. In
               addition the Shift/Reduce conflict with the <p-io-implied-do-object-list> disappeared.
[ 2018-07-04 ] GNU Extension: Allow a missing ',' in a <format-stmt> between a <control-edit-desc> that is
               a <position-edit-desc> and a <data-edit-desc> (see src/arpsverif/arpshis2ver.f90:4785)  (done)
[ 2018-07-25 ] Bug: Missing named constants in complex constants (see ie lapack/src/zsyrfsx.f:601) (done)
[ 2018-07-25 ] GNU Extension: Added DOUBLE COMPLEX (see ie lapack/CBLAS/testing/c_zblat3.f:2275).  (done)


 OMP (Legacy) Parser Issues
 --------------------------
 [2018-09-14] It can't parse the example "fort_do.1.f" in document "openmp-examples-4.5.0.pdf".   (done)
              Added prefix <omp-do-for-shared-term> to <inner-shared-do-construct>.
        Note: In the OpenMP (4.5) draft we read that a "do-loop" can be either a "do-construct"
              or an "inner-shared-do-construct". Conceptually, it's understoodable. Yet I can't
              write a rule of the form "do-loop ::= do-construct | inner-shared-do-construct" as
              the generated parser would pop the wrong number of elements on that reduction.
 [2018-09-14] The example 'nthrs_dynamic.1.f' in document "openmp-examples-4.5.0.pdf is rejected. (done)
 [2018-09-15] Similarly, an omitted "structured-block" in a task is rejected ("tasking.7.f").     (done)
 [2018-09-16] The example "task_priority.1.f90" is rejected (undefined "<omp-priority>").         (done)
 [2018-09-17] The "list" used in OpenMP clauses isn't a "<named-list>" as this grammar assumed.   (done)
              In the OpenMP-4.5 draft we read that "a list item is a variable, array section or 
              common block name (enclosed in slashes). An extended list item is a list item
              or a procedure name".
        Note: Since in our Fortran Grammar a Data Reference includes a Procedure Name, the
              extended-list is simply defined as a list.
 [2018-09-17] In "<omp-target-exit-data-stmt>", use the new keyword "OMP-TARGET-EXIT".            (done)
 [2018-09-18] On an unknown OpenMP Directive, the error message is empty:                         (done)
               $ fcheck -fopenmp teams.1.f90
               teams.1.f90:8: error: syntax:

               Parsed with Errors: teams.1.f90
               $
               [23/9] Search below the phrase "gui-less: build & generate".
 [2018-09-19]  The program "critical.2.f' is rejected (the HINT clause should be in the header). (done)
 [2018-09-20]  The parser rejects the examples "doacross.1.f90", ..., "doacross.4.f90".          (done)
               The ordered directive may be stand alone if the "depend" clause is present.       
 [2018-09-22]  This parser can parse the following OpenMP (4.5) directives:
               - ATOMIC, BARRIER
               - CANCEL, CANCELLATION POINT, CRITICAL
               - DECLARE REDUCTION, DECLARE SIMD, DECLARE TARGET
               - DISTRIBUTE, DISTRIBUTE PARALLEL DO, DISTRIBUTE PARALLEL DO SIMD, DISTRIBUTE SIMD
               - DO, DO SERIAL (*), DO SIMD
               - FLUSH
               - MASTER
               - ORDERED 
               - PARALLEL, PARALLEL DO, PARALLEL DO SIMD, PARALLEL SECTIONS, PARALLEL WORKSHARE
               - REDUCTION, SCHEDULE (* deprecated), SECTIONS, SIMD, SINGLE
               - TARGET, TARGET DATA, TARGET ENTER DATA, TARGET EXIT DATA, TARGET PARALLEL, 
                 TARGET PARALLEL DO, TARGET PARALLEL DO SIMD, TARGET SIMD, 
                 TARGET TEAMS, TARGET TEAMS DISTRIBUTE [PARALLEL DO] [SIMD], TARGET UPDATE
               - TASK, TASKGROUP, TASKLOOP [SIMD], TASKWAIT, TASKYIELD
               - TEAMS, TEAMS DISTRIBUTE [SIMD], TEAMS DISTRIBUTE PARALLEL DO [SIMD]
               - THREADPRIVATE, THREADLOCAL (*)
               - WORKSHARE
               (*) Two vendor specific directives may not be very accurate.
 [2018-09-22]  The following 6 directives haven't been tested yet:                                 (done)
            v  (a) DECLARE REDUCTION, 
            v  (b-d) TARGET TEAMS DISTRIBUTE [[PARALLEL DO] SIMD], 
            v  (f) TEAMS DISTRIBUTE PARALLEL DO SIMD, 
            v  (e) TASKLOOP SIMD 
               A really nice example ("target2.f90") tests (b-f) and "pr82568.f90" the (e).
 [2018-09-23]  The command "fcheck" fails to parse the following valued example:                   (done)
               software.intel.com/en-us/fortran-compiler-developer-guide-and-reference-declare-reduction
               The error message is: "declare-reduction.1.f90:8: error: syntax:Unexpected: '/'." 
               If '/0/' is replaced by '0', the directive is parsed (maybe an HTML typo).                
               Also, added "<omp-initializer-expr> ::= <procedure-name> <p-actual-arg-spec-list> ".
               See the note on 17/9 above. Perhaps, the last addition here was redundant.
 [2018-09-23]  Also with the "gui-less: build & generate" option I don't see the whole error msg: (done)
               declare-reduction.1.f90:8: error: syntax:Unexpected: '/'. Expected: "(", "(/", ")",
                "*", ".NOT.", ":", "::", "[", "binary/octal/hex constant", "char-literal-constant",
               "logical-literal-constant", "name", "number", "sign", or "user-defined-operator".
               todo: fix the guiless option as state errors aren't composed at all.
 [2018-09-23]  Also, I see the following, 2-line, spurious message:                              (done)
               "declare-reduction.1.f90:17: error: syntax:Unexpected end-module-stmt.
                Expected: end-program-stmt."
               Added error recovery on <spec-stmt>; and deleted the rule <omp-unknown-construct>
               (as all 4.5 directives have been implemented).
 [2018-09-24]  GNU Extension: Accept a user-defined-operator as a reduction-identifier.
               Several test cases in gfortran7 ie use such a feature:                             (done)
               $ fcheck -fopenmp ../gomp/udr5.f90
               ../gomp/udr5.f90:15: error: syntax:Unexpected: defined-unary-op with value '.MYADD.'.
               Expected: ".AND.", ".NOT.", ".OR.", "IAND", "IEOR", "IOR", "MAX", "MIN", "add-op",
               "equiv-op", "mult-op", or "name". 
 [2018-09-24]  The following warning has (a) wrong line number and (b) is redundant on a '&':    (done)
               free-2.f90:6: warning: Initial OpenMP directive lines must have a space after the
               sentinel "!$OMP".
               free-2.f90:5: error: syntax:Unexpected: '&'. Expected: ... 
 [2018-09-24]  <parallel-do-simd-clause> ::= <parallel-clause> | <omp-do-simd-clause>            (done)
               $ fcheck -fopenmp ../gomp/target2.f90
               ../gomp/target2.f90: error: syntax:Unexpected: 'SCHEDULE'. Expected: ...

 [2018-09-30]  The second error message for line 7 is redundant and obviously spurious:       (done)
               $ cat sma.f && fcheck -fopenmp sma.f 
                     PROGRAM FM722
                     PROGRAM FM722
                     real*4  B    = 4B
               100   format  (/$/)
               !$OMP PARsALLEL
                     write(0,100), (-H**+B)
               !$OMP END PARALLEL
                     character*8  H    = 8H                              
                     END
               sma.f:2: error: syntax:Unexpected name with value 'FM722'. Expected: "%", "(", ".",
               ":", "=", "=>", or "[". 
               sma.f:3: error: semantic:Initialization without ::
               sma.f:5: error: syntax:Unexpected name with value 'PARSALLEL'. Expected: "ATOMIC",
                                      "BARRIER", "CANCEL", "CANCELLATION", "CRITICAL", "DECLARE",
                                      "DISTRIBUTE", "DO", "FLUSH", "MASTER", "ORDERED", "PARALLEL",
                                      "SCHEDULE", "SECTIONS", "SIMD", "SINGLE", "TASK", "TASKGROUP",
                                      "TASKLOOP", "TASKWAIT", "TASKYIELD", "TEAMS", "THREADPRIVATE",
                                      or "WORKSHARE". 
               sma.f:7: error: syntax:Unexpected: 'PARALLEL'. 
               sma.f:7: error: syntax:Unsupported/Erroneous OpenMP End Statement. Expected:
                                      end-program-stmt.
               sma.f:8: error: semantic:Initialization without ::

         Note: Compilers that parse one statement at a time can print a better error message for
               the second line. The error message for line 5 might be somewhat long but in an IDE
               looks much better. Regarding line 7, I can't do currently sth better than a merging: 
               sma.f:7: error: syntax:Unexpected: 'PARALLEL'. Expected: end-program-stmt. 

               [1/10] We could print a slightly more accurate message with an extra state (7268+1):
               sma.f:7: error: syntax:Unexpected omp-end-parallel-stmt. Expected: end-program-stmt.
 
 [2018-09-30]  Add "OMP-END-TARGET" & remove other "OMP-END-*" from <unexpected-end-stmt>.   (done)
               Not really sure yet what's the best approach for the optional omp-end statements.   
               At the moment I've hand coded special recovery only for program units (ie a module).
               So, both the error messages and error recovery are still work in progress.
 
  

Free Form Preprocessor
----------------------
[ 2018-07-01 ] Bug: The preprocessor was accepting a line comment after a '&' in a character context (done).
[ 2018-07-03 ] todo: Add semantic actions that strip out statement continuation patters from quoted literals.
[ 2018-07-08 ] Enhancement: Allow line comment characters up to "\uFFFD", instead of "\u00FF".       (done)
               This value changed also in the scanner including all the (double) quoted literals.
               [13/9] According to Wikipedia, the Basic Multilingual Plane (U+E000–U+F8FF) hasn't 
               assigned characters. (see https://en.wikipedia.org/wiki/Private_Use_Areas).


Hand coded File Reader
----------------------
[ 2018-06-26 ] Bug (free form): The hand coded file reader was returning Hollerith constants within
               names (ie real x1h ;). (done)
[ 2018-06-27 ] Bug: The legacy parser hangs in Linux due to a '”' ie in the comments of "fsl2snd.f90". (done)
               This happened because the File Reader wasn't handling properly UTF-8 files. The locale 
               passed to "wifstream.imbue(locale)" requires different arguments in Win,Mac, and Linux.
        note:  To run the command "fcheck /debug x.f90" in Windows (8.1), I've to start it in a Blue,
               Pinned PowerShell Console, else some Unicode chars (ie a '–') aren't rendered properly.
               [05/09] In RedHat 9 also, I pass a custom "codecvt", utf8 converter to the locale.
[ 2018-07-07 ] Feature: The hand coded file reader cannot invoke a C preprocessor which is sometimes
               required by Fortran programs, ie by the program "wrf-phdf5support.F90".

The Following four new features/bug-fixes have not been tested very well yet:
 
[ 2018-07-18 ] GNU/Ora/PGI Extension (fixed form): Support the FORTRAN 77 Tab-Format. Read more at: (done)
               https://docs.oracle.com/cd/E19957-01/805-4939/z40007331ff1/index.html
               (see ie source file src/skewt/indices.f:701)
               As GNU Fortran does, fixed form continuation lines with a '&' in column 1 are rejected,
               and longer lines are truncated as usual (g77 doesn't truncate tabbed lines).                
[ 2018-07-18 ] Bug (fixed form): Mid-line comments in continued lines aren't handled properly.   (done)
               (see ie source file src/skewt/indices.f:281)             
[ 2018-07-22 ] GNU/PGI Extension: Space padding in fixed form lines up to 72 columns.     (done)
[ 2018-08-27 ] This reader now converts line endings to CR-LF's & the scanners have been adjusted. (done)
[ 2018-09-04 ] In windows 8.1, the filename "GEMINC:GEMPRM.PRM" used in the ARPS project is rejected
               and likely this isn't an error of the hand coded file reader (yet the line was wrong): (done)
               src\ext2arps\getgempak3d.f90:93: error: semantic:Cannot include file GEMINC:GEMPRM.PRM
[ 2018-09-07 ] Hollerith Constants that exceed a free form continued line aren't parsed properly.  (todo)



     Some legacy code examples have been found at: 
[*1] http://fortranwiki.org/fortran/show/Modernizing+Old+Fortran
[*2] https://docs.oracle.com/cd/E19957-01/805-4939/6j4m0vncp/index.html
[*3] http://h41379.www4.hpe.com/doc/82final/6324/6324pro_048.html

     The first large test suite (fcvs21) successfully passed by this Fortran parser can be found at:
[*4] https://www.itl.nist.gov/div897/ctg/fortran_form.htm

     The Legacy Parser can parse the source code of the ARPS Model System (5.3.4) except those files 
     that require C preprocessing (18 *.F and 1 *.F90). The ARPS Model System can be found at:
[*5] http://www.caps.ou.edu/ARPS/arpsdown.html

     The Legacy Parser can parse the source code of LAPACK (3.8.0) except those files that require 
     C preprocessing (5 *.F). The source code of LAPACK can be found at:
[*6] http://www.netlib.org/lapack/    

     The OMP (Legacy) Parser can parse the Fortran examples found in file "openmp-examples-4.5.0.pdf"
     (SHA1 b49451455b32dd6f1b31450d774476d4d1f74708), except the "standalone.1.f90" program which is
     supposed to be rejected by an OpenMP compliant implementation. This document can be found at:
[*7] https://www.openmp.org/wp-content/uploads/openmp-examples-4.5.0.pdf

