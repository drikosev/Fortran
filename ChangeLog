


Fortran parser Issues
---------------------

[ 2015-01-05 ] The derived-type-def didn't accept labels in type-bound-proc-bindings and a few
               semicolons were missing.
[ 2015-01-28 ] The "ONLY" keyword was undefined and the comma was omitted in "only-list".
[ 2015-03-03 ] Added the end-critical-stmt.
[ 2015-04-22 ] The parser rejected functions as lvalues, which are likely valid.
[ 2017-04-10 ] Removed the rule "ac-implied-do-object ::= keyword = expr". Added an accurate 
               "ac-implied-do-cntrl" .
[ 2017-05-01 ] The ERSP Extension was found to be buggy. So far cannot reproduce the bug in a
               small grammar (suspended).
[ 2017-05-03 ] touched name-f & removed name-r from lprocedure names and run all the tests in
               generated parser.
[ 2017-05-06 ] Extended the grammar with the newer assumed-rank-spec as an option to array-spec
               (seems an overkill to run again the tests).
[ 2017-07-07 ] The rule part-name-p-section-subscript-list-l didn't allow a follow "%" after an
               p-actual-arg-spec-list-l. In addition the part-name-p-section-subscript-list didn't
               allow a follow "=" that could be proved too restrictive for future requirements.
[ 2017-07-07 ] A awkward name rule "actual-arg-low-priority" has been replaced by "actual-arg".
[ 2017-07-08 ] The "do-block" should be optional in a "block-do-construct".
[ 2018-04-16 ] Segmentation fault on an extra comma in a type declaration stmt (ie: "real, x"). (done)
               [22/7] pgfortran accepts the above declaration but gfortran only "character*4,x".
[ 2018-04-19 ] Found an undefined <-name> instead of a <name> in <suffix> (after a <language-bindic-spec>).
[ 2018-04-21 ] Extension: Allow old style initialisation with slashes ("real pi / 3.14159 /") (done).
[ 2018-04-21 ] Extension: Allow Dec style length specification "real x*8 (2)"  (done) 
               (in addition to "real x(2) * 8").
               It doesn't allow such a length specification in a function name, ie:
               "INTEGER FUNCTION FCN*2 ( A, B, C )", see [*2].
[ 2018-04-23 ] Extension: <cray-pointer-stmt>. 
[ 2018-04-25 ] GNU/PGI Extension: Allow an extra comma in a <write-stmt>. ie:
               write (*,*), "handler";
[ 2018-06-26 ] Bug: The following erroneous 2 lines program sends the generated parser         (done)
               (not the simulator) to an infinitive loop:
               READ(nunit(k),'(6e17.6)')((xtrajc0(i,k),ytrajc0(i,k),ztrajc0(i,k)),i=1,ntrajcs)
               END
               [13/9] No longer hangs but I don't remember how it has been solved. 	
[ 2018-06-27 ] Bug: Added the keyword GOTO as an alternative to "Go To" in  <goto-stmt> 
               & <computed-goto-stmt>. (done)
[ 2018-06-27 ] Bug: It fails to parse an empty CASE DEFAULT, due to a wrong <case-block>. (done)
[ 2018-06-27 ] Bug (free form): In a format stmt, '(/','//','/)' are valid sequences of '(','/',')'. (done)
               See the directive "#sma" in the serialised version of the grammar (ie fortran_parser.txt).
[ 2018-06-27 ] Also, the Simulator (not the generated parser) fails to return a shorter match for '(/'. 
               It returns the label of the format stmt, instead of a '(' !!!
               [24/8] It fails if the shorter match hasn't been declared as a lexical token.
[ 2018-07-03 ] Bug: The parser rejects this: "REAL :: trigs1(3*(nx-1)/2+1)". (done)
               The bug has been introduced by one of the changes made between 2017-07-08 and 2018-07-03.
               The problem is solved if the <p-array-spec-buggy> or <initialization-obsolete> is
               removed. In this parser I've removed the latter (in the legacy parser below the former).
[ 2018-07-25 ] [8/9] Missing named constants in complex constants (see ie lapack/src/zsyrfsx.f:601) (done)
[ 2018-07-25 ] GNU Extension: Added DOUBLE COMPLEX (see ie lapack/CBLAS/testing/c_zblat3.f:2275).  (done)
[ 2019-01-02 ] A sign isn't allowed in the width (<n>) of a position edit descriptor.       (done)                 
[ 2019-03-10 ] The "label-do" shouldn't be proposed as an expected token (see OMP_Legacy_parser).  (done)


Fortran scanner Issues
----------------------
[ 2017-05-03 ] I'd predicted only array context after "call*" and the scanner was returning a
               name-l on "call r('s')" (affects not_cons_keys ).
[ 2018-04-19 ] A scalar-int-constant-name may have underscores (ie: c_char_"kernel32.dll").
[ 2018-04-28 ] Extension: GNU/VMS/Oracle <hex-constant> with X in addition to Z (see [*2] ie: X'1f').
[ 2018-04-28 ] An invalid <,> token has been removed.
[ 2018-05-04 ] Undefined Lexical Rule "ID::=I D" (ie: write (iu, rec=n, asynchronous="YES", id=id) buffer;)
[ 2018-06-26 ] Extension: Keywords STATIC/AUTOMATIC (done)
[ 2018-06-27 ] Bug: Added the keyword GOTO (done)
[ 2018-07-03 ] Extension: added <octal-legacy> as an alternative that accepts some old style constants.  (done)
               (ie n=1B as in the ARPS model src/arpsagr/packcray.f90:284). Yet see fcvs21/FM901.FOR:54
               [22/7] <char-length> ::= <LABEL> and activated semantic actions on SMA due to "do-labels".
               [27/8] undo the above as the scanner now returns on SMA all the alternative tokens.
               [2019-10-14] Still this functionality hasn't been fully implemented in the Simulator.
[ 2018-07-25 ] GNU Extension: Added DOUBLE COMPLEX (see ie lapack/CBLAS/testing/c_zblat3.f:2275).        (done)
[ 2018-09-24 ] Remove  from token: <.EQ.>,<.NE.>,<.LT.>,<.LE.>,<.GT.>,<.GE.>                             (done)
               Only a <rel-op> is known to the parser and on error the "unexpected part" is missing:
	       $ fcheck -fopenmp ../gomp/udr1.f90
               ../gomp/udr1.f90:4: error: syntax:Expected: ".AND.", ".NOT.", ".OR.", "IAND", "IEOR",
               "IOR", "MAX", "MIN", "add-op", "equiv-op", "mult-op", or "name".


The Following bug-fix has not been tested very well yet:

[ 2018-07-24 ] The Lexical Rule <name-f> fails when the following three conditions are met:              (done)
               (1) A Function is an external subprogram (2) with a prefix that is a type, ie "real", and    
               (3) the function name contains an underscore (see ie src/skewt/misc_kb.f:227).
               Now, the semantic action takes full control and returns either a FUNCTION or a <name-l>.
        note:  [1/9] The scanners are now capable not to return specific tokens as a shorter match, in 
                     this case a <name-r> which the parser could shift.      
 [2019-01-13]  IBM/PGI/Ora/VMS Extension. Allow the Q edit descriptor (character count).    (done) 
               There also exists the extended precision Q edit descriptor; see below: 
 [2019-01-14]  IBM Extension. Allow the Qw.d edit descriptor (character count).             (done) 


 OMP (Legacy) Scanner Issues
 ---------------------------
 [2018-09-17]  The <omp-compound> shouldn't begin with "EXIT" because the parser then accepts           (done)
               in free form the invalid statement "exitcn", where "cn" is the name of a construct.
               [22/10] Undo. Add "EXIT" to "<omp-compound>", as we've a sem. action now.  
 [2018-09-21]  This scanner doesn't accept in free form an omitted space between the keywords "DO"      (done)
               and "SIMD", in construct headers. I think there are six constructs in OpenMP (4.5)
               which are affected by this shortcoming:
               -distribute parallel do simd
               -do simd 
               -parallel do simd 
               -target parallel do simd
               -target teams distribute parallel do simd
               -teams distribute parallel do simd
               [22/10] Now, the semantic action "OMPCompound" examines the flag "omp_line". 
 [2018-09-21]  PGI Extension. Allow in free form an omitted space between "CANCELLATION" and "POINT".   (done)
        note:  [23/10] Undo. Regarding spacing rules, we'll try to be compliant. Yet, the scanner 
               might accept ie an omitted space (likely) before the first clause, although it 
               shouldn't. This is a free form specific issue and strict compliance comes at the
               price of a somewhat larger DFA.
 [2018-09-24]  Remove  from token: <.EQ.>,<.NE.>,<.LT.>,<.LE.>,<.GT.>,<.GE.>                            (done) 
               The parser knows only the <rel-op> and on error the "unexpected part" is missing:
	       $ fcheck -fopenmp ../gomp/udr1.f90
               ../gomp/udr1.f90:4: error: syntax:Expected: ".AND.", ".NOT.", ".OR.", "IAND", "IEOR",
               "IOR", "MAX", "MIN", "add-op", "equiv-op", "mult-op", or "name".
 [2018-10-20] The following 5 lines program is rejected (fcheck on sierra built on July 3 parses it):   (done) 
              $ cat dosimd.f && fcheck dosimd.f
              1      integer simd
              2      dosimd=1,4       !i saw a weird key DO-SIMD ::= D O S I M D
              3        print *, simd
              4      end do
              5      end
              dosimd.f:2: error: syntax:Unexpected: ','. Expected: "**", ".AND.", ".OR.", ";", 
              "add-op", "concat-op", "equiv-op", "mult-op", "rel-op", or "user-defined-operator". 
              dosimd.f:4: error: syntax:Unexpected end-do-stmt. Expected: end-program-stmt.
 [2019-01-13]  IBM/PGI/Ora/VMS Extension. Allow the Q edit descriptor (character count).    (done) 
               There also exists the extended precision Q edit descriptor; see below: 
 [2019-01-14]  IBM Extension. Allow the 'Qw.d' (extended precision) edit descriptor.        (done) 
 [2019-03-28]  Vendor extension: Support the L/I edit descriptors without a following 'w'.  (done)
 [2019-05-01]  A DT edit descriptor cannot have a kind-parameter.                           (done)
        Note:  Both the "char-literal-constant" and the "<fmt dt & char-literal-constant>"
               needed adjustments.  
 [2019-06-18]  In fixed form, the "interface operator" statement isn't tokenised properly.  (done)
        Note:  [19/6] The scanner always returns a "name-l" whenever it sees the word
               "interfaceoperator" followed by a '('. Because, we haven't defined the rule
               that allows two consecutive keywords to begin with the keyword INTERFACE.
 [2019-06-19]  In fixed form, the program below is rejected:                                (done)
               $ cat apdetect.f90 && fcheck -ffixed-form apdetect.f90 2>&1 | tail -n 1
                     IF( abs(tmp(igate+1,jazim)) < 1e-1 .AND. &
                         abs(tmp(igate,jazim-1)) < 1e-1 )     THEN
                             velvol(igate,jazim,kk) = gcflag
                     END IF
                     END

               Parsed with Errors: apdetect.f90
        Note:  We've a restriction that a "real-literal-constant" cannot be followed by a dot:
               <real-literal-constant> ::= <digit-string exponent-letter exponent> +: <not-dot>
        Note:  This restriction was supposed to resolve conflicts with tokens used in Format
               Statements, which however are always parsed now with the flag "shorter_match"
               set to true, in both fixed & free form.
 [2019-07-02]  The scanner should check not just for array context before it decide        (done)
               to return a "<name-l>" but also for coarray context as well. For the 
               third line below the scanner returns a "<name-l>" with value "REALA".
               $ cat lcoarray-context.f90 && fcheck -ffixed-form lcoarray-context.f90 
                     SUBROUTINE EXAMPLE2 (A)
                         USE,INTRINSIC :: ISO_FORTRAN_ENV, ONLY: TEAM_TYPE
                         REAL A[*]
                     END SUBROUTINE EXAMPLE2
               lcoarray-context.f90:3: error: syntax:Unexpected: '*'. Expected:
               "%", "(", "(/", ".NOT.", "[", "constant", "name", or "user-defined-operator". 

               Parsed with Errors: lcoarray-context.f90
 [2019-08-22]  Intel Fortran extension: accept DIRECTORY as a keyword.                      (done) 
 [2019-10-13]  The first Rewind statement below would likely need classification.           (done) 
               $ cat ds_pythia.for && fcheck ds_pythia.for
               C...Rewind initialization and event files.
                     REWIND MSTP(161)                            !
                     REWIND (UNIT = MSTP(161), IOSTAT = CODE, ERR = 100) !my line 
                     END

               ds_pythia.for:2: error: syntax:Unexpected End Of Statement. Expected:
                                  "%", "(", ".", "=", or "[". 

               Parsed with Errors: ds_pythia.for
        Note:  Now the keyword REWIND is treated as the CALL and DATA keywords. 
 [2020-03-31]  GNU/DEC extension: Parse an F/G data-edit-desctiptor without a 'w[.d]'.      (done)
 [2020-06-16]  GNU/PGI extension: accept BOZ Literals in postfix format (ie '1'O, '1'X).    (todo)
        Note:  See also the <octal-legacy> extension documented on 2018-07-03.
        Note:  See also the note on 14/6, why the preprocessor shouldn't recognize BOZes. 



Legacy parser Issues
--------------------
[ 2018-04-22 ] Support for VAX/DEC structures, unions, maps, and records. 
[ 2018-04-23 ] The keyword "RECORD" wasn't acceptable in the interface of a PROCEDURE declaration stmt
               (Fortran 2003).  (done).
[ 2018-04-23 ] The Dec specific <parameter-stmt> isn't supported in fixed form (ie PARAMETER y = 1 is
               interpreted as PARAMETERy= 1).
[ 2018-04-23 ] Extension: <cray-pointer-stmt>. 
[ 2018-04-25 ] GNU/PGI Extension: Allow an extra comma in a <write-stmt>. ie:
               write (*,*), "hello";
[ 2018-04-26 ] Extension: Allow an originally IBM specific DEFINE FILE Statement, <define-file-unit-stmt>.
               See also [*1].
[ 2018-04-28 ] Extension: GNU/VMS/Oracle '$' as a <data-edit-desc> (see [*3] ie:
               "100  FORMAT (' ENTER RADIUS VALUE ',$)").               
[ 2018-06-26 ] Extension: Allow DEC/GNU STATIC/AUTOMATIC attributes in <type-declaration-stmt> and
               <save-stmt>. See: http://gcc.gnu.org/onlinedocs/gfortran/AUTOMATIC-and-STATIC-attributes.html
[ 2018-06-26 ] Extension: Allow a parenthesised <io-implied-do-object-list>  (done)
[ 2018-06-27 ] Bug: Added the keyword GOTO as an alternative to "Go To" in  <goto-stmt> & 
               <computed-goto-stmt>. (done)
[ 2018-06-27 ] Bug: It fails to parse an empty CASE DEFAULT, due to a wrong <case-block>. (done)
[ 2018-06-27 ] Bug (free form): In a format stmt, '(/','//','/)' are valid sequences of '(','/',')'. (done)
               See the directive "#sma" in the serialised version of the grammar (ie legacy_parser.txt).
[ 2018-06-27 ] Also, the Simulator (not the generated parser) fails to return a shorter match for '(/'. 
               It returns the label of the format stmt, instead of a '(' !!!
               [24/8] It fails if the shorter match hasn't been declared as a lexical token.
[ 2018-07-03 ] Bug: The legacy parser rejects this: "REAL :: trigs1(3*(nx-1)/2+1)". (done)
               The bug has been introduced by one of the changes made between 2017-07-08 and 2018-07-03.
               If the error production <p-array-spec-buggy> is removed, then the problem is solved. In
               addition the Shift/Reduce conflict with the <p-io-implied-do-object-list> disappeared.
[ 2018-07-04 ] GNU Extension: Allow a missing ',' in a <format-stmt> between a <control-edit-desc> that is
               a <position-edit-desc> and a <data-edit-desc> (see src/arpsverif/arpshis2ver.f90:4785)  (done)
[ 2018-07-25 ] Bug: Missing named constants in complex constants (see ie lapack/src/zsyrfsx.f:601) (done)
[ 2018-07-25 ] GNU Extension: Added DOUBLE COMPLEX (see ie lapack/CBLAS/testing/c_zblat3.f:2275).  (done)
[ 2018-11-07 ] Apply the following 2 changes implemented in "OMP_Legacy_Parser.txt" on 6/11:       (done)
               (a) Error recovery in the component part of a "derived-type-def"
               (b) VAX Extension that allows an empty argument.
 [2019-01-01]  GNU/PGI Extension. Allow a position edit descriptor 'X' without width.       (done)
               Also, print a nice message if <n> isn't specified after a T, TL, and TR. 
 [2019-01-01]  A sign isn't allowed in the width (<n>) of a position edit descriptor.       (done)                 
 [2019-01-13]  VMS/PGI/GNU/Ora Extension: Accept arguments passing by the functions '%VAL',
               and '%REF'. Also, accept (is a designator ok?) the function '%LOC'           (done)      
 [2019-01-13]  IBM/PGI/Ora/VMS Extension. Allow the Q edit descriptor (character count).    (done) 
               There also exists the extended precision Q edit descriptor; see below: 
 [2019-01-14]  IBM Extension. Allow the 'Qw.d' (extended precision) edit descriptor.        (done) 
 [2019-03-10]  The "label-do" shouldn't be proposed as an expected token (see OMP_Legacy_parser).  (done)


 OMP (Legacy) Parser Issues
 --------------------------
 [2018-09-14] It can't parse the example "fort_do.1.f" in document "openmp-examples-4.5.0.pdf".   (done)
              Added prefix <omp-do-for-shared-term> to <inner-shared-do-construct>.
        Note: In the OpenMP (4.5) draft we read that a "do-loop" can be either a "do-construct"
              or an "inner-shared-do-construct". Conceptually, it's understoodable. Yet I can't
              write a rule of the form "do-loop ::= do-construct | inner-shared-do-construct" as
              the generated parser would pop the wrong number of elements on that reduction.
 [2018-09-14] The example 'nthrs_dynamic.1.f' in document "openmp-examples-4.5.0.pdf is rejected. (done)
 [2018-09-15] Similarly, an omitted "structured-block" in a task is rejected ("tasking.7.f").     (done)
 [2018-09-16] The example "task_priority.1.f90" is rejected (undefined "<omp-priority>").         (done)
 [2018-09-17] The "list" used in OpenMP clauses isn't a "<named-list>" as this grammar assumed.   (done)
              In the OpenMP-4.5 draft we read that "a list item is a variable, array section or 
              common block name (enclosed in slashes). An extended list item is a list item
              or a procedure name".
        Note: Since in our Fortran Grammar a Data Reference includes a Procedure Name, the
              extended-list is simply defined as a list.
 [2018-09-17] In "<omp-target-exit-data-stmt>", use the new keyword "OMP-TARGET-EXIT".            (done)
              [6/11] Undo ("OMP-TARGET-EXIT" has been deleted, since 22/10 I think).
 [2018-09-18] On an unknown OpenMP Directive, the error message is empty:                         (done)
               $ fcheck -fopenmp teams.1.f90
               teams.1.f90:8: error: syntax:

               Parsed with Errors: teams.1.f90
               $
               [23/9] Search below the phrase "gui-less: build & generate".
 [2018-09-19]  The program "critical.2.f' is rejected (the HINT clause should be in the header). (done)
 [2018-09-20]  The parser rejects the examples "doacross.1.f90", ..., "doacross.4.f90".          (done)
               The ordered directive may be stand alone if the "depend" clause is present.       
 [2018-09-22]  This parser can parse the following OpenMP (4.5) directives:
               - ATOMIC, BARRIER
               - CANCEL, CANCELLATION POINT, CRITICAL
               - DECLARE REDUCTION, DECLARE SIMD, DECLARE TARGET
               - DISTRIBUTE, DISTRIBUTE PARALLEL DO, DISTRIBUTE PARALLEL DO SIMD, DISTRIBUTE SIMD
               - DO, DO SERIAL (*), DO SIMD
               - FLUSH
               - MASTER
               - ORDERED 
               - PARALLEL, PARALLEL DO, PARALLEL DO SIMD, PARALLEL SECTIONS, PARALLEL WORKSHARE
               - REDUCTION, SCHEDULE (* deprecated), SECTIONS, SIMD, SINGLE
               - TARGET, TARGET DATA, TARGET ENTER DATA, TARGET EXIT DATA, TARGET PARALLEL, 
                 TARGET PARALLEL DO, TARGET PARALLEL DO SIMD, TARGET SIMD, 
                 TARGET TEAMS, TARGET TEAMS DISTRIBUTE [PARALLEL DO] [SIMD], TARGET UPDATE
               - TASK, TASKGROUP, TASKLOOP [SIMD], TASKWAIT, TASKYIELD
               - TEAMS, TEAMS DISTRIBUTE [SIMD], TEAMS DISTRIBUTE PARALLEL DO [SIMD]
               - THREADPRIVATE, THREADLOCAL (*)
               - WORKSHARE
               (*) Two vendor specific directives may not be very accurate.
 [2018-09-22]  The following 6 directives haven't been tested yet:                                 (done)
            v  (a) DECLARE REDUCTION, 
            v  (b-d) TARGET TEAMS DISTRIBUTE [[PARALLEL DO] SIMD], 
            v  (f) TEAMS DISTRIBUTE PARALLEL DO SIMD, 
            v  (e) TASKLOOP SIMD 
               A really nice example ("target2.f90") tests (b-f) and "pr82568.f90" the (e).
 [2018-09-23]  The command "fcheck" fails to parse the following valued example:                   (done)
               software.intel.com/en-us/fortran-compiler-developer-guide-and-reference-declare-reduction
               The error message is: "declare-reduction.1.f90:8: error: syntax:Unexpected: '/'." 
               If '/0/' is replaced by '0', the directive is parsed (maybe an HTML typo).                
               Also, added "<omp-initializer-expr> ::= <procedure-name> <p-actual-arg-spec-list> ".
               See the note on 17/9 above. Perhaps, the last addition here was redundant.
 [2018-09-23]  Also with the "gui-less: build & generate" option I don't see the whole error msg: (done)
               declare-reduction.1.f90:8: error: syntax:Unexpected: '/'. Expected: "(", "(/", ")",
                "*", ".NOT.", ":", "::", "[", "binary/octal/hex constant", "char-literal-constant",
               "logical-literal-constant", "name", "number", "sign", or "user-defined-operator".
               Fix the guiless option as state errors aren't composed at all.                    (done)
 [2018-09-23]  Also, I see the following, 2-line, spurious message:                              (done)
               "declare-reduction.1.f90:17: error: syntax:Unexpected end-module-stmt.
                Expected: end-program-stmt."
               Added error recovery on <spec-stmt>; and deleted the rule <omp-unknown-construct>
               (as all 4.5 directives have been implemented).
 [2018-09-24]  GNU Extension: Accept a user-defined-operator as a reduction-identifier.
               Several test cases in gfortran7 ie use such a feature:                            (done)
               $ fcheck -fopenmp ../gomp/udr5.f90
               ../gomp/udr5.f90:15: error: syntax:Unexpected: defined-unary-op with value '.MYADD.'.
               Expected: ".AND.", ".NOT.", ".OR.", "IAND", "IEOR", "IOR", "MAX", "MIN", "add-op",
               "equiv-op", "mult-op", or "name".
               [2019-03-29] The program should issue a portability warning.                      (done)
 [2018-09-24]  The following warning has (a) wrong line number and (b) is redundant on a '&':    (done)
               free-2.f90:6: warning: Initial OpenMP directive lines must have a space after the
               sentinel "!$OMP".
               free-2.f90:5: error: syntax:Unexpected: '&'. Expected: ... 
 [2018-09-24]  <parallel-do-simd-clause> ::= <parallel-clause> | <omp-do-simd-clause>            (done)
               $ fcheck -fopenmp ../gomp/target2.f90
               ../gomp/target2.f90: error: syntax:Unexpected: 'SCHEDULE'. Expected: ...

 [2018-09-30]  The second error message for line 7 is redundant and obviously spurious:       (done)
               $ cat sma.f && fcheck -fopenmp sma.f 
                     PROGRAM FM722
                     PROGRAM FM722
                     real*4  B    = 4B
               100   format  (/$/)
               !$OMP PARsALLEL
                     write(0,100), (-H**+B)
               !$OMP END PARALLEL
                     character*8  H    = 8H                              
                     END
               sma.f:2: error: syntax:Unexpected name with value 'FM722'. Expected: "%", "(", ".",
               ":", "=", "=>", or "[". 
               sma.f:3: error: semantic:Initialization without ::
               sma.f:5: error: syntax:Unexpected name with value 'PARSALLEL'. Expected: "ATOMIC",
                                      "BARRIER", "CANCEL", "CANCELLATION", "CRITICAL", "DECLARE",
                                      "DISTRIBUTE", "DO", "FLUSH", "MASTER", "ORDERED", "PARALLEL",
                                      "SCHEDULE", "SECTIONS", "SIMD", "SINGLE", "TASK", "TASKGROUP",
                                      "TASKLOOP", "TASKWAIT", "TASKYIELD", "TEAMS", "THREADPRIVATE",
                                      or "WORKSHARE". 
               sma.f:7: error: syntax:Unexpected: 'PARALLEL'. 
               sma.f:7: error: syntax:Unsupported/Erroneous OpenMP End Statement. Expected:
                                      end-program-stmt.
               sma.f:8: error: semantic:Initialization without ::

         Note: Compilers that parse one statement at a time can print a better error message for
               the second line. The error message for line 5 might be somewhat long but in an IDE
               looks much better. Regarding line 7, I can't do currently sth better than a merging: 
               sma.f:7: error: syntax:Unexpected: 'PARALLEL'. Expected: end-program-stmt. 

               [1/10] We could print a slightly more accurate message with an extra state (7268+1):
               sma.f:7: error: syntax:Unexpected omp-end-parallel-stmt. Expected: end-program-stmt.
               [6/10] The last change above would introduce the keyword "END" as an expected token
               in the error message at line 5. Such a proposal would be invalid though.
               [22/10] Note that the token "TARGET" wasn't appearing as an expected token in the 
               message at line 5 before I add the keyword "TARGET" in lex rule "<omp-compound>".
               [13/3] Faced a side effect with the unknown token '?' in "write.f90" below.
               [31/3] The message "Reduced Error Production" has been uncovered here.        (done)
 [2018-09-30]  Add "OMP-END-TARGET" & remove other "OMP-END-*" from <unexpected-end-stmt>.   (done)
               Not really sure yet what's the best approach for the optional omp-end statements.   
               At the moment I've hand coded special recovery only for program units (ie a module).
               So, both the error messages and error recovery are still work in progress.
               [6/11] Deleted "OMP-END-TARGET" as the "omp-end-target-stmt" isn't optional. 
 [2018-11-06]  Spurious error messages (ie see msg at line 9 below) without error recovery   (done)
               in the component part of a "derived-type-def" (which I also simplified it).
               $ fcheck wrong-order.f90
               wrong-order.f90:5: error: syntax:Unexpected: 'PRIVATE'. Expected: "BYTE",
               "CHARACTER", "CLASS", "COMPLEX", "CONTAINS", "DOUBLE", "END", "INTEGER", 
               "LOGICAL", "PROCEDURE", "REAL", "RECORD", or "TYPE". 
               wrong-order.f90:9: error: syntax:Unexpected end-type-stmt. Expected: end-module-stmt.
 [2018-11-06]  VAX Extension that allows an empty argument.                                  (done)
               $ cat umfpack_zsolver.f90 && fcheck umfpack_zsolver.f90
               call umf4zsym (n, n, Ap, Ai, Az, , symbolic, this%control, this%info)
               end
               umfpack_zsolver.f90:1: warning: Omitted argument is a non portable legacy extension.
 [2019-01-01]  GNU/PGI Extension. Allow a position edit descriptor 'X' without width.       (done)
               Also, print a nice message if <n> isn't specified after a T, TL, and TR. 
 [2019-01-01]  A sign isn't allowed in the width (<n>) of a position edit descriptor.       (done)                 
 [2019-01-13]  VMS/PGI/GNU/Ora Extension: Accept arguments passing by the functions '%VAL',
               and '%REF'. Also, accept (is a designator ok?) the function '%LOC'           (done)      
               Note: A strange conflict appeared that I don't see in "legacy_parser.txt".
               That's why the rule <vms-location> is restricted by "-: {=}".
 [2019-01-13]  IBM/PGI/Ora/VMS Extension. Allow the Q edit descriptor (character count).    (done) 
               There also exists the extended precision Q edit descriptor; see below: 
 [2019-01-14]  IBM Extension. Allow the Qw.d edit descriptor (character count).             (done) 
               The following example summarises the latest legacy features supported:
               $ cat percent.f && fcheck percent.f
               1     integer X
               2     format (Q)
               3     read (*,2) x
               4     call foo ( %LOC(x), %VAL(x), %REF(x), %DESCR (x))
               5     print "(Q10.3)", %LOC(x)
               6     print "(Q10.3)", %REF(x)
               7     end
               percent.f:2: warning: The Q descriptor (Character Count) is a non portable vendor
               extension.
               percent.f:4: warning: Intrinsic function '%LOC' is a Legacy VMS Extension.
               percent.f:4: warning: Argument passing with function '%VAL' is a Legacy VMS Extension.
               percent.f:4: warning: Argument passing with function '%REF' is a Legacy VMS Extension.
               percent.f:4: error: syntax:Unexpected name with value 'DESCR'. Expected: "LOC", "REF",
               or "VAL". 
               percent.f:5: warning: Intrinsic function '%LOC' is a Legacy VMS Extension.
               percent.f:5: warning: The extended precision descriptor 'Q10.3' is an IBM extension.
               percent.f:6: error: syntax:Unexpected: 'REF'. Expected: "LOC". 
               
               Parsed with Errors: percent.f
 [2019-03-10]  The "label-do" isn't the only spurious token in the error message below:       (done)
               $ cat write.f90 && fcheck -ffixed-form write.f90
               1     write( ? , * ) r
               2     end

               write.f90:1: error: syntax:Haven't parsed properly balanced END statements. Expected:
                                   "%", "(", "(/", ")", "*", ".NOT.", ":", "::", "ADVANCE",
                                   "ASYNCHRONOUS", "DECIMAL", "DELIM", "ERR", "FMT", "ID", "IOMSG",
                                   "IOSTAT", "NML", "POS", "REC", "ROUND", "SIGN", "UNIT", "[",
                                   "binary/octal/hex constant", "char-literal-constant", "label",
                                   "label-do", "logical-literal-constant", "name", "number", "sign",
                                   or "user-defined-operator". 

               Parsed with Errors: write.f90

         Note: [13/3] All constants (+sign) are grouped now as a "constant" and all labels as a
               "label", which can't be the leftmost argument in a "<o-control-spec-list>". Further,
               in fixed form the parser got a fake EOF (related to "sma.f:2" above). So far, these
               four adjustments don't add any states to the parser. The adjusted message is this:  

               $ fcheck -ffixed-form write.f90
               write.f90:1: error: syntax:Unexpected: '?'. Expected: "%", "(", "(/", ")", "*",
                                   ".NOT.", ":", "::", "ADVANCE", "ASYNCHRONOUS", "DECIMAL",
                                   "DELIM", "ERR", "FMT", "ID", "IOMSG", "IOSTAT", "NML", "POS",
                                   "REC", "ROUND", "SIGN", "UNIT", "[", "constant", "name", or
                                   "user-defined-operator". 

               Parsed with Errors: write.f90
 [2019-03-28]  Vendor extension: Support the L/I edit descriptors without a following 'w'.       (done)
 [2019-03-30]  GNU/PGI extension: parse the rightmost ',' in the READ statement below:           (done)
               $ cat read-format-2.f90 && fcheck read-format-2.f90
               1    integer X
               2    read (*,"(I5)"),  X
               3    end

               read-format-2.f90:2: error: syntax:Unexpected: ','. Expected: "%", "(", "(/", ".",
               ".NOT.", ";", "=", "[", "constant", "name", or "user-defined-operator". 

               Parsed with Errors: read-format-2.f90
 [2019-03-30]  Various extensions in format items are usually faced in format strings,       (done)
               embedded in READ/WRITE statements. To identify and support such extensions
               in existing, large code bases we've to parse & validate these strings as 
               format specifications. Yet, we don't have a type checking subsystem now.     
 
               As an interim solution, I'll classify the PRINT/READ/WRITE statements and add 
               easily temporary semantic actions which can validate a Format String that
               is a "character-literal-constant", not only in Print Statements but also in
               Read and Write Statements as well.
 
        Note:  These temporary semantic actions have to eventually be replaced by permanent 
               actions (as soon as we implement a type checking subsystem).  
        Note:  [24/8] The keywords READ/WRITE are rejected in other statements.             (done)
        Note:  [27/8] To postpone the removal of those temporary actions, I'll add as an 
               extra hack the keywords READ2/WRITE2 that can assist a new semantic action 
               in the scanner return the keywords READ/WRITE in the middle of a statement.  
 [2019-03-31]  Except "SUBROUTINE", the keywords in the error message below are spurious.   (done)                   
               $ cat subroutine-1.f90 && fcheck subroutine-1.f90  2>&1 | grep -v "3"
               1     subroutine s
               2     end ?

               subroutine-1.f90:2: error: syntax:Unexpected: '?'. Expected: "%", "(", ".", ":",
               ";", "=", "=>", "ASSOCIATE", "BLOCK", "CRITICAL", "DO", "ENUM", "EOF", "FORALL",
               "FUNCTION", "IF", "INTERFACE", "MAP", "MODULE", "PROCEDURE", "PROGRAM", "SELECT",
               "STRUCTURE", "SUBMODULE", "SUBROUTINE", "TYPE", "UNION", "WHERE", or "[". 

               Parsed with Errors: subroutine-1.f90
        Note:  [7/4] I've adjusted the error recovery rules in Fortran end statements, not in
               OpenMP end statements, which might be a subsequent task.
        Note:  [8/5] I've adjusted the error recovery rules in OpenMP end statements, which
               in turns restores the error message in "sma.f:5" above (see the 6/10 note).
        Note:  [8/5] The parser should recover inside an end-statement after an END keyword.
               It seems to be the obvious choice that eliminates the last msg in this case. (done)  
[ 2019-04-18]  This program isn't rejected in the Simulator. Sem. actions are necessary.    (done)   
               $ cat fmt3.f90
               1 format (XA12I5) ;
               2 print "(XA12I5)" , "i=", i
               3 end
 [2019-05-01]  Character Literal constants are not valid in Input Format Strings.           (done) 
        Note:  At the moment, the validation is effective only in the "format_parser".
 [2019-05-15]  GNU/PGI/VMS Extension: Parse Fortran Include Directives also as normal       (done)
               Fortran statements that may have continuation patterns. 
        Note:  This extension doesn't fit very well in the implementation and the command
               "fcheck" warns that an INCLUDE directive should appear on a single source
               line. Also, these statements aren't acceptable everywhere in the grammar.
 [2019-07-01]  Fortran 2018 (Part I)                                                        (done)      
               -EVENT POST/WAIT statements
               -IMPORT, ALL/NONE 
               -NON RECURSIVE prefix
               -generic-stmt
               -New Edit Descriptor 'exw.d' or 'exw.dee' 
               -Locality Specification in Loop Control
                 Notes: 
                 (a) <forall-header> is superset of <concurrent-header>.
                 (b) The index-name is obligatory!
               -IMPLICIT <NONE> <implicit-none-spec-list> 
 [2019-08-22]  Intel Fortran extension: accept DIRECTORY as an INQUIRE named specification. (done)  
 [2019-10-12]  A follow-restriction is likely necessary in the generic-spec.                (done) 
               $ cat ds_iso_varying_string.f90 && fcheck ds_iso_varying_string.f90
               1     interface operator(//)
               2         module procedure op_concat_VS_VS
               3     end interface operator(//)
               4     end

               ds_iso_varying_string.f90:3: error: syntax:Unexpected: (/. Expected: ";". 

               Parsed with Errors: ds_iso_varying_string.f90
         Note: The particular follow-restriction introduces a conflict in the grammar
               without the temporary actions (2019-03-30). Instead, a restriction will 
               be placed wherever the generic-spec is the last element of a production
               (use-stmt, only-list, access-stmt, access-id-list, end-interface-stmt).
 [2019-10-15]  The grammar without the temporary actions would fail to parse this code:     (done)
               $ cat ds_prc_omega.f90 && fcheck ds_prc_omega.f90
                      write (u, "(4x,16(1x,I2))")  [(h, h = 1, data%n_hel)]
                      end

               ds_prc_omega.f90:1: error: syntax:Unexpected: '='. Expected: ")". 

               Parsed with Errors: ds_prc_omega.f90
         Note: The reason is that the <lbracket-rule> has some restrictions, which are
               no longer necessary. It will be adjusted in this grammar also.
               <lbracket-rule> ::? <lbracket>  /*//disable ERSP for this rule*/
 [2019-10-26]  Associate constructs can be empty.                                           (done)
               $ cat associate_47.f90 && fcheck associate_47.f90   2>&1 | tail -n 1
               1     associate (y => x%d(:)(2:4))
               2     end associate
               3 end

               Parsed with Errors: associate_47.f90
 [2020-03-31]  GNU/DEC extension: Parse an F/G data-edit-desctiptor without a 'w[.d]'.      (done)
 [2020-03-31]  GNU/DEC extension: Allow the last format item to be blank (after  ',').      (done)


Format Scanner
--------------
 [2019-01-14]  IBM Extension. Allow the Qw.d edit descriptor (character count).             (done) 
 [2019-03-28]  Delete the "concat" operator from this scanner. Also, the message doesn't    (done)
               display the "unexpected" token read by the Format Parser.
               $ cat apdetect.f90 && fcheck apdetect.f90
               1     format   (1x,a,f9.2,a,f9.2,/3x,a//)
                     print   '(1x,a,f9.2,a,f9.2,/3x,a//)'
                     end

               apdetect.f90:2: error: syntax:Format string error, expected :")", ",", "/", ":",
               "A", "DT", "char-literal-constant", "fmt dt & char-literal-constant",
               "fmt{E,EN,ES,G}w . d E e", "fmt{F,E,EN,ES,G,D}w . d", "fmt{G}w",
               "fmt{I,B,O,Z,F,E,EN,ES,G,D}w . d", "fmt{I,B,O,Z,G,L,A}w", or "fmt{I,B,O,Z}w . d". 

               Parsed with Errors: apdetect.f90
        Note:  [30/3] delete all redundant keywords from this scanner. 
 [2019-03-28]  Vendor extension: Support the L/I descriptors without a following 'w'.       (done)
        Note:  These two changes should be implemented also in the OMP (Legacy) Scanner.    (done)
 [2019-05-01]  A DT edit descriptor cannot have a kind-parameter.                           (done)
        Note:  Without the flag "report conflicting tokens", the format parser cannot
               see an R/R conflict as the "OMP (legacy) parser" does with a Sem. action
               on rule "<char-string-edit-desc>".    
 [2020-03-31]  GNU/DEC extension: Parse an F/G data-edit-desctiptor without a 'w[.d]'.      (done)


Format Parser
-------------
 [2019-01-01]  GNU/PGI Extension. Allow a position edit descriptor 'X' without width.       (done)
               Also, print a nice message if <n> isn't specified after a T, TL, and TR. 
 [2019-01-01]  A sign isn't allowed in the width (<n>) of a position edit descriptor.       (done)                 
 [2019-01-13]  IBM/PGI/Ora/VMS Extension. Allow the Q edit descriptor (character count).    (done) 
               There also exists the extended precision Q edit descriptor; see below: 
 [2019-01-14]  IBM Extension. Allow the Qw.d edit descriptor (character count).             (done) 
 [2019-03-28]  Vendor Extension: Allow a Format String not surrounded  by parentheses.      (done)
        Note:  [7/4] The Format String should be either parenthesized or not.
 [2019-03-28]  GNU/PGI extension: Parse an L data-edit-desctiptor without a following 'w'.  (done)
        Note:  PGI Fortran allows in addition an I data-edit-desctiptor without a 'w'.       
               $ cat f88d2arps.f90 && fcheck f88d2arps.f90  2>&1 | tail -n 1
               1     FORMAT   (/,1x,a,L,a,/,10x,a,/)
               2     PRINT   '(/,1x,a,L,a,/,10x,a,/)'
               3     FORMAT   (a,i,/a)
               4     PRINT   '(a,i,/a)'
               5     END

               Parsed with Errors: f88d2arps.f90
        Note:  These two extensions will be implemented also in the  OMP (Legacy) Parser.  
 [2019-05-01]  Character Literal constants are not valid in Input Format Strings.           (done)           
               $ cat read-date.f90 && fcheck read-date.f90
               1    integer :: dd, mm, yyyy
               2    write (*, '(a)', advance='no') "Give a date in dd/mm/yyyy format: "
               3    read (*, '(i2, "/", i2 ,"/", i4)' ) dd, mm, yyyy
               4    end 
         Note: The command fcheck should just print two warnings, ie:               
               read-date.f90:3: warning: Unexpected "/" in input Format String.
               read-date.f90:3: warning: Unexpected "/" in input Format String.
 [2020-03-31]  GNU/DEC extension: Parse an F/G data-edit-desctiptor without a 'w[.d]'.      (done)
 [2020-03-31]  GNU/DEC extension: Allow the last format item to be blank (after  ',').      (done)


Free Form Preprocessor
----------------------
[ 2018-07-01 ] Bug: The preprocessor was accepting a line comment after a '&' in a character context.(done)
[ 2018-07-03 ] Add semantic actions to strip out statement continuation patters from quoted literals.(done)
[ 2018-07-08 ] Enhancement: Allow line comment characters up to "\uFFFD", instead of "\u00FF".       (done)
               This value changed also in the scanner including all the (double) quoted literals.
        Note:  [13/9] According to Wikipedia, the Basic Multilingual Plane (U+E000–U+F8FF) hasn't 
               assigned characters. (see https://en.wikipedia.org/wiki/Private_Use_Areas).
[ 2018-10-20 ] Add warning: Continuation line in character context without a '&'.
[ 2019-04-03 ] We don't tokenise unterminated character literals (as expected).                      (done)
[ 2019-04-05 ] We don't accept statement continuation patterns in character literal constants        (done)
               before the (double) quoted part, ie inside the "kind-param". 
[ 2019-04-05 ] We don't accept statement continuation patterns in BOZ literal constants before       (done) 
               the (double) quoted part (after a 'B', 'O', 'Z' or the extension 'X'). 
[ 2019-06-04 ] The following program is rejected (PGI/GNU Fortran accept it).                    (rejected)
         Note: If a token is split between two lines, a '&' isn't optional in the continuation line.
               $ cat goto_3.f90 && fcheck goto_3.f90  2>&1 | tail -n 1
               1     goto&
                     3
               3     print *, "hello"
               4     end

               Parsed with Errors: goto_3.f90
         Note: [19/6] We cannot easily accept the omitted but required space in this case. Yet, we
               will implement a more general solution. See the option "-ffreer-form" in Main Program.
         Note: [23/6] To support the new option "-ffreer-form" we define the BNF Rule <white space>
               along with a sem. action that returns it as a tab when spaces are important or skips
               it otherwise. So, we can't treat such spaces as optional/unimportant in the Simulator.
[ 2019-10-11 ] Unexpected statement continuation pattern between double quotes:                        (done)  
               $  cat ds_continuation.f90
               !  char.literal.constant "Fixed"number!"
               character, parameter :: ch="Fixed"&
               &"number!";

               end
[ 2020-06-08 ] The following subroutine is parsed in the Simulator                                     (todo)
               $  cat sub-array.f90 && fcheck sub-array.f90 2>&1 | head -n 1
                  subroutine array
                    integer :: n( Z'3' ) = [Z'1', Z'2', Z'3', Z'4', Z'5', Z'6', Z'7', &
                     &  Z'8', Z'9', Z'a', Z'b', Z'c', Z'd', Z'e', Z'f']
                     integer i
                     print *, "  18. n(1:2)=", n(1:2)
                     do i = Z'1', Z'e'
                        if (i /= n(i) ) stop 18
                     end do
                  end subroutine

               sub-array.f90:3: error: syntax:Unterminated literal constant (quote required).           
         Note: [11/6] Some HEX Constants contain lower case letters (case handling has changed).       (todo)
         Note: [11/6] The "do i" wouldn't be classified properly in fixed form (scanner issue).        (todo)
         Note: [12/6] My classification rules don't expect BOZ Constants by the preprocessor. So,      (todo)
                      I've to add them to some scanner rules ch/lch/...
         Note: [14/6] The scanner can't return SMAs for BOZ Constants returned by the preprocessor.
                      Which can be a problem (ie to format strings?).


Hand coded File Reader
----------------------
[ 2018-06-26 ] Bug (free form): The hand coded file reader was returning Hollerith constants within
               names (ie real x1h ;). (done)  
[ 2018-06-27 ] Bug: The legacy parser hangs in Linux due to a '”' ie in the comments of "fsl2snd.f90". (done)
               This happened because the File Reader wasn't handling properly UTF-8 files. The locale 
               passed to "wifstream.imbue(locale)" requires different arguments in Win,Mac, and Linux.
        note:  To run the command "fcheck /debug x.f90" in Windows (8.1), I've to start it in a Blue,
               Pinned PowerShell Console, else some Unicode chars (ie a '–') aren't rendered properly.
               [05/09] In RedHat 9 also, I pass a custom UTF-8 converter ("codecvt") to the locale.
        note:  [16/04] This UTF-8 converter is used in Windows, when "fcheck" is built in Cygwin.
        note:  [06/07] Also in macOS. The Error Stream (wcerr) also requires such a locale as well.    (done)
[ 2018-07-07 ] Feature: The hand coded file reader cannot invoke a C preprocessor which is sometimes
               required by Fortran programs, ie by the program "wrf-phdf5support.F90".

The Following four new features/bug-fixes have not been tested very well yet:
 
[ 2018-07-18 ] GNU/Ora/PGI Extension (fixed form): Support the FORTRAN 77 Tab-Format. Read more at: (done)
               https://docs.oracle.com/cd/E19957-01/805-4939/z40007331ff1/index.html
               (see ie source file src/skewt/indices.f:701)
               As GNU Fortran does, fixed form continuation lines with a '&' in column 1 are rejected,
               and longer lines are truncated as usual (g77 doesn't truncate tabbed lines).                
[ 2018-07-18 ] Bug (fixed form): Mid-line comments in continued lines aren't handled properly.   (done)
               (see ie source file src/skewt/indices.f:281)             
[ 2018-07-22 ] GNU/PGI Extension: Space padding in fixed form lines up to 72 columns.     (done)
[ 2018-08-27 ] This reader now converts line endings to CR-LF's & the scanners have been adjusted. (done)
[ 2018-09-04 ] In windows 8.1, the filename "GEMINC:GEMPRM.PRM" used in the ARPS project is rejected
               and likely this isn't an error of the hand coded file reader (yet the line was wrong): (done)
               src\ext2arps\getgempak3d.f90:93: error: semantic:Cannot include file GEMINC:GEMPRM.PRM
        note:  [16/04] The error isn't caught when "fcheck" is built in Cygwin.
[ 2018-09-07 ] Hollerith Constants that exceed a free form continued line aren't parsed properly.    (done)
        Note:  [30/3] While not fixed, do issue a nice error message if we face such a constant.     (done)
        Note:  [12/4] In free form, the length and the 'H' prefix are expected on the same line.
[ 2019-04-03 ] Seg. fault if the input file doesn't exist (uninitialised pointer).                   (done)
[ 2019-04-06 ] The following program is valid (we don't examine the flag continuation).              (done) 
               $ cat not-a-hollerith.f90 && fcheck not-a-hollerith.f90 2>&1 | tail -n 1
               1     v&
                     1h1 = 4
               3     print *, v1h1
               4     end
 
               Parsed with Errors: not-a-hollerith.f90
         Note: [28/5] The above program isn't standard conforming, but acceptable by some compilers.
               If a token is split between two lines, a '&' isn't optional in the continuation line.
[2019-05-11]   Skip Fortran Include Directives that aren't well formed and let the parser read them.  (done)
[2019-05-13]   In fixed form, issue a warning if an INCLUDE directive begins in columns 1-6.          (done)
[2019-06-15]   The program below is rejected because we check digit > '0', instead of digit >= '0'.   (done)
               $ cat r2_acqc.f && fcheck r2_acqc.f
               CHARACTER*40  HEADR,OBLVL,FCLVL
               CHARACTER*40  HEADR
               END
[2019-07-31]   A UTF-8 BOM header, if present, isn't consumed (on Linux, MacOS, and Cygwin).          (done) 
[2019-08-22]   The file reader doesn't skip '#elif' directives but the error message says it does.    (done)
[2019-10-13]   The tab character after the label 150 (col 6) is treated as a continuation pattern.    (done)
               $ cat ds_pythia.f && fcheck ds_pythia.f 2>&1 | tail -n 1
                         DO 150 J=1,12
                           IF(CHTEMP.EQ.CHCDE(J)) MINT(140+I)=KCDE(J)
                 150	    CONTINUE
                         END


               Parsed with Errors: ds_pythia.f
[2019-10-13]   As it seems, it's the first time we find empty lines inside a Fixed Form statement.    (done)
               $ cat ds_tauola.f && fcheck ds_tauola.f 2>&1 | tail -n 1
                     double precision            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU
                    *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1


                    *                 ,AMK,AMKZ,AMKST,GAMKST
                     end

               Parsed with Errors: ds_tauola.f



Format String Reader
--------------------
[ 2019-03-26 ] The existing Reader, likely, isn't aware of Hollerith constants:                       (done)
               $ cat fm111.f && fcheck fm111.f
               100     format( /11X, 10HCOMPUTED: ,4(2X, I3)  )JUNK
               270     print '(/11X, 10HCOMPUTED: ,4(2X, I3)  )JUNK'
                       end
               fm111.f:1: error: syntax:Unexpected name with value 'JUNK'. Expected: ";". 
               fm111.f:2: error: syntax:Unexpected: 'H'. Format string error, expected :"$", "(", "/",  
                                "A", "DT", "P", "Q", "X", "\", "fmt dt & char-literal-constant",
                                "fmt{E,EN,ES,G}w . d E e", "fmt{E}w . d{D|Q}e", "fmt{F,E,EN,ES,G,D}w.d",
                                "fmt{G}w", "fmt{I,B,O,Z,F,E,EN,ES,G,D}w . d", "fmt{I,B,O,Z,G,L,A}w",
                                "fmt{I,B,O,Z}w . d", or "fmt{Q}w . d". 

               Parsed with Errors: fm111.f
        Note:  [30/3] GNU/PGI extension: in Format Strings, turn this error message into a warning.



 Main Program
--------------
[2019-03-30] The "-cpp" option isn't acceptable as a program argument.                              (done)
       Note: Still, C preprocessing won't be fully functional though.
[2019-06-23] We've added the command line option "-ffreer-form" that treats spaces in free form     (done)
             programs as optional and unimportant (as treated in fixed form programs). The option 
             may be used when this tool has to parse various extensions supported by existing
             compilers that we can't identify and implement individually (see ie 2019-06-04).
[2020-03-31] Few changes from the AppleSoft project become permanent in the parsing engine and      (done) 
             in main we set reader->toUpper(). To avoid few memory leaks, the SimpleParsingTable
             of the Parser (spt2) is constructed only once, whereas the prescanner/lexer/parser
             are deleted in each iteration (it does matter for multiple sources: "fcheck *.f90").

             

 Translator (sem. actions)
--------------------------
[ 2019-10-12 ] The command fcheck, not the Simulator, fails to parse this fragment:                 (done)
               $ cat ds_hep_events.f90 && fcheck ds_hep_events.f90
                     call hepevt_set_event_parameters &
                          (function_value = event%get_sqme_prc ())
                 end

               ds_hep_events.f90:2: error: syntax:Expected: "%", "(", "(/", ")", "*", ".NOT.",
               ":", "::", "[", "constant", "name", or "user-defined-operator". 

               Parsed with Errors: ds_hep_events.f90
        Note:  [12/10] It's likely a typo in function: sma_a_b_else_c(int t1,int t2, int rc)
               that returns false on "function_value" instead of the 3d argument (a name-l).



 Simulator
-------------
[ 2019-10-12 ] The Simulator fails to parse the following three lines. After '(', the               (done)   
               returned token isn't </)> and then narrowed by SMA to '/', as expected.
               1 module lorentz
               2     public :: operator(*), operator(/)
               3 end module lorentz
        Note:  [2019-10-14] The Simulator wasn't returning all the alternative tokens on SMA
               as the relevant functionality hasn't been fully adjusted as in the C++ engine.
               Sometime, this has to be done with a grammar smaller than Fortran for testing.  (suspended) 



     Some legacy code examples have been found at: 
[*1] http://fortranwiki.org/fortran/show/Modernizing+Old+Fortran
[*2] https://docs.oracle.com/cd/E19957-01/805-4939/6j4m0vncp/index.html
[*3] http://h41379.www4.hpe.com/doc/82final/6324/6324pro_048.html

     The first large test suite (fcvs21) successfully passed by this Fortran parser can be found at:
[*4] https://www.itl.nist.gov/div897/ctg/fortran_form.htm

     The Legacy Parser can parse the source code of the ARPS Model System (5.3.4) except those files 
     that require C preprocessing (18 *.F and 1 *.F90). The ARPS Model System can be found at:
[*5] http://www.caps.ou.edu/ARPS/arpsdown.html

     The Legacy Parser can parse the source code of LAPACK (3.8.0) except those files that require 
     C preprocessing (5 *.F). The source code of LAPACK can be found at:
[*6] http://www.netlib.org/lapack/    

     The OMP (Legacy) Parser can parse the Fortran examples found in file "openmp-examples-4.5.0.pdf"
     (SHA1 b49451455b32dd6f1b31450d774476d4d1f74708), except the "standalone.1.f90" program which is
     supposed to be rejected by an OpenMP compliant implementation. This document can be found at:
[*7] https://www.openmp.org/wp-content/uploads/openmp-examples-4.5.0.pdf

     The OMP (Legacy) Parser can parse the source code of Whizard (2.8.1) except those files that
     require C preprocessing (2 *.F). In specific, it can parse 87 *.f and 524 *.f90 which are 
     available prior to the configuration step. The source code of Whizard (2.8.1) can be found at:
[*8] https://whizard.hepforge.org/downloads/?f=whizard-2.8.1.tar.gz

