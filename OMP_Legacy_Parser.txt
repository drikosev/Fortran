#disambiguate <dec-format>
#disambiguate <expr>
#disambiguate <part-name-p-section-subscript-list-l>
#disambiguate <unexpected-end-stmt>

#reductions FUNCTION
#reductions SUBROUTINE

#sma <(/>
#sma </)>
#sma <concat-op>
#sma <defined-binary-op>
#sma <defined-unary-op>
#sma <omp-compound>
#sma OMP-END-ATOMIC
#sma OMP-END-DO
#sma OMP-END-PARALLEL-DO
#sma OMP-END-TASKLOOP
#sma TYPE_DEC_LOOKAHEAD

<grm> ::= 
           <program> 

<program> ::= 
           <program-units> 
     |     <;> <program-units> 

<program-units> ::= 
           <program-units> <program-unit> 
     |     <program-unit> 

<program-unit> ::= 
           <main-program> 
     |     <external-subprogram> 
     |     <module> 
     |     <submodule> 
     |     <block-data> 
     |     <out-of-unit-directive> 

<main-program> ::= 
           <end-program-stmt;> 
     |     <internal-subprogram-part> <end-program-stmt;> 
     |     <stmts> <end-program-stmt;> 
     |     <stmts> <internal-subprogram-part> <end-program-stmt;> 
     |     <program-stmt;> <end-program-stmt;> 
     |     <program-stmt;> <internal-subprogram-part> <end-program-stmt;> 
     |     <program-stmt;> <stmts> <end-program-stmt;> 
     |     <program-stmt;> <stmts> <internal-subprogram-part> <end-program-stmt;> 

<end-program-stmt;> ::= 
           <end-program-stmt> <;> 
     |     <end-program-stmt> +: EOF 

<end-program-stmt> ::= 
           end-program-stmt 
     |     <label> end-program-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-program-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-program-stmt",1,true);*/

end-program-stmt ::= 
           END   /* Tr.onEndProgram($$(0),NULL); */
     |     END PROGRAM +: { <;> | EOF }   /* Tr.onEndProgram($$(0),NULL); */
     |     END_PROGRAM +: { <;> | EOF }   /* Tr.onEndProgram($$(0),NULL); */
     |     END PROGRAM <program_name> +: { <;> | EOF }   /* Tr.onEndProgram($$(0),str(3)); */
     |     END_PROGRAM <program_name> +: { <;> | EOF }   /* Tr.onEndProgram($$(0),str(2)); */

<program_name> ::= 
           <name> 

<name> ::= 
           <name-l> 
     |     <name-r> 

<unexpected-end-stmt> ::~ 
           <missing-end-statement>   /* Tr.Unexpected(L"contains-stmt",21,false);*/
     |     END <name> +: { <;> }   /* Tr.Unexpected(L"name with value '%s'.",str(2),1001,false);*/
     |     END <name> <name> +: { <;> }   /* Tr.Unexpected(L"name with value '%s'.",str(2),1001,false);*/
     |     END +: { <;> | EOF }   /* Tr.Unexpected($$(1),true,L"end-unit-stmt",L"");*/
     |     END unit +: { <;> | EOF }   /* Tr.Unexpected($$(1),$$(2),true,L"end-'%s'-stmt",str(2)); */
     |     END unit <name> +: { <;> | EOF }   /* Tr.Unexpected($$(1),$$(2),true,L"end-'%s'-stmt",str(2)); */
     |     end-unit +: { <;> | EOF }   /* Tr.Unexpected($$(1),true,L"end-'%s'-stmt",str(1)+3); */
     |     end-unit <name> +: { <;> | EOF }   /* Tr.Unexpected($$(1),true,L"end-'%s'-stmt",str(1)+3); */
     |     END construct-key +: { <;> | EOF }   /* Tr.Unexpected($$(1),false,L"end-'%s'-stmt",str(2)); */
     |     END construct-key <name> +: { <;> | EOF }   /* Tr.Unexpected($$(1),false,L"end-'%s'-stmt",str(2)); */
     |     end-construct +: { <;> | EOF }   /* Tr.Unexpected($$(1),false,L"end-'%s'-stmt",str(1)+3); */
     |     end-construct <name> +: { <;> | EOF }   /* Tr.Unexpected($$(1),false,L"end-'%s'-stmt",str(1)+3); */
     |     END <erroneous-stmt>   /* Tr.Unexpected(L"",1004,false); */
     |     end-construct <erroneous-stmt>   /* Tr.Unexpected(L"",1005,false); */
     |     end-unit <erroneous-stmt>   /* Tr.Unexpected(L"",1006,false); */
     |     OMP-2 omp-end-construct +: { <;> | EOF }   /* Tr.Unexpected($$(1),true,L"omp-end-'%s'-stmt",str(2)+3); */
     |     OMP-2 END omp-construct-key +: { <;> | EOF }   /* Tr.Unexpected($$(1),false,L"omp-end-'%s'-stmt",str(3)); */
     |     OMP-2 END <erroneous-stmt>   /* Tr.Unexpected(L"",1003,false); */
     |     OMP-2 omp-end-construct <erroneous-stmt>   /* Tr.Unexpected(L"",1007,false); */
     |     OMP-2 END omp-construct-key <erroneous-stmt>   /* Tr.Unexpected(L"",1007,false); */

<missing-end-statement> ::~ 
           CONTAINS-2 +: { <;> } 

unit ::~ 
           FUNCTION 
     |     MODULE 
     |     PROCEDURE 
     |     PROGRAM 
     |     SUBMODULE 
     |     SUBROUTINE 

end-unit ::~ 
           END_FUNCTION 
     |     END_MODULE 
     |     END_PROCEDURE 
     |     END_PROGRAM 
     |     END_SUBMODULE 
     |     END_SUBROUTINE 

construct-key ::~ 
           ASSOCIATE 
     |     BLOCK 
     |     CRITICAL 
     |     DO 
     |     ENUM 
     |     FORALL 
     |     IF 
     |     INTERFACE 
     |     MAP 
     |     METADIRECTIVE 
     |     SELECT 
     |     TEAM 
     |     TYPE 
     |     STRUCTURE 
     |     UNION 
     |     WHERE 

end-construct ::~ 
           END_ASSOCIATE 
     |     END_BLOCK 
     |     END_CRITICAL 
     |     END_DO 
     |     END_ENUM 
     |     END_FORALL 
     |     END_IF 
     |     END_INTERFACE 
     |     END_MAP 
     |     END_SELECT 
     |     END_TEAM 
     |     END_TYPE 
     |     END_STRUCTURE 
     |     END_UNION 
     |     END_WHERE 

<erroneous-stmt> ::~ 
           ERROR <rest-line> 

<rest-line> ::= 
           NONE +: { <;> } 

omp-end-construct ::~ 
           END_CRITICAL 

omp-construct-key ::~ 
           ATOMIC 
     |     MASKED 
     |     MASTER 
     |     METADIRECTIVE 
     |     ORDERED 
     |     PARALLEL 
     |     PARALLEL MASKED   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     PARALLEL MASTER   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     PARALLEL SECTIONS   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     PARALLEL WORKSHARE   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     SINGLE 
     |     TARGET 
     |     TARGET DATA   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     TARGET PARALLEL   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     TARGET TEAMS   /* synthesize(1); syncat(L"-"); syncat(str(2)); */
     |     TASK 
     |     TASKGROUP 
     |     TEAMS 
     |     WORKSHARE 

<internal-subprogram-part> ::= 
           <internal-subprograms> 

<internal-subprograms> ::= 
           <internal-subprograms> <internal-subprogram> 
     |     <contains-stmt> 

<internal-subprogram> ::= 
           <function-subprogram> 
     |     <subroutine-subprogram> 
     |     <erroneous-stmt> <;> 

<function-subprogram> ::= 
           <function-stmt> <end-function-stmt;> 
     |     <function-stmt> <internal-subprogram-part> <end-function-stmt;> 
     |     <function-stmt> <stmts> <end-function-stmt;> 
     |     <function-stmt> <stmts> <internal-subprogram-part> <end-function-stmt;> 
     |     <label> <function-stmt> <end-function-stmt;> 
     |     <label> <function-stmt> <internal-subprogram-part> <end-function-stmt;> 
     |     <label> <function-stmt> <stmts> <end-function-stmt;> 
     |     <label> <function-stmt> <stmts> <internal-subprogram-part> <end-function-stmt;> 

<function-stmt> ::= 
           <function-stmt;> 

<function-stmt;> ::= 
           function-stmt <;> 
     |     function-stmt +: EOF 

function-stmt ::= 
           FUNCTION <name> <(> <)>   /* Tr.onFunction($$all,0,2,0,0); */
     |     FUNCTION <name> <(> <)> <sufix>   /* Tr.onFunction($$all,0,2,0,5); */
     |     FUNCTION <name> <(> <name-list> <)>   /* Tr.onFunction($$all,0,2,4,0); */
     |     FUNCTION <name> <(> <name-list> <)> <sufix>   /* Tr.onFunction($$all,0,2,4,6); */
     |     <prefix> FUNCTION <name> <(> <)>   /* Tr.onFunction($$all,1,3,0,0); */
     |     <prefix> FUNCTION <name> <(> <)> <sufix>   /* Tr.onFunction($$all,1,3,0,6); */
     |     <prefix> FUNCTION <name> <(> <name-list> <)>   /* Tr.onFunction($$all,1,3,5,0); */
     |     <prefix> FUNCTION <name> <(> <name-list> <)> <sufix>   /* Tr.onFunction($$all,1,3,5,7); */
     |     FUNCTION <erroneous-stmt> 

<(> ::= 
           ( 
     |     <no (> 

<no (> ::~ 
           NONE -: { ( | <;> | ) } 

<)> ::= 
           ) 
     |     <no )> 

<no )> ::~ 
           NONE -: { ) | <name> } 

<sufix> ::= 
           <language-binding-spec> 
     |     <language-binding-spec> RESULT <(> <name> <)> 
     |     RESULT <(> <name> <)> 
     |     RESULT <(> <name> <)> <language-binding-spec> 

<language-binding-spec> ::= 
           BIND <p-C> 
     |     BIND <p-c , name = expr> 

<p-C> ::= 
           <(> C <)> 

<p-c , name = expr> ::= 
           <(> C <,> <name = expr> <)> 

<,> ::= 
           , 

<name = expr> ::= 
           NAME = <default-char-expr> 

<default-char-expr> ::= 
           <expr> 

<expr> ::= 
           <expr> <defined-binary-op> <expr> 
     |     <expr> <equiv-op> <expr> 
     |     <expr> <or-op> <expr> 
     |     <expr> <and-op> <expr> 
     |     <not-op> <expr> 
     |     <expr> <rel-op> <expr> ~: <rel-op> 
     |     <expr> <concat-op> <expr> 
     |     <expr> <add-op> <expr> 
     |     <expr> <mult-op> <expr> 
     |     <expr> <power-op> <expr> -: { <power-op> } 
     |     <unary-op> <expr> -: { <power-op> | <mult-op> } 
     |     <primary> 
     |     <defined-unary-op> <primary> 

<or-op> ::= 
           <.OR.> 

<and-op> ::= 
           <.AND.> 

<not-op> ::= 
           <.NOT.> 

<power-op> ::= 
           <**> 

<unary-op> ::= 
           <sign> 

<primary> ::= 
           <constant> 
     |     <real-literal-constant> 
     |     <fdec-real-literal> 
     |     <designator> 
     |     <array-constructor> 
     |     <structure-constructor> 
     |     <p-expr> 
     |     <p-complex-literal-pair> 

<constant> ::= 
           <int-literal-constant> 
     |     <logical-literal-constant> 
     |     <char-literal-constant> 
     |     <boz-literal-constant> 
     |     <boz-literal-postfix> 

<designator> ::= 
           <data-ref> 
     |     <vms-location> 

<data-ref> ::= 
           <part-ref> <%> <data-ref> -: { <%> } 
     |     <part-ref> <.> <data-ref> -: { <.> } 
     |     <part-ref> 

<part-ref> ::= 
           <part-name> 
     |     <part-name> <image-selector> -: { ( } 
     |     <part-name> <image-selector> <p-substring-range> 
     |     <part-name-p-section-subscript-list> 
     |     <part-name-p-section-subscript-list> <p-substring-range> 
     |     <part-name-p-section-subscript-list> <image-selector> -: { ( } 
     |     <part-name-p-section-subscript-list> <image-selector> <p-substring-range> 

<part-name> ::= 
           <name> 

<image-selector> ::= 
           <lbracket> <cosubscript-list> <rbracket> 
     |     <lbracket> <cosubscript-list> , <image-selector-spec-list> <rbracket> 

<cosubscript-list> ::= 
           <cosubscript-list> <,> <cosubscript> 
     |     <cosubscript> 

<cosubscript> ::= 
           <scalar-int-expr> 
     |     <scalar-int-expr> : <scalar-int-expr> 

<scalar-int-expr> ::= 
           <expr> 

<image-selector-spec-list> ::= 
           <image-selector-spec-list> , <image-selector-spec> 
     |     <image-selector-spec> 

<image-selector-spec> ::= 
           STAT = <stat-variable> 
     |     TEAM = <team-value> 
     |     TEAM_NUMBER = <scalar-int-expr> 

<stat-variable> ::= 
           <scalar-int-variable> 

<scalar-int-variable> ::= 
           <expr> 

<team-value> ::= 
           <expr> 

<p-substring-range> ::= 
           ( <substring-range> ) 

<substring-range> ::= 
           : 
     |     : <scalar-int-expr> 
     |     <scalar-int-expr> : 
     |     <scalar-int-expr> : <scalar-int-expr> 

<part-name-p-section-subscript-list> ::= 
           <part-name> <p-section-subscript-list> 
     |     <procedure-name> <p-actual-arg-spec-list> -: { ( | <lbracket> } 
     |     <procedure-name> ( ) -: { ( | <%> | <lbracket> } 

<p-section-subscript-list> ::= 
           ( <section-subscript-list> ) 

<section-subscript-list> ::= 
           <section-subscript-list> <,> <section-subscript> 
     |     <section-subscript-list> <,> <::> <stride> 
     |     <section-subscript> 
     |     <::> <stride> 

<section-subscript> ::= 
           <subscript> 
     |     <subscript-triplet> 

<subscript> ::= 
           <scalar-int-expr> 

<subscript-triplet> ::= 
           : 
     |     : <subscript> 
     |     : <subscript> : <stride> 
     |     <subscript> : 
     |     <subscript> <::> <stride> 
     |     <subscript> : <subscript> 
     |     <subscript> : <subscript> : <stride> 

<stride> ::= 
           <scalar-int-expr> 

<procedure-name> ::= 
           <name> 

<p-actual-arg-spec-list> ::= 
           ( <actual-arg-spec-list> ) 
     |     ( <actual-arg-spec-list> <,> <named-arg-spec-list> ) 
     |     ( <named-arg-spec-list> ) 

<actual-arg-spec-list> ::= 
           <actual-arg-spec-list> <,> <actual-arg-spec> 
     |     <actual-arg-spec-list> <,> +: { <,> | ) }   /* Tr.warning(L"Omitted argument is a non portable legacy extension.");*/
     |     <actual-arg-spec> 

<actual-arg-spec> ::= 
           <actual-arg> 

<actual-arg> ::= 
           <expr> 
     |     <alt-return-spec> 
     |     * 
     |     <vms-argument> 

<alt-return-spec> ::= 
           * <LABEL> 

<LABEL> ::= 
           <label> 
     |     <label-do> 

<vms-argument> ::= 
           <%> VAL <p-actual-arg-spec-list>   /* Tr.warning(L"Argument passing with function '%VAL' is a legacy extension."); */
     |     <%> REF <p-actual-arg-spec-list>   /* Tr.warning(L"Argument passing with function '%REF' is a legacy extension."); */

<%> ::= 
           % 

<named-arg-spec-list> ::= 
           <named-arg-spec-list> <,> <named-arg-spec> 
     |     <named-arg-spec> 

<named-arg-spec> ::= 
           keyword = <actual-arg> 

keyword ::= 
           <name> 

<.> ::= 
           . 

<vms-location> ::= 
           <%> LOC <p-actual-arg-spec-list> -: { = }   /* Tr.warning(L"Intrinsic function '%LOC' is a legacy extension."); */

<array-constructor> ::= 
           <array--constructor> 
     |     <array-constructor-bracketed> -: { ( } 

<array--constructor> ::= 
           <(/> <ac-spec> </)> 

<ac-spec> ::= 
           <ac-value-list> 
     |     <type-spec> <::> 
     |     <type-spec> <::> <ac-value-list> 
     |     <ac-value-list> <,> 
     |     <type-spec> <::> <ac-value-list> <,> 

<ac-value-list> ::= 
           <ac-value-list> <,> <ac-value> 
     |     <ac-value> 

<ac-value> ::= 
           <expr> 
     |     <ac-implied-do> 

<ac-implied-do> ::= 
           ( <ac-implied-do-list> , <ac-implied-do-cntrl> ) 

<ac-implied-do-list> ::= 
           <ac-implied-do-list> <,> <ac-implied-do-object> 
     |     <ac-implied-do-object> 

<ac-implied-do-object> ::= 
           <expr> 
     |     <ac-implied-do> 

<ac-implied-do-cntrl> ::= 
           <key = expr> <,> <expr> 
     |     <key = expr> <,> <expr> <,> <expr> 

<key = expr> ::= 
           <name> = <expr> 

<type-spec> ::= 
           <intrinsic-type-spec> 
     |     <derived-type-spec> 

<intrinsic-type-spec> ::= 
           BYTE 
     |     BYTE <p-expr> 
     |     BYTE <p-kind-set-expr> 
     |     INTEGER 
     |     INTEGER <p-expr> 
     |     INTEGER <p-kind-set-expr> 
     |     REAL 
     |     REAL <p-expr> 
     |     REAL <p-kind-set-expr> 
     |     DOUBLE PRECISION 
     |     DOUBLE_PRECISION 
     |     COMPLEX 
     |     COMPLEX <p-expr> 
     |     COMPLEX <p-kind-set-expr> 
     |     DOUBLE COMPLEX 
     |     DOUBLE_COMPLEX 
     |     CHARACTER 
     |     CHARACTER <p-type-param-value> 
     |     CHARACTER <p-len-type-param-value> 
     |     <character*length> 
     |     CHARACTER <p-kind-set-expr> 
     |     CHARACTER <p-char-selector-pair> 
     |     LOGICAL 
     |     LOGICAL <p-expr> 
     |     LOGICAL <p-kind-set-expr> 

<p-expr> ::= 
           ( <expr> ) 

<p-kind-set-expr> ::= 
           ( <kind-set-expr> ) 

<kind-set-expr> ::= 
           KIND = <scalar-int-constant-expr> 

<scalar-int-constant-expr> ::= 
           <expr> 

<p-type-param-value> ::= 
           ( <type-param-value> ) 

<type-param-value> ::= 
           <scalar-int-expr> 
     |     * 
     |     : 

<p-len-type-param-value> ::= 
           ( <len-type-param-value> ) 

<len-type-param-value> ::= 
           LEN = <type-param-value> 

<character*length> ::= 
           CHARACTER * <char-length> 
     |     REAL * <char-length> 
     |     BYTE * <char-length> 
     |     INTEGER * <char-length> 
     |     LOGICAL * <char-length> 
     |     DOUBLE PRECISION * <char-length> 
     |     DOUBLE_PRECISION * <char-length> 
     |     COMPLEX * <char-length> 

<char-length> ::= 
           ( <type-param-value> ) 
     |     <int-literal-constant> 

<p-char-selector-pair> ::= 
           ( <char-selector-pair> ) -: { ( } 
     |     ( <type-param-value> <,> <kind-set-expr> ) -: { ( } 

<char-selector-pair> ::= 
           <type-param-value> <,> <scalar-int-constant-expr> 
     |     <kind-set-expr> <,> <len-type-param-value> 
     |     <len-type-param-value> <,> <kind-set-expr> 

<derived-type-spec> ::= 
           <type-name> 
     |     <type-name> <p-type-param-spec-list> 

<type-name> ::= 
           <name> 

<p-type-param-spec-list> ::= 
           ( <type-param-spec-list> ) 
     |     ( <type-param-spec-list> <,> <type-param-spec-named-list> ) 
     |     ( <type-param-spec-named-list> ) 

<type-param-spec-list> ::= 
           <type-param-spec-list> <,> <type-param-spec> 
     |     <type-param-spec> 

<type-param-spec> ::= 
           <type-param-value> 

<type-param-spec-named-list> ::= 
           <type-param-spec-named-list> <,> <type-param-named-spec> 
     |     <type-param-named-spec> 

<type-param-named-spec> ::= 
           <keyword> = <type-param-value> 

<keyword> ::= 
           <name> 

<array-constructor-bracketed> ::= 
           <lbracket-rule> <ac-spec> <rbracket> 

<lbracket-rule> ::= 
           <lbracket> 

<structure-constructor> ::= 
           <derived-type-spec> ( ) 
     |     <derived-type-spec> <p-component-spec-list> 

<p-component-spec-list> ::= 
           ( <component-spec-list> ) 
     |     ( <component-spec-list> <,> <component-spec-named-list> ) 
     |     ( <component-spec-named-list> ) 

<component-spec-list> ::= 
           <component-spec-list> <,> <component-spec> 
     |     <component-spec> 

<component-spec> ::= 
           <component-data-source> 

<component-data-source> ::= 
           <expr> 
     |     <data-target> 
     |     <proc-target> 

<data-target> ::= 
           <variable> 

<variable> ::= 
           <designator> 
     |     <expr> 

<proc-target> ::= 
           <data-ref> 

<component-spec-named-list> ::= 
           <component-spec-named-list> <,> <component-named-spec> 
     |     <component-named-spec> 

<component-named-spec> ::= 
           <keyword> = <component-data-source> 

<p-complex-literal-pair> ::= 
           ( <complex-literal-pair> ) 

<complex-literal-pair> ::= 
           <real-part> <,> <imag-part> 

<real-part> ::= 
           <imag-part> 

<imag-part> ::= 
           <signed-int-literal-constant> 
     |     <signed-real-literal-constant> 
     |     <named-constant> 

<signed-int-literal-constant> ::= 
           <int-literal-constant> 
     |     <sign> <int-literal-constant> 

<signed-real-literal-constant> ::= 
           <real-literal-constant> 
     |     <sign> <real-literal-constant> 

<named-constant> ::= 
           <name> 

<name-list> ::= 
           <name-list> <comma> <name> 
     |     <name> 

<comma> ::= 
           , 
     |     <no , or )> 

<no , or )> ::~ 
           NONE -: { , | ) | BIND | RESULT } 

<prefix> ::= 
           <prefix1> 
     |     <prefix2> 

<prefix1> ::= 
           <prefix1> <prefix-no-type> 
     |     <declaration-type-spec> 
     |     <record-type-spec> 

<prefix-no-type> ::= 
           ELEMENTAL 
     |     IMPURE 
     |     MODULE 
     |     PURE 
     |     RECURSIVE 
     |     NON RECURSIVE 
     |     NON_RECURSIVE 

<declaration-type-spec> ::= 
           <intrinsic-type-spec> 
     |     TYPE <p-intrinsic-type-spec> 
     |     TYPE <p-derived-type-spec> 
     |     CLASS <p-derived-type-spec> 
     |     CLASS <p-star> 
     |     TYPE <p-star> 

<p-intrinsic-type-spec> ::= 
           ( <intrinsic-type-spec> ) 

<p-derived-type-spec> ::= 
           ( <derived-type-spec> ) 

<p-star> ::= 
           ( * ) 

<record-type-spec> ::= 
           RECORD / <type-name> / 

<prefix2> ::= 
           <prefix2> <prefix-no-type> 
     |     <prefix2> <declaration-type-spec> -: { <type-key> } 
     |     <prefix2> <record-type-spec> -: { <type-key> } 
     |     <prefix-no-type> 

<end-function-stmt;> ::= 
           <end-function-stmt> <;> 
     |     <end-function-stmt> +: EOF 

<end-function-stmt> ::= 
           end-function-stmt 
     |     <label> end-function-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-function-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-function-stmt",1,true);*/

end-function-stmt ::= 
           END   /* Tr.onEndFunction($$(0),NULL); */
     |     END FUNCTION +: { <;> | EOF }   /* Tr.onEndFunction($$(0),NULL); */
     |     END FUNCTION <name> +: { <;> | EOF }   /* Tr.onEndFunction($$(0),str(3)); */
     |     END_FUNCTION +: { <;> | EOF }   /* Tr.onEndFunction($$(0),NULL); */
     |     END_FUNCTION <name> +: { <;> | EOF }   /* Tr.onEndFunction($$(0),str(2)); */

<stmts> ::= 
           <stmts> <stmt> 
     |     <stmts> <special-stmt;> 
     |     <stmts> <omp-directive> 
     |     <stmt> 
     |     <special-stmt;> 
     |     <omp-directive> 
     |     <stmts> <label> <stmt> 
     |     <label> <stmt> 

<stmt> ::= 
           <declaration-construct> 
     |     <execution-part-construct> 
     |     <implicit-part-stmt> 
     |     <import-part-stmt> 
     |     <use-part-stmt> 

<declaration-construct> ::= 
           <derived-type-def> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <enum-def> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <generic-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <interface-block> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <parameter-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <procedure-declaration-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <other-specification-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <type-declaration-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <stmt-function-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */

<derived-type-def> ::= 
           <derived-type-stmt> <end-type-stmt> 
     |     <derived-type-stmt> <type-bound-procedure-part> <end-type-stmt> 
     |     <derived-type-stmt> <component-part> <end-type-stmt> 
     |     <derived-type-stmt> <component-part> <type-bound-procedure-part> <end-type-stmt> 
     |     <derived-type-stmt> <type-param-def-stmts> <end-type-stmt> 
     |     <derived-type-stmt> <type-param-def-stmts> <type-bound-procedure-part> <end-type-stmt> 
     |     <derived-type-stmt> <type-param-def-stmts> <component-part> <end-type-stmt> 
     |     <derived-type-stmt> <type-param-def-stmts> <component-part> <type-bound-procedure-part> <end-type-stmt> 
     |     <derived-structure-def> 

<derived-type-stmt> ::= 
           TYPE <type-name> <;>   /* return Tr.onSimpleType($$(0),$$(2)); */
     |     TYPE <type-name> ( <name-list> ) <;> 
     |     TYPE <::> <type-name> <;> 
     |     TYPE <::> <type-name> ( <name-list> ) <;> 
     |     TYPE <,> <type-attr-spec-list> <::> <type-name> <;> 
     |     TYPE <,> <type-attr-spec-list> <::> <type-name> ( <name-list> ) <;> 

<type-attr-spec-list> ::= 
           <type-attr-spec-list> <,> <type-attr-spec> 
     |     <type-attr-spec> 

<type-attr-spec> ::= 
           ABSTRACT 
     |     <access-spec> 
     |     BIND <p-C> 
     |     EXTENDS ( <name> ) 

<access-spec> ::= 
           PUBLIC 
     |     PRIVATE 

<end-type-stmt> ::= 
           end-type-stmt 
     |     <label> end-type-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-type-stmt",16,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-type-stmt",16,false);*/

end-type-stmt ::= 
           END TYPE 
     |     END TYPE <type-name> 
     |     END_TYPE 
     |     END_TYPE <type-name> 

<type-bound-procedure-part> ::= 
           <contains-stmt> 
     |     <contains-stmt> <private-components-stmt> 
     |     <contains-stmt> <label> <private-components-stmt> 
     |     <type-bound-procedure-part> <type-bound-proc-binding> 
     |     <type-bound-procedure-part> <label> <type-bound-proc-binding> 

<contains-stmt> ::= 
           CONTAINS <;> 
     |     <label> CONTAINS <;> 

<private-components-stmt> ::= 
           PRIVATE <;> 

<type-bound-proc-binding> ::= 
           <type-bound-procedure-stmt;> 
     |     <type-bound-generic-stmt;> 
     |     <final-procedure-stmt;> 
     |     <erroneous-stmt> 

<type-bound-procedure-stmt;> ::= 
           <type-bound-procedure-stmt> <;> 

<type-bound-procedure-stmt> ::= 
           PROCEDURE <type-bound-proc-decl-list> 
     |     PROCEDURE <::> <type-bound-proc-decl-list> 
     |     PROCEDURE <,> <binding-attr-list> <::> <type-bound-proc-decl-list> 
     |     PROCEDURE ( <interface-name> ) <,> <binding-attr-list> <::> <binding-name-list> 
     |     PROCEDURE <erroneous-stmt> 

<type-bound-proc-decl-list> ::= 
           <type-bound-proc-decl-list> <,> <type-bound-proc-decl> 
     |     <type-bound-proc-decl> 

<type-bound-proc-decl> ::= 
           <binding-name> 
     |     <binding-name> <=rangle> <procedure-name> 

<binding-name> ::= 
           <name> 

<binding-attr-list> ::= 
           <binding-attr-list> <,> <binding-attr> 
     |     <binding-attr> 

<binding-attr> ::= 
           PASS 
     |     PASS ( <arg-name> ) 
     |     NOPASS 
     |     NON OVERRIDABLE 
     |     NON_OVERRIDABLE 
     |     DEFERRED 
     |     <access-spec> 

<arg-name> ::= 
           <name> 

<interface-name> ::= 
           <name> 

<binding-name-list> ::= 
           <name-list> 

<type-bound-generic-stmt;> ::= 
           <type-bound-generic-stmt> <;> 

<type-bound-generic-stmt> ::= 
           <GENERIC> <::> <generic-spec> <=rangle> <binding-name-list> 
     |     <GENERIC> <,> <access-spec> <::> <generic-spec> <=rangle> <binding-name-list> 
     |     <GENERIC> <erroneous-stmt> 

<generic-spec> ::= 
           <generic-name> 
     |     OPERATOR <p-defined-operator> 
     |     ASSIGNMENT <p-equal> 
     |     <defined-io-generic-spec> 

<generic-name> ::= 
           <name> 

<p-defined-operator> ::= 
           ( <defined-operator> ) 

<defined-operator> ::= 
           <defined-op> 
     |     <extended-intrinsic-op> 

<defined-op> ::= 
           <defined-binary-op> 
     |     <defined-unary-op> 

<extended-intrinsic-op> ::= 
           <intrinsic-operator> 

<intrinsic-operator> ::= 
           <power-op> 
     |     <mult-op> 
     |     <add-op> 
     |     <concat-op> 
     |     <rel-op> 
     |     <not-op> 
     |     <and-op> 
     |     <or-op> 
     |     <equiv-op> 

<p-equal> ::= 
           ( = ) 

<defined-io-generic-spec> ::= 
           READ ( FORMATTED ) 
     |     READ ( UNFORMATTED ) 
     |     WRITE ( FORMATTED ) 
     |     WRITE ( UNFORMATTED ) 

<final-procedure-stmt;> ::= 
           <final-procedure-stmt> <;> 

<final-procedure-stmt> ::= 
           FINAL <final-subroutine-name-list> 
     |     FINAL <::> <final-subroutine-name-list> 
     |     FINAL <erroneous-stmt> <;> 

<final-subroutine-name-list> ::= 
           <name-list> 

<component-part> ::= 
           <component-part> <component-def-stmt> 
     |     <component-def-stmt> 
     |     <component-part> <label> <component-def-stmt> 
     |     <label> <component-def-stmt> 
     |     <private-or-sequence> 
     |     <label> <private-or-sequence> 

<component-def-stmt> ::= 
           <data-component-def-stmt> 
     |     <proc-component-def-stmt> 
     |     <erroneous-stmt> <;> 

<data-component-def-stmt> ::= 
           <declaration-type-spec> <component-decl-list> <;> 
     |     <declaration-type-spec> <::> <component-decl-list> <;> 
     |     <declaration-type-spec> <,> <component-attr-spec-list> <::> <component-decl-list> <;> 
     |     <record-type-spec> <component-decl-list> <;> 
     |     <record-type-spec> <::> <component-decl-list> <;> 
     |     <record-type-spec> <,> <component-attr-spec-list> <::> <component-decl-list> <;> 

<component-decl-list> ::= 
           <component-decl-list> <,> <component-decl> 
     |     <component-decl> 

<component-decl> ::= 
           <name> 
     |     <name> <component-initialization> 
     |     <name> * <char-length> 
     |     <name> * <char-length> <component-initialization> 
     |     <name> <[coarray-spec]> 
     |     <name> <[coarray-spec]> <component-initialization> 
     |     <name> <[coarray-spec]> * <char-length> 
     |     <name> <[coarray-spec]> * <char-length> <component-initialization> 
     |     <name> ( <component-array-spec> ) 
     |     <name> ( <component-array-spec> ) <component-initialization> 
     |     <name> ( <component-array-spec> ) * <char-length> 
     |     <name> ( <component-array-spec> ) * <char-length> <component-initialization> 
     |     <name> ( <component-array-spec> ) <[coarray-spec]> 
     |     <name> ( <component-array-spec> ) <[coarray-spec]> <component-initialization> 
     |     <name> ( <component-array-spec> ) <[coarray-spec]> * <char-length> 
     |     <name> ( <component-array-spec> ) <[coarray-spec]> * <char-length> <component-initialization> 

<component-initialization> ::= 
           <initialization> 
     |     <initialization-obsolete> 
     |     <empty-initializer> 

<initialization> ::= 
           = <constant-expr> 
     |     <=rangle> <null-init> 
     |     <=rangle> <designator> 

<constant-expr> ::= 
           <expr> 

<null-init> ::= 
           <function-reference> 

<function-reference> ::= 
           <data-ref> 

<initialization-obsolete> ::= 
           / <data-stmt-value-list> / 

<data-stmt-value-list> ::= 
           <data-stmt-value-list> <,> <data-stmt-value> 
     |     <data-stmt-value> 

<data-stmt-value> ::= 
           <data-stmt-constant> 
     |     <data-stmt-repeat> * <data-stmt-constant> 

<data-stmt-constant> ::= 
           <constant> 
     |     <constant-subobject> 
     |     <signed-int-literal-constant> 
     |     <signed-real-literal-constant> 
     |     <null-init> 
     |     <initial-data-target> 
     |     <structure-constructor> 
     |     <p-complex-literal-pair> 

<constant-subobject> ::= 
           <designator> 

<initial-data-target> ::= 
           <designator> 

<data-stmt-repeat> ::= 
           <constant> 
     |     <constant-subobject> 

<empty-initializer> ::~ 
           / / 

<[coarray-spec]> ::= 
           <lbracket> <coarray-spec> <rbracket> 

<coarray-spec> ::= 
           <deferred-shape-spec-list> 
     |     <explicit-coshape-spec> 

<deferred-shape-spec-list> ::= 
           <deferred-shape-spec-list> <,> <deferred-shape-spec> 
     |     <deferred-shape-spec> 

<deferred-shape-spec> ::= 
           : 

<explicit-coshape-spec> ::= 
           <explicit-coshape-spec-list> 

<explicit-coshape-spec-list> ::= 
           <explicit-coshape-spec-list> <,> <explicit-shape-spec> 
     |     <explicit-shape-spec> 
     |     <explicit-coshape-spec-list> <,> <explicit-coshape-spec-item-last> -: <,> 
     |     <explicit-coshape-spec-item-last> -: <,> 

<explicit-shape-spec> ::= 
           <upper-bound> 
     |     <lower-bound> : <upper-bound> 

<upper-bound> ::= 
           <expr> 

<lower-bound> ::= 
           <expr> 

<explicit-coshape-spec-item-last> ::= 
           * 
     |     <lower-bound> : * 

<component-array-spec> ::= 
           <explicit-shape-spec-list> 
     |     <deferred-shape-spec-list> 

<explicit-shape-spec-list> ::= 
           <explicit-shape-spec-list> <,> <explicit-shape-spec> 
     |     <explicit-shape-spec> 

<component-attr-spec-list> ::= 
           <component-attr-spec-list> <,> <component-attr-spec> 
     |     <component-attr-spec> 

<component-attr-spec> ::= 
           <access-spec> 
     |     ALLOCATABLE 
     |     CODIMENSION <[coarray-spec]> 
     |     CONTIGUOUS 
     |     DIMENSION ( <component-array-spec> ) 
     |     POINTER 

<proc-component-def-stmt> ::= 
           PROCEDURE ( ) <,> <proc-component-attr-spec-list> <::> <proc-decl-list> <;> 
     |     PROCEDURE <p-proc-interface> <,> <proc-component-attr-spec-list> <::> <proc-decl-list> <;> 
     |     PROCEDURE <erroneous-stmt> 

<proc-component-attr-spec-list> ::= 
           <proc-component-attr-spec-list> <,> <proc-component-attr-spec> 
     |     <proc-component-attr-spec> 

<proc-component-attr-spec> ::= 
           POINTER 
     |     PASS 
     |     PASS ( <arg-name> ) 
     |     NOPASS 
     |     <access-spec> 

<proc-decl-list> ::= 
           <proc-decl-list> <,> <proc-decl> 
     |     <proc-decl> 

<proc-decl> ::= 
           <procedure-entity-name> 
     |     <procedure-entity-name> <=rangle> <proc-pointer-init> 

<procedure-entity-name> ::= 
           <name> 

<proc-pointer-init> ::= 
           <null-init> 
     |     <initial-proc-target> 

<initial-proc-target> ::= 
           <procedure-name> 

<p-proc-interface> ::= 
           ( <proc-interface> ) 

<proc-interface> ::= 
           <interface-name> 
     |     <declaration-type-spec> 
     |     <record> / 

<record> ::= 
           RECORD / <type-name> 

<private-or-sequence> ::= 
           <private-components-stmt> 
     |     <sequence-stmt> 

<sequence-stmt> ::= 
           SEQUENCE <;> 

<type-param-def-stmts> ::= 
           <type-param-def-stmts> <label> <type-param-def-stmt> 
     |     <label> <type-param-def-stmt> 
     |     <type-param-def-stmts> <type-param-def-stmt> 
     |     <type-param-def-stmt> 

<type-param-def-stmt> ::= 
           <integer-type> <,> <type-param-attr-spec> <::> <type-param-decl-list> <;> 
     |     <erroneous-stmt> 

<integer-type> ::= 
           BYTE 
     |     INTEGER 
     |     INTEGER <p-expr> 
     |     INTEGER <p-kind-set-expr> 

<type-param-attr-spec> ::= 
           KIND 
     |     LEN 

<type-param-decl-list> ::= 
           <type-param-decl-list> <,> <type-param-decl> 
     |     <type-param-decl> 

<type-param-decl> ::= 
           <name> 
     |     <name> = <expr> 

<derived-structure-def> ::= 
           <derived-structure-stmt> <end-structure-stmt> 
     |     <derived-structure-stmt> <component-structure-part> <end-structure-stmt> 
     |     <derived-structure-stmt> <type-param-def-stmts> <end-structure-stmt> 
     |     <derived-structure-stmt> <type-param-def-stmts> <component-structure-part> <end-structure-stmt> 

<derived-structure-stmt> ::= 
           STRUCTURE / <type-name> / <;> 
     |     STRUCTURE / <type-name> / <component-decl-list> <;> 
     |     STRUCTURE <component-decl-list> <;>   /* Tr.onAnonymousStruct($$(0),$$(2)); */
     |     STRUCTURE <::> / <type-name> / <;> 
     |     STRUCTURE <::> / <type-name> / <component-decl-list> <;> 
     |     STRUCTURE <,> <type-attr-spec-list> <::> / <type-name> / <;> 
     |     STRUCTURE <,> <type-attr-spec-list> <::> / <type-name> / <component-decl-list> <;> 

<end-structure-stmt> ::= 
           end-structure-stmt 
     |     <label> end-structure-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-structure-stmt",17,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-structure-stmt",17,false);*/

end-structure-stmt ::= 
           END STRUCTURE 
     |     END STRUCTURE <type-name> 
     |     END_STRUCTURE 
     |     END_STRUCTURE <type-name> 

<component-structure-part> ::= 
           <component-structure-part> <structure-def-stmt> 
     |     <structure-def-stmt> 
     |     <component-structure-part> <label> <structure-def-stmt> 
     |     <label> <structure-def-stmt> 
     |     <component-structure-part> <type-param-union-stmt> 
     |     <type-param-union-stmt> 
     |     <component-structure-part> <label> <type-param-union-stmt> 
     |     <label> <type-param-union-stmt> 
     |     <private-or-sequence> 
     |     <label> <private-or-sequence> 
     |     <component-structure-part> <derived-structure-def> <;> 
     |     <derived-structure-def> <;> 
     |     <component-structure-part> <label> <derived-structure-def> <;> 
     |     <label> <derived-structure-def> <;> 

<structure-def-stmt> ::= 
           <structure-component-def-stmt> 
     |     <erroneous-stmt> <;> 

<structure-component-def-stmt> ::= 
           <declaration-type-spec> <component-decl-list> <;> 
     |     <declaration-type-spec> <structure-comp-fill> <;> 
     |     <declaration-type-spec> <::> <component-decl-list> <;> 
     |     <declaration-type-spec> <,> <structure-component-attr-spec-list> <::> <component-decl-list> <;> 
     |     <record-type-spec> <component-decl-list> <;> 
     |     <record-type-spec> <structure-comp-fill> <;> 
     |     <record-type-spec> <::> <component-decl-list> <;> 
     |     <record-type-spec> <,> <structure-component-attr-spec-list> <::> <component-decl-list> <;> 

<structure-comp-fill> ::= 
           <%> FILL 

<structure-component-attr-spec-list> ::= 
           <structure-component-attr-spec-list> <,> <structure-component-attr-spec> 
     |     <structure-component-attr-spec> 

<structure-component-attr-spec> ::= 
           ALLOCATABLE 
     |     CODIMENSION <[coarray-spec]> 
     |     CONTIGUOUS 
     |     DIMENSION ( <component-array-spec> ) 
     |     POINTER 

<type-param-union-stmt> ::= 
           <union-stmt> <end-union-stmt> <;> 
     |     <union-stmt> <type-param-map-stmts> <end-union-stmt> <;> 

<union-stmt> ::= 
           UNION <;> 

<end-union-stmt> ::= 
           end-union-stmt 
     |     <label> end-union-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-union-stmt",18,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-union-stmt",18,false);*/

end-union-stmt ::= 
           END UNION 
     |     END UNION <type-name> 
     |     END_UNION 
     |     END_UNION <type-name> 

<type-param-map-stmts> ::= 
           <type-param-map-stmts> <label> <derived-map-def> 
     |     <label> <derived-map-def> 
     |     <type-param-map-stmts> <derived-map-def> 
     |     <derived-map-def> 

<derived-map-def> ::= 
           <map-stmt> <end-map-stmt> <;> 
     |     <map-stmt> <component-structure-part> <end-map-stmt> <;> 

<map-stmt> ::= 
           MAP <;> 

<end-map-stmt> ::= 
           end-map-stmt 
     |     <label> end-map-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-map-stmt",19,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-map-stmt",19,false);*/

end-map-stmt ::= 
           END MAP 
     |     END MAP <type-name> 
     |     END_MAP 
     |     END_MAP <type-name> 

<enum-def> ::= 
           <enum-def-stmt> <enumerator-def-stmts> <end-enum-stmt> 

<enum-def-stmt> ::= 
           ENUM <,> BIND ( C ) <;> 

<enumerator-def-stmts> ::= 
           <enumerator-def-stmts> <label> <enumerator-def-stmt> <;> 
     |     <label> <enumerator-def-stmt> <;> 
     |     <enumerator-def-stmts> <enumerator-def-stmt> <;> 
     |     <enumerator-def-stmt> <;> 

<enumerator-def-stmt> ::= 
           ENUMERATOR <::> <assign-list> 
     |     ENUMERATOR <name-list> 
     |     <erroneous-stmt> 

<assign-list> ::= 
           <assign-list> <,> <assign> 
     |     <assign> 

<assign> ::= 
           <name> = <expr> 
     |     <name> 

<end-enum-stmt> ::= 
           end-enum-stmt 
     |     <label> end-enum-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0), L"end-enum-stmt",29,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-enum-stmt",29,false);*/

end-enum-stmt ::= 
           END ENUM 
     |     END_ENUM 

<generic-stmt> ::= 
           <GENERIC> <::> <generic-spec> <=rangle> <specific-procedure-list> 
     |     <GENERIC> <,> <access-spec> <::> <generic-spec> <=rangle> <specific-procedure-list> 

<specific-procedure-list> ::= 
           <name-list> 

<interface-block> ::= 
           <interface-stmt> <end-interface-stmt> 
     |     <interface-stmt> <interface-specifications> <end-interface-stmt> 

<interface-stmt> ::= 
           INTERFACE <;> 
     |     INTERFACE <generic-spec> <;> 
     |     ABSTRACT INTERFACE <;> 

<end-interface-stmt> ::= 
           end-interface-stmt 
     |     <label> end-interface-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-interface-stmt",30,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-interface-stmt",30,false);*/

end-interface-stmt ::= 
           END INTERFACE 
     |     END INTERFACE <generic-spec> +: { <;> } 
     |     END_INTERFACE 
     |     END_INTERFACE <generic-spec> +: { <;> } 

<interface-specifications> ::= 
           <interface-specifications> <interface-specification> 
     |     <interface-specification> 
     |     <interface-specifications> <label> <interface-specification> 
     |     <label> <interface-specification> 

<interface-specification> ::= 
           <interface-body> 
     |     <procedure-stmt> 

<interface-body> ::= 
           <function-stmt> <end-function-stmt;> 
     |     <function-stmt> <spec-stmts> <end-function-stmt;> 
     |     <subroutine-stmt> <end-subroutine-stmt;> 
     |     <subroutine-stmt> <spec-stmts> <end-subroutine-stmt;> 

<spec-stmts> ::= 
           <spec-stmts> <spec-stmt> 
     |     <spec-stmts> <special-stmt;> 
     |     <spec-stmt> 
     |     <special-stmt;> 
     |     <spec-stmts> <label> <spec-stmt> 
     |     <label> <spec-stmt> 

<spec-stmt> ::= 
           <declaration-construct> 
     |     <implicit-part-stmt> 
     |     <import-part-stmt> 
     |     <use-part-stmt> 
     |     <entry-part-stmt> 
     |     <omp-declaration> 
     |     <erroneous-stmt> <;> 

<implicit-part-stmt> ::= 
           <implicit-stmt> <;> 

<implicit-stmt> ::= 
           IMPLICIT <implicit-spec-list> 
     |     IMPLICIT <NONE> 
     |     IMPLICIT <NONE> ( <implicit-none-spec-list> ) 
     |     IMPLICIT <NONE> ( ) 

<implicit-spec-list> ::= 
           <implicit-spec> <,> <implicit-spec-list> 
     |     <implicit-spec> 

<implicit-spec> ::= 
           <declaration-type-spec> <p-letter-spec-list> 
     |     <record-type-spec> <p-letter-spec-list> 

<p-letter-spec-list> ::= 
           ( <letter-spec-list> ) 

<letter-spec-list> ::= 
           <letter-spec-list> <,> <letter-spec> 
     |     <letter-spec> 

<letter-spec> ::= 
           <letter> 
     |     <letter> - <letter> 

<implicit-none-spec-list> ::= 
           <implicit-none-spec-list> , <implicit-none-spec> 
     |     <implicit-none-spec> 

<implicit-none-spec> ::= 
           EXTERNAL 
     |     TYPE 

<import-part-stmt> ::= 
           <import-stmt> <;> 

<import-stmt> ::= 
           IMPORT 
     |     IMPORT <import-name-list> 
     |     IMPORT <::> <import-name-list> 
     |     IMPORT , ONLY : <import-name-list> 
     |     IMPORT , <NONE> 
     |     IMPORT , ALL 

<import-name-list> ::= 
           <name> <,> <import-name-list> 
     |     <name> 

<use-part-stmt> ::= 
           <use-stmt> <;> 

<use-stmt> ::= 
           USE <module-name> 
     |     USE <module-name> <,> <rename-list> 
     |     USE <::> <module-name> 
     |     USE <::> <module-name> <,> <rename-list> 
     |     USE <,> <module-nature> <::> <module-name> 
     |     USE <,> <module-nature> <::> <module-name> <,> <rename-list> 
     |     USE <module-name> <,> ONLY : 
     |     USE <module-name> <,> ONLY : <only-list> +: { <;> } 
     |     USE <::> <module-name> <,> ONLY : 
     |     USE <::> <module-name> <,> ONLY : <only-list> +: { <;> } 
     |     USE <,> <module-nature> <::> <module-name> <,> ONLY : 
     |     USE <,> <module-nature> <::> <module-name> <,> ONLY : <only-list> +: { <;> } 

<module-name> ::= 
           <name> 
     |     <erroneous-stmt> 

<rename-list> ::= 
           <rename> <,> <rename-list> 
     |     <rename> 

<rename> ::= 
           <local-name> <=rangle> <use-name> 
     |     <operator-definition> <=rangle> OPERATOR ( <use-defined-operator> ) 

<local-name> ::= 
           <name> 

<use-name> ::= 
           <name> 

<operator-definition> ::= 
           OPERATOR <p-defined-operator> 

<use-defined-operator> ::= 
           <defined-op> 

<module-nature> ::= 
           INTRINSIC 
     |     NON INTRINSIC 
     |     NON_INTRINSIC 

<only-list> ::= 
           <only-list> <,> <only> +: { <;> | <,> } 
     |     <only> 

<only> ::= 
           <generic-spec> 
     |     <only-use-name> 
     |     <rename> 

<only-use-name> ::= 
           <name> 

<entry-part-stmt> ::= 
           <entry-stmt> <;> 

<entry-stmt> ::= 
           ENTRY <entry-name> 
     |     ENTRY <entry-name> ( ) 
     |     ENTRY <entry-name> ( ) <sufix> 
     |     ENTRY <entry-name> ( <dummy-arg-list> ) 
     |     ENTRY <entry-name> ( <dummy-arg-list> ) <sufix> 

<entry-name> ::= 
           <name> 

<dummy-arg-list> ::= 
           <dummy-arg-list> <comma> <dummy-arg> 
     |     <dummy-arg> 

<dummy-arg> ::= 
           <name> 
     |     * 

<omp-declaration> ::= 
           <omp-declare-mapper-stmt> 
     |     <omp-declare-reduction-stmt> 
     |     <omp-declare-simd-stmt> 
     |     <omp-declare-target-stmt> 
     |     <omp-declare-variant-stmt> 
     |     <omp-metadirective-construct> 
     |     <omp-requires-directive> 
     |     <omp-threadprivate-stmt> 
     |     <ibm-threadlocal> 

<omp-declare-mapper-stmt> ::= 
           OMP <omp-declare-mapper> <\n> 

<omp-declare-mapper> ::= 
           DECLARE MAPPER ( <omp-type> <::> <omp-var> ) 
     |     DECLARE MAPPER ( <omp-type> <::> <omp-var> ) <omp-mapper-clause-list> 
     |     DECLARE MAPPER ( <omp-mapper-identifier> : <omp-type> <::> <omp-var> ) 
     |     DECLARE MAPPER ( <omp-mapper-identifier> : <omp-type> <::> <omp-var> ) <omp-mapper-clause-list> 

<omp-type> ::= 
           <name> 

<omp-var> ::= 
           <data-ref> 

<omp-mapper-clause-list> ::= 
           <omp-mapper-clause-list> , <omp-mapper-clause> 
     |     <omp-mapper-clause-list> <omp-mapper-clause> 
     |     <omp-mapper-clause> 

<omp-mapper-clause> ::= 
           MAP ( <omp-list> ) 
     |     MAP ( <omp-mapper-type> : <omp-list> ) 
     |     MAP ( <omp-map-type-modifier-list> <omp-mapper-type> : <omp-list> ) 

<omp-list> ::= 
           <omp-list> , <omp-item> 
     |     <omp-item> 

<omp-item> ::= 
           <variable> 
     |     <slashed-name> 

<slashed-name> ::= 
           / <name> / 

<omp-mapper-type> ::= 
           TO 
     |     FROM 
     |     TOFROM 
     |     ALLOC 

<omp-map-type-modifier-list> ::= 
           <omp-map-type-modifier-list> , <omp-map-type-modifier> 
     |     <omp-map-type-modifier-list> <omp-map-type-modifier> 
     |     <omp-map-type-modifier> 

<omp-map-type-modifier> ::= 
           ALWAYS 
     |     CLOSE 

<omp-mapper-identifier> ::= 
           <name> 

<\n> ::= 
           <;>   /* Tr.ErrorIfStarts( str(1),';', L"Unexpected ';' in OpenMP Directive. Expected New Line. " ) ; */

<omp-declare-reduction-stmt> ::= 
           OMP <omp-declare-reduction> <\n> 

<omp-declare-reduction> ::= 
           DECLARE REDUCTION ( <reduction-identifier> : <omp-type-list> : <omp-combiner> ) 
     |     DECLARE REDUCTION ( <reduction-identifier> : <omp-type-list> : <omp-combiner> ) <omp-initializer-clause> 

<reduction-identifier> ::= 
           <name> 
     |     IAND 
     |     IEOR 
     |     IOR 
     |     MIN 
     |     MAX 
     |     <equiv-op> 
     |     <or-op> 
     |     <and-op> 
     |     <not-op> 
     |     <add-op> 
     |     <mult-op> 
     |     <defined-unary-op>   /* Tr.warning(L"The operator '%s' as a Reduction Identifier is non standard.",str(1)); synthesize(1); */

<omp-type-list> ::= 
           <omp-type-list> , <type-spec> 
     |     <type-spec> 

<omp-combiner> ::= 
           <designator> = <expr> 
     |     <designator> -: { = } 

<omp-initializer-clause> ::= 
           INITIALIZER ( <omp-initializer-expr> ) 

<omp-initializer-expr> ::= 
           OMP_PRIV = <expr> 
     |     <procedure-name> <p-actual-arg-spec-list> 

<omp-declare-simd-stmt> ::= 
           OMP <omp-declare-simd> <\n> 

<omp-declare-simd> ::= 
           DECLARE SIMD 
     |     DECLARE SIMD ( <procedure-name> ) 
     |     DECLARE SIMD <declare-simd-clause-list> 
     |     DECLARE SIMD ( <procedure-name> ) <declare-simd-clause-list> 

<declare-simd-clause-list> ::= 
           <declare-simd-clause-list> , <declare-simd-clause> 
     |     <declare-simd-clause-list> <declare-simd-clause> 
     |     <declare-simd-clause> 

<declare-simd-clause> ::= 
           <omp-simdlen> 
     |     <omp-linear> 
     |     <omp-aligned> 
     |     <omp-uniform> 
     |     INBRANCH 
     |     NOTINBRANCH 

<omp-simdlen> ::= 
           SIMDLEN ( <scalar-int-constant-expr> ) 

<omp-linear> ::= 
           LINEAR ( <omp-list> ) 
     |     LINEAR ( <omp-list> : <omp-linear-step> ) 

<omp-linear-step> ::= 
           <scalar-int-constant-expr> 

<omp-aligned> ::= 
           ALIGNED ( <omp-list> ) 
     |     ALIGNED ( <omp-list> : <omp-alignment> ) 

<omp-alignment> ::= 
           <scalar-int-expr> 

<omp-uniform> ::= 
           UNIFORM ( <omp-list> ) 

<omp-declare-target-stmt> ::= 
           OMP <omp-declare-target> <\n> 

<omp-declare-target> ::= 
           DECLARE TARGET 
     |     DECLARE TARGET <declare-target-clause-list> 
     |     DECLARE TARGET ( <omp-extended-list> ) 

<declare-target-clause-list> ::= 
           <declare-target-clause-list> , <declare-target-clause> 
     |     <declare-target-clause-list> <declare-target-clause> 
     |     <declare-target-clause> 

<declare-target-clause> ::= 
           <omp-target-to> 
     |     <omp-target-enter> 
     |     <omp-target-indirect> 
     |     <omp-link> 
     |     <omp-device-type> 

<omp-target-to> ::= 
           TO ( <omp-extended-list> ) 

<omp-extended-list> ::= 
           <omp-list> 

<omp-target-enter> ::= 
           ENTER ( <omp-extended-list> ) 

<omp-target-indirect> ::= 
           INDIRECT ( ) 
     |     INDIRECT ( <omp-invoked-by-fptr> ) 

<omp-invoked-by-fptr> ::= 
           <omp-var> 
     |     <logical-literal-constant> 

<omp-link> ::= 
           LINK ( <omp-list> ) 

<omp-device-type> ::= 
           DEVICE_TYPE ( HOST ) 
     |     DEVICE_TYPE ( NOHOST ) 
     |     DEVICE_TYPE ( <ANY> ) 

<omp-declare-variant-stmt> ::= 
           OMP <omp-declare-variant> <\n> 

<omp-declare-variant> ::= 
           DECLARE VARIANT ( <omp-variant-proc-name> ) <omp-variant-clause> 
     |     DECLARE VARIANT ( <omp-base-proc-name> : <omp-variant-proc-name> ) <omp-variant-clause> 

<omp-variant-proc-name> ::= 
           <name> 

<omp-variant-clause> ::= 
           MATCH ( <omp-context-selector-specification> ) 

<omp-context-selector-specification> ::= 
           <omp-trait-set-selector-list> 

<omp-trait-set-selector-list> ::= 
           <omp-trait-set-selector-list> , <omp-trait-set-selector> 
     |     <omp-trait-set-selector> 

<omp-trait-set-selector> ::= 
           CONSTRUCT = <{> <omp-trait-selector-construct-list> <}> 
     |     DEVICE = <{> <omp-trait-selector-device-list> <}> 
     |     IMPLEMENTATION = <{> <omp-trait-selector-device-list> <}> 
     |     USER = <{> <omp-trait-selector-condition-list> <}> 

<omp-trait-selector-construct-list> ::= 
           <omp-trait-selector-construct-list> , <omp-trait-selector-construct> 
     |     <omp-trait-selector-construct> 

<omp-trait-selector-construct> ::= 
           <omp-trait-selector-construct-name> 
     |     <omp-trait-selector-construct-name> ( <omp-trait-property-list> ) 
     |     <omp-trait-selector-construct-name> ( <omp-trait-score> : <omp-trait-property-list> ) 

<omp-trait-selector-construct-name> ::= 
           DO 
     |     TARGET 
     |     TEAMS 
     |     PARALLEL 
     |     SIMD 

<omp-trait-property-list> ::= 
           <omp-trait-property-list> , <omp-trait-property> 
     |     <omp-trait-property> 

<omp-trait-property> ::= 
           <expr> 
     |     <ANY> 

<omp-trait-score> ::= 
           SCORE ( <omp-score-expression> ) 

<omp-score-expression> ::= 
           <expr> 

<omp-trait-selector-device-list> ::= 
           <omp-trait-selector-device-list> , <omp-trait-selector-device> 
     |     <omp-trait-selector-device-list> , <omp-trait-selector-vendor> 
     |     <omp-trait-selector-device> 
     |     <omp-trait-selector-vendor> 

<omp-trait-selector-device> ::= 
           <omp-trait-selector-device-type> 
     |     <omp-trait-selector-device-type> ( <omp-trait-property-list> ) 
     |     <omp-trait-selector-device-type> ( <omp-trait-score> : <omp-trait-property-list> ) 

<omp-trait-selector-device-type> ::= 
           ARCH 
     |     KIND 
     |     ISA 

<omp-trait-selector-vendor> ::= 
           VENDOR ( <name-list> ) 

<omp-trait-selector-condition-list> ::= 
           <omp-trait-selector-condition-list> , <omp-trait-selector-condition> 
     |     <omp-trait-selector-condition> 

<omp-trait-selector-condition> ::= 
           CONDITION ( <expr> ) 

<omp-base-proc-name> ::= 
           <name> 

<omp-metadirective-construct> ::= 
           <omp-begin-metadirective> structured-block <omp-end-metadirective;> 
     |     <omp-begin-metadirective> <omp-end-metadirective;> 
     |     <omp-metadirective-stmt> 

<omp-begin-metadirective> ::= 
           OMP BEGIN METADIRECTIVE <\n> 
     |     OMP BEGIN METADIRECTIVE <omp-metadirective-clause-list> <\n> 

<omp-metadirective-clause-list> ::= 
           <omp-metadirective-clause-list> , <omp-metadirective-clause> 
     |     <omp-metadirective-clause-list> <omp-metadirective-clause> 
     |     <omp-metadirective-clause> 

<omp-metadirective-clause> ::= 
           WHEN ( <omp-context-selector-specification> : ) 
     |     WHEN ( <omp-context-selector-specification> : <omp-directive-variant> ) 
     |     DEFAULT ( <omp-directive-variant> ) 

<omp-directive-variant> ::= 
           <omp-directive-name-clause> 

<omp-directive-name-clause> ::= 
           <omp-atomic-capture> 
     |     <omp-atomic-update> 
     |     <omp-barrier> 
     |     <omp-cancel> 
     |     <omp-cancel-do> 
     |     <omp-cancel-sections> 
     |     <omp-cancellation-point> 
     |     <omp-cancellation-point-do> 
     |     <omp-cancellation-point-sections> 
     |     <omp-critical> 
     |     <omp-declare-mapper> 
     |     <omp-declare-reduction> 
     |     <omp-declare-simd> 
     |     <omp-declare-target> 
     |     <omp-declare-variant> 
     |     <omp-depobj> 
     |     <omp-distribute> 
     |     <omp-distribute-parallel-do> 
     |     <omp-distribute-parallel-do-simd> 
     |     <omp-distribute-simd> 
     |     <omp-do> 
     |     <omp-do-simd> 
     |     <omp-flush> 
     |     <omp-loop> 
     |     <omp-master> 
     |     <omp-master-taskloop> 
     |     <omp-master-taskloop-simd> 
     |     <omp-ordered> 
     |     <omp-ordered-depend> 
     |     <omp-parallel> 
     |     <omp-parallel-do> 
     |     <omp-parallel-do-simd> 
     |     <omp-parallel-loop> 
     |     <omp-parallel-master> 
     |     <omp-parallel-master-taskloop> 
     |     <omp-parallel-master-taskloop-simd> 
     |     <omp-parallel-sections> 
     |     <omp-parallel-workshare> 
     |     <omp-requires> 
     |     <omp-scan> 
     |     <omp-section> 
     |     <omp-sections> 
     |     <omp-simd> 
     |     <omp-single> 
     |     <omp-target> 
     |     <omp-target-data> 
     |     <omp-target-enter-data> 
     |     <omp-target-exit-data> 
     |     <omp-target-parallel> 
     |     <omp-target-parallel-do> 
     |     <omp-target-parallel-do-simd> 
     |     <omp-target-simd> 
     |     <omp-target-teams> 
     |     <omp-target-teams-distribute> 
     |     <omp-target-teams-distribute-simd> 
     |     <omp-target-teams-distribute-parallel-do> 
     |     <omp-target-teams-distribute-parallel-do-simd> 
     |     <omp-target-parallel-loop> 
     |     <omp-target-teams-loop> 
     |     <omp-target-update> 
     |     <omp-taskgroup> 
     |     <omp-task> 
     |     <omp-taskloop> 
     |     <omp-taskloop-simd> 
     |     <omp-taskwait> 
     |     <omp-taskyield> 
     |     <omp-teams> 
     |     <omp-teams-distribute> 
     |     <omp-teams-loop> 
     |     <omp-teams-distribute-parallel-do> 
     |     <omp-teams-distribute-parallel-do-simd> 
     |     <omp-teams-distribute-simd> 
     |     <omp-threadprivate> 
     |     <omp-workshare> 

<omp-atomic-capture> ::= 
           ATOMIC CAPTURE 
     |     ATOMIC CAPTURE <omp-atomic-clause-list> 
     |     ATOMIC CAPTURE , <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> CAPTURE 
     |     ATOMIC <omp-atomic-clause-list> CAPTURE <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> CAPTURE , <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> , CAPTURE 
     |     ATOMIC <omp-atomic-clause-list> , CAPTURE <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> , CAPTURE , <omp-atomic-clause-list> 

<omp-atomic-clause-list> ::= 
           <omp-atomic-clause-list> , <omp-atomic-clause> 
     |     <omp-atomic-clause-list> <omp-atomic-clause> 
     |     <omp-atomic-clause> 

<omp-atomic-clause> ::= 
           <omp-atomic-mem-order> 
     |     <omp-hint> 

<omp-atomic-mem-order> ::= 
           SEQ_CST 
     |     ACQ_REL 
     |     RELEASE 
     |     ACQUIRE 
     |     RELAXED 

<omp-hint> ::= 
           HINT ( hint-expression ) 

hint-expression ::= 
           <scalar-int-expr> 

<omp-atomic-update> ::= 
           ATOMIC <omp-update-key> 
     |     ATOMIC <omp-update-key> <omp-atomic-clause-list> 
     |     ATOMIC <omp-update-key> , <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> <omp-update-key> 
     |     ATOMIC <omp-atomic-clause-list> <omp-update-key> <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> <omp-update-key> , <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> , <omp-update-key> 
     |     ATOMIC <omp-atomic-clause-list> , <omp-update-key> <omp-atomic-clause-list> 
     |     ATOMIC <omp-atomic-clause-list> , <omp-update-key> , <omp-atomic-clause-list> 
     |     ATOMIC 
     |     ATOMIC <omp-atomic-clause-list> 

<omp-update-key> ::= 
           READ 
     |     UPDATE 
     |     WRITE 

<omp-barrier> ::= 
           BARRIER 

<omp-cancel> ::= 
           CANCEL <omp-construct-type-clause> 
     |     CANCEL <omp-construct-type-clause> <cancel-if-clause> 
     |     CANCEL <omp-construct-type-clause> , <cancel-if-clause> 

<omp-construct-type-clause> ::= 
           PARALLEL 
     |     TASKGROUP 

<cancel-if-clause> ::= 
           <omp-if-cond> 
     |     IF ( CANCEL : <scalar-logical-expression> ) 

<omp-if-cond> ::= 
           IF ( <scalar-logical-expression> ) 

<scalar-logical-expression> ::= 
           <expr> 

<omp-cancel-do> ::= 
           CANCEL DO -: { IF } 
     |     CANCEL DO <cancel-if-clause> 
     |     CANCEL DO , <cancel-if-clause> 

<omp-cancel-sections> ::= 
           CANCEL SECTIONS -: { IF } 
     |     CANCEL SECTIONS <cancel-if-clause> 
     |     CANCEL SECTIONS , <cancel-if-clause> 

<omp-cancellation-point> ::= 
           CANCELLATION POINT <omp-construct-type-clause> 

<omp-cancellation-point-do> ::= 
           CANCELLATION POINT DO 

<omp-cancellation-point-sections> ::= 
           CANCELLATION POINT SECTIONS 

<omp-critical> ::= 
           CRITICAL 
     |     CRITICAL ( <name> ) 
     |     CRITICAL ( <name> ) <omp-hint> 

<omp-depobj> ::= 
           DEPOBJ ( <omp-depobj-name> ) <omp-depobj-clause-list> 

<omp-depobj-name> ::= 
           <expr> 

<omp-depobj-clause-list> ::= 
           <omp-depobj-clause-list> <omp-depobj-clause> 
     |     <omp-depobj-clause> 

<omp-depobj-clause> ::= 
           DEPEND ( <omp-dependence-type> : <omp-locator> ) 
     |     DESTROY 
     |     UPDATE ( <omp-dependence-type> ) 

<omp-dependence-type> ::= 
           IN 
     |     OUT 
     |     IN_OUT 
     |     IN OUT 
     |     MUTEXINOUTSET 
     |     DEPOBJ 

<omp-locator> ::= 
           <omp-var> 
     |     <omp-var> <add-op> <omp-non-negative integer> 

<omp-non-negative integer> ::= 
           <name> 
     |     <constant> 

<omp-distribute> ::= 
           DISTRIBUTE 
     |     DISTRIBUTE <distribute-clause-list> 

<distribute-clause-list> ::= 
           <distribute-clause-list> , <distribute-clause> 
     |     <distribute-clause-list> <distribute-clause> 
     |     <distribute-clause> 

<distribute-clause> ::= 
           <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-lastprivate> 
     |     <omp-collapse> 
     |     <omp-dest-schedule> 

<omp-private> ::= 
           PRIVATE ( <omp-list> ) 

<omp-firstprivate> ::= 
           FIRSTPRIVATE ( <omp-list> ) 

<omp-lastprivate> ::= 
           LASTPRIVATE ( <omp-list> ) 
     |     LASTPRIVATE ( <lastprivate-modifier> : <omp-list> ) 

<lastprivate-modifier> ::= 
           CONDITIONAL 

<omp-collapse> ::= 
           COLLAPSE ( <scalar-int-constant-expr> ) 

<omp-dest-schedule> ::= 
           DIST_SCHEDULE ( <omp-schedule-kind> ) 
     |     DIST_SCHEDULE ( <omp-schedule-kind> , <chunk_size> ) 

<omp-schedule-kind> ::= 
           STATIC 
     |     DYNAMIC 
     |     GUIDED 
     |     AUTO 
     |     AFFINITY   /* Tr.warning(L"Affinity is a vendor specific, deprecated schedule kind."); */
     |     RUNTIME 

<chunk_size> ::= 
           <scalar-int-expr> 

<omp-distribute-parallel-do> ::= 
           DISTRIBUTE PARALLEL DO -: { SIMD } 
     |     DISTRIBUTE PARALLEL DO <distribute-parallel-do-clause-list> -: { SIMD } 

<distribute-parallel-do-clause-list> ::= 
           <distribute-parallel-do-clause-list> , <distribute-parallel-do-clause> 
     |     <distribute-parallel-do-clause-list> <distribute-parallel-do-clause> 
     |     <distribute-parallel-do-clause> 

<distribute-parallel-do-clause> ::= 
           <distribute-clause> 
     |     <parallel-clause> 
     |     <omp-do-clause> 

<parallel-clause> ::= 
           <omp-if-cond> 
     |     <omp-if-parallel> 
     |     <omp-num-threads> 
     |     <omp-default> 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-shared> 
     |     COPYIN ( <omp-list> ) 
     |     <omp-reduction> 
     |     <omp-procedure-bind> 

<omp-if-parallel> ::= 
           IF ( PARALLEL : <scalar-logical-expression> ) 

<omp-num-threads> ::= 
           NUM_THREADS ( <scalar-int-expr> ) 

<omp-default> ::= 
           DEFAULT ( <default-parallel> ) 

<default-parallel> ::= 
           PRIVATE 
     |     FIRSTPRIVATE 
     |     SHARED 
     |     <NONE> 

<omp-shared> ::= 
           SHARED ( <omp-list> ) 

<omp-reduction> ::= 
           REDUCTION ( <reduction-identifier> : <omp-list> ) 
     |     REDUCTION ( <reduction-modifier> , <reduction-identifier> : <omp-list> ) 

<reduction-modifier> ::= 
           INSCAN 
     |     TASK 
     |     DEFAULT 

<omp-procedure-bind> ::= 
           PROC_BIND ( <proc-bind-argument> ) 

<proc-bind-argument> ::= 
           MASKED 
     |     MASTER 
     |     CLOSE 
     |     SPREAD 

<omp-do-clause> ::= 
           <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-lastprivate> 
     |     <omp-linear> 
     |     <omp-reduction> 
     |     <omp-schedule> 
     |     <omp-collapse> 
     |     <omp-ordered-clause> 
     |     <omp-allocate> 
     |     <omp-order> 

<omp-schedule> ::= 
           SCHEDULE ( <omp-schedule-kind> ) 
     |     SCHEDULE ( <omp-schedule-kind> , <scalar-int-expr> ) 
     |     SCHEDULE ( <omp-schedule-midifiers> : <omp-schedule-kind> ) 
     |     SCHEDULE ( <omp-schedule-midifiers> : <omp-schedule-kind> , <scalar-int-expr> ) 

<omp-schedule-midifiers> ::= 
           <omp-schedule-midifier> 
     |     <omp-schedule-midifier> , <omp-schedule-midifier> 

<omp-schedule-midifier> ::= 
           MONOTONIC 
     |     NONMONOTONIC 
     |     SIMD 

<omp-ordered-clause> ::= 
           ORDERED ( <scalar-int-constant-expr> ) 
     |     ORDERED 

<omp-allocate> ::= 
           ALLOCATE ( <omp-list> ) 
     |     ALLOCATE ( <omp-allocator> : <omp-list> ) 

<omp-allocator> ::= 
           <name> 

<omp-order> ::= 
           ORDER ( CONCURRENT ) 

<omp-distribute-parallel-do-simd> ::= 
           DISTRIBUTE PARALLEL DO SIMD 
     |     DISTRIBUTE PARALLEL DO SIMD <distribute-parallel-do-simd-clause-list> 

<distribute-parallel-do-simd-clause-list> ::= 
           <distribute-parallel-do-simd-clause-list> , <distribute-parallel-do-simd-clause> 
     |     <distribute-parallel-do-simd-clause-list> <distribute-parallel-do-simd-clause> 
     |     <distribute-parallel-do-simd-clause> 

<distribute-parallel-do-simd-clause> ::= 
           <distribute-clause> 
     |     <parallel-do-simd-clause> 

<parallel-do-simd-clause> ::= 
           <parallel-clause> 
     |     <omp-do-simd-clause> 

<omp-do-simd-clause> ::= 
           <omp-do-clause> 
     |     <simd-clause> 

<simd-clause> ::= 
           <omp-if-simd> 
     |     <omp-safelen> 
     |     <omp-simdlen> 
     |     <omp-linear> 
     |     <omp-aligned> 
     |     <omp-nontemporal> 
     |     <omp-private> 
     |     <omp-lastprivate> 
     |     <omp-reduction> 
     |     <omp-collapse> 
     |     <omp-order> 
     |     EARLY_EXIT 

<omp-if-simd> ::= 
           <omp-if-cond> 
     |     IF ( SIMD : <scalar-logical-expression> ) 

<omp-safelen> ::= 
           SAFELEN ( <scalar-int-constant-expr> ) 

<omp-nontemporal> ::= 
           NONTEMPORAL ( <omp-list> ) 

<omp-distribute-simd> ::= 
           DISTRIBUTE SIMD 
     |     DISTRIBUTE SIMD <distribute-simd-clause-list> 

<distribute-simd-clause-list> ::= 
           <distribute-simd-clause-list> , <omp-distribute-simd-clause> 
     |     <distribute-simd-clause-list> <omp-distribute-simd-clause> 
     |     <omp-distribute-simd-clause> 

<omp-distribute-simd-clause> ::= 
           <distribute-clause> 
     |     <simd-clause> 

<omp-do> ::= 
           DO 
     |     DO <do-clause-list> 

<do-clause-list> ::= 
           <do-clause-list> , <omp-do-clause> 
     |     <do-clause-list> <omp-do-clause> 
     |     <omp-do-clause> 

<omp-do-simd> ::= 
           DO SIMD 
     |     DO SIMD <do-simd-clause-list> 

<do-simd-clause-list> ::= 
           <do-simd-clause-list> , <omp-do-simd-clause> 
     |     <do-simd-clause-list> <omp-do-simd-clause> 
     |     <omp-do-simd-clause> 

<omp-flush> ::= 
           FLUSH 
     |     FLUSH ( <omp-list> ) 
     |     FLUSH <omp-flush-mem-order> 
     |     FLUSH <omp-flush-mem-order> ( <omp-list> ) 

<omp-flush-mem-order> ::= 
           ACQ_REL 
     |     RELEASE 
     |     ACQUIRE 

<omp-loop> ::= 
           LOOP 
     |     LOOP <loop-clause-list> 

<loop-clause-list> ::= 
           <loop-clause-list> , <omp-loop-clause> 
     |     <loop-clause-list> <omp-loop-clause> 
     |     <omp-loop-clause> 

<omp-loop-clause> ::= 
           <omp-bind> 
     |     <omp-collapse> 
     |     <omp-order> 
     |     <omp-private> 
     |     <omp-lastprivate> 
     |     <omp-reduction> 

<omp-bind> ::= 
           BIND ( TEAMS ) 
     |     BIND ( PARALLEL ) 
     |     BIND ( THREAD ) 

<omp-master> ::= 
           MASTER 
     |     MASTER <omp-filter>   /* synthesize(2); */

<omp-filter> ::= 
           FILTER ( <omp-thread_num> ) 

<omp-thread_num> ::= 
           <expr> 

<omp-master-taskloop> ::= 
           MASTER TASKLOOP 
     |     MASTER TASKLOOP <master-taskloop-clause-list> 

<master-taskloop-clause-list> ::= 
           <master-taskloop-clause-list> , <master-taskloop-clause> 
     |     <master-taskloop-clause-list> <master-taskloop-clause> 
     |     <master-taskloop-clause> 

<master-taskloop-clause> ::= 
           <taskloop-clause> 
     |     <masked-clause> 

<taskloop-clause> ::= 
           <omp-if-cond> 
     |     <omp-if-task> 
     |     <omp-shared> 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-lastprivate> 
     |     <omp-reduction> 
     |     <omp-in-reduction> 
     |     <omp-default> 
     |     <omp-grainsize> 
     |     <omp-num-tasks> 
     |     <omp-collapse> 
     |     <omp-final> 
     |     <omp-priority> 
     |     UNTIED 
     |     MERGEABLE 
     |     NOGROUP 

<omp-if-task> ::= 
           IF ( <name> : <scalar-logical-expression> ) 

<omp-in-reduction> ::= 
           IN_REDUCTION ( <reduction-identifier> : <omp-list> ) 

<omp-grainsize> ::= 
           GRAINSIZE ( <scalar-int-expr> ) 

<omp-num-tasks> ::= 
           NUM_TASKS ( <scalar-int-expr> ) 

<omp-final> ::= 
           FINAL ( <scalar-logical-expression> ) 

<omp-priority> ::= 
           PRIORITY ( <omp-priority-value> ) 

<omp-priority-value> ::= 
           <scalar-int-expr> 

<masked-clause> ::= 
           <omp-filter> 

<omp-master-taskloop-simd> ::= 
           MASTER TASKLOOP SIMD 
     |     MASTER TASKLOOP SIMD <master-taskloop-simd-clause-list> 

<master-taskloop-simd-clause-list> ::= 
           <master-taskloop-simd-clause-list> , <omp-master-taskloop-simd-clause> 
     |     <master-taskloop-simd-clause-list> <omp-master-taskloop-simd-clause> 
     |     <omp-master-taskloop-simd-clause> 

<omp-master-taskloop-simd-clause> ::= 
           <taskloop-clause> 
     |     <masked-clause> 
     |     <simd-clause> 

<omp-ordered> ::= 
           ORDERED 
     |     ORDERED <ordered-clause-list> 

<ordered-clause-list> ::= 
           <ordered-clause-list> , <ordered-clause> 
     |     <ordered-clause-list> <ordered-clause> 
     |     <ordered-clause> 

<ordered-clause> ::= 
           SIMD 
     |     THREADS 

<omp-ordered-depend> ::= 
           ORDERED <ordered-depend-clause-list> 

<ordered-depend-clause-list> ::= 
           <ordered-depend-clause-list> , <ordered-depend-clause> 
     |     <ordered-depend-clause-list> <ordered-depend-clause> 
     |     <ordered-depend-clause> 

<ordered-depend-clause> ::= 
           DEPEND ( SOURCE ) 
     |     DEPEND ( SINK : <omp-locator-list> ) 

<omp-locator-list> ::= 
           <omp-locator-list> , <omp-locator> 
     |     <omp-locator> 

<omp-parallel> ::= 
           PARALLEL 
     |     PARALLEL <parallel-clause-list> 

<parallel-clause-list> ::= 
           <parallel-clause-list> , <parallel-clause> 
     |     <parallel-clause-list> <parallel-clause> 
     |     <parallel-clause> 

<omp-parallel-do> ::= 
           PARALLEL DO 
     |     PARALLEL DO <parallel-do-clause-list> 

<parallel-do-clause-list> ::= 
           <parallel-do-clause-list> , <parallel-do-clause> 
     |     <parallel-do-clause-list> <parallel-do-clause> 
     |     <parallel-do-clause> 

<parallel-do-clause> ::= 
           <parallel-clause> 
     |     <omp-lastprivate> 
     |     <omp-linear> 
     |     <omp-schedule> 
     |     <omp-collapse> 
     |     <omp-ordered-clause> 

<omp-parallel-do-simd> ::= 
           PARALLEL DO SIMD 
     |     PARALLEL DO SIMD <parallel-do-simd-clause-list> 

<parallel-do-simd-clause-list> ::= 
           <parallel-do-simd-clause-list> , <parallel-do-simd-clause> 
     |     <parallel-do-simd-clause-list> <parallel-do-simd-clause> 
     |     <parallel-do-simd-clause> 

<omp-parallel-loop> ::= 
           PARALLEL LOOP 
     |     PARALLEL LOOP <parallel-loop-clause-list> 

<parallel-loop-clause-list> ::= 
           <parallel-loop-clause-list> , <omp-parallel-loop-clause> 
     |     <parallel-loop-clause-list> <omp-parallel-loop-clause> 
     |     <omp-parallel-loop-clause> 

<omp-parallel-loop-clause> ::= 
           <parallel-clause> 
     |     <omp-loop-clause> 

<omp-parallel-master> ::= 
           PARALLEL MASTER 
     |     PARALLEL MASTER <parallel-clause-list> 

<omp-parallel-master-taskloop> ::= 
           PARALLEL MASTER TASKLOOP 
     |     PARALLEL MASTER TASKLOOP <parallel-taskloop-clause-list> 

<parallel-taskloop-clause-list> ::= 
           <parallel-taskloop-clause-list> , <parallel-taskloop-clause> 
     |     <parallel-taskloop-clause-list> <parallel-taskloop-clause> 
     |     <parallel-taskloop-clause> 

<parallel-taskloop-clause> ::= 
           <parallel-clause> 
     |     <taskloop-clause> 
     |     <masked-clause> 

<omp-parallel-master-taskloop-simd> ::= 
           PARALLEL MASTER TASKLOOP SIMD   /* synthesize(2); */
     |     PARALLEL MASTER TASKLOOP SIMD <parallel-taskloop-simd-clause-list>   /* synthesize(2); */

<parallel-taskloop-simd-clause-list> ::= 
           <parallel-taskloop-simd-clause-list> , <parallel-taskloop-simd-clause> 
     |     <parallel-taskloop-simd-clause-list> <parallel-taskloop-simd-clause> 
     |     <parallel-taskloop-simd-clause> 

<parallel-taskloop-simd-clause> ::= 
           <parallel-clause> 
     |     <taskloop-clause> 
     |     <simd-clause> 
     |     <masked-clause> 

<omp-parallel-sections> ::= 
           PARALLEL SECTIONS 
     |     PARALLEL SECTIONS <parallel-sections-clause-list> 

<parallel-sections-clause-list> ::= 
           <parallel-sections-clause-list> , <parallel-sections-clause> 
     |     <parallel-sections-clause-list> <parallel-sections-clause> 
     |     <parallel-sections-clause> 

<parallel-sections-clause> ::= 
           <parallel-clause> 
     |     <omp-lastprivate> 
     |     <omp-reduction> 

<omp-parallel-workshare> ::= 
           PARALLEL WORKSHARE 
     |     PARALLEL WORKSHARE <parallel-clause-list> 

<omp-requires> ::= 
           REQUIRES <omp-requires-clause-list> 

<omp-requires-clause-list> ::= 
           <omp-requires-clause-list> , <omp-requires-clause> 
     |     <omp-requires-clause-list> <omp-requires-clause> 
     |     <omp-requires-clause> 

<omp-requires-clause> ::= 
           REVERSE_OFFLOAD 
     |     UNIFIED_ADDRESS 
     |     UNIFIED_SHARED_MEMORY 
     |     ATOMIC_DEFAULT_MEM_ORDER ( <omp-mem-order> ) 
     |     DYNAMIC_ALLOCATORS 
     |     <ext_implementation-defined-requirement> 

<omp-mem-order> ::= 
           SEQ_CST 
     |     ACQ_REL 
     |     RELAXED 

<omp-scan> ::= 
           SCAN 
     |     SCAN <omp-scan-clause> 

<omp-scan-clause> ::= 
           <omp-inclusive> 
     |     <omp-exclusive> 

<omp-inclusive> ::= 
           INCLUSIVE ( <omp-list> ) 

<omp-exclusive> ::= 
           EXCLUSIVE ( <omp-list> ) 

<omp-section> ::= 
           SECTION 

<omp-sections> ::= 
           SECTIONS 
     |     SECTIONS <sections-clause-list> 

<sections-clause-list> ::= 
           <sections-clause-list> , <sections-clause> 
     |     <sections-clause-list> <sections-clause> 
     |     <sections-clause> 

<sections-clause> ::= 
           <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-lastprivate> 
     |     <omp-reduction> 

<omp-simd> ::= 
           SIMD 
     |     SIMD <simd-clause-list> 

<simd-clause-list> ::= 
           <simd-clause-list> , <simd-clause> 
     |     <simd-clause-list> <simd-clause> 
     |     <simd-clause> 

<omp-single> ::= 
           SINGLE 
     |     SINGLE <single-clause-list> 

<single-clause-list> ::= 
           <single-clause-list> , <single-clause> 
     |     <single-clause-list> <single-clause> 
     |     <single-clause> 

<single-clause> ::= 
           <omp-private> 
     |     <omp-firstprivate> 

<omp-target> ::= 
           TARGET 
     |     TARGET <target-clause-list> 

<target-clause-list> ::= 
           <target-clause-list> , <target-clause> 
     |     <target-clause-list> <target-clause> 
     |     <target-clause> 

<target-clause> ::= 
           <omp-if-cond> 
     |     <omp-if-target> 
     |     <omp-device> 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-in-reduction> 
     |     <omp-map> 
     |     <omp-is-device-ptr> 
     |     <omp-defaultmap> 
     |     NOWAIT 
     |     <omp-depend> 
     |     <omp-allocate> 
     |     <omp-uses-allocators> 

<omp-if-target> ::= 
           IF ( TARGET : <scalar-logical-expression> ) 

<omp-device> ::= 
           DEVICE ( <scalar-int-expr> ) 
     |     DEVICE ( <omp-device-modifier> : <scalar-int-expr> ) 

<omp-device-modifier> ::= 
           ANCESTOR 
     |     DEVICE_NUM 

<omp-map> ::= 
           MAP ( <omp-locator-list> ) 
     |     MAP ( <omp-map-type> : <omp-locator-list> ) 
     |     MAP ( <map-type-modifier-list> <omp-map-type> : <omp-locator-list> ) 
     |     MAP ( <map-type-modifier-list> , <omp-map-type> : <omp-locator-list> ) 

<omp-map-type> ::= 
           TO 
     |     FROM 
     |     TOFROM 
     |     ALLOC 
     |     RELEASE 
     |     DELETE 

<map-type-modifier-list> ::= 
           <map-type-modifier-list> , <map-type-modifier> 
     |     <map-type-modifier-list> <map-type-modifier> 
     |     <map-type-modifier> 

<map-type-modifier> ::= 
           ALWAYS 
     |     CLOSE 
     |     <omp-mapper-identifier-pair> 

<omp-mapper-identifier-pair> ::= 
           MAPPER <omp-p-mapper-identifier> 

<omp-p-mapper-identifier> ::= 
           ( <omp-mapper-identifier> ) 

<omp-is-device-ptr> ::= 
           IS_DEVICE_PTR ( <omp-list> ) 

<omp-defaultmap> ::= 
           DEFAULTMAP ( <omp-implicit-behavior> ) 
     |     DEFAULTMAP ( <omp-implicit-behavior> : <omp-variable-category> ) 

<omp-implicit-behavior> ::= 
           ALLOC 
     |     TO 
     |     FROM 
     |     TOFROM 
     |     FIRSTPRIVATE 
     |     <NONE> 
     |     DEFAULT 

<omp-variable-category> ::= 
           SCALAR 
     |     AGGREGATE 
     |     ALLOCATABLE 
     |     POINTER 

<omp-depend> ::= 
           DEPEND ( <omp-dependence-type> : <omp-locator-list> ) 
     |     DEPEND ( <omp-depend-modifier> , <omp-dependence-type> : <omp-locator-list> ) 
     |     DEPEND ( SOURCE ) 
     |     DEPEND ( SINK : <omp-locator-list> ) 

<omp-depend-modifier> ::= 
           ITERATOR ( <omp-iterators-definition> ) 

<omp-iterators-definition> ::= 
           <name> = <omp-range-specification> 
     |     <omp-iterator-type> <name> = <omp-range-specification> 

<omp-range-specification> ::= 
           <subscript-triplet> 

<omp-iterator-type> ::= 
           <type-specifier> 

<type-specifier> ::= 
           <type-spec> 
     |     <declaration-type-spec> 

<omp-uses-allocators> ::= 
           USES_ALLOCATORS ( <omp-allocators-traits-list> ) 

<omp-allocators-traits-list> ::= 
           <omp-allocators-traits-list> <omp-allocator-traits> 
     |     <omp-allocator-traits> 

<omp-allocator-traits> ::= 
           <omp-allocator> 
     |     <omp-allocator> ( <omp-allocator-traits-array> ) 

<omp-allocator-traits-array> ::= 
           <name> 

<omp-target-data> ::= 
           TARGET DATA 
     |     TARGET DATA <target-data-clause-list> 

<target-data-clause-list> ::= 
           <target-data-clause-list> , <target-data-clause> 
     |     <target-data-clause-list> <target-data-clause> 
     |     <target-data-clause> 

<target-data-clause> ::= 
           <omp-if-target-data> 
     |     <omp-device> 
     |     <omp-map> 
     |     <omp-use-device-ptr> 
     |     <omp-use-device-addr> 

<omp-if-target-data> ::= 
           <omp-if-cond> 
     |     IF ( TARGET DATA : <scalar-logical-expression> ) 

<omp-use-device-ptr> ::= 
           USE_DEVICE_PTR ( <omp-list> ) 

<omp-use-device-addr> ::= 
           USE_DEVICE_ADDR ( <omp-list> ) 

<omp-target-enter-data> ::= 
           TARGET ENTER DATA 
     |     TARGET ENTER DATA <target-enter-data-clause-list> 

<target-enter-data-clause-list> ::= 
           <target-enter-data-clause-list> , <target-enter-data-clause> 
     |     <target-enter-data-clause-list> <target-enter-data-clause> 
     |     <target-enter-data-clause> 

<target-enter-data-clause> ::= 
           <omp-if-target-enter-data> 
     |     <omp-device> 
     |     <omp-map> 
     |     <omp-depend> 
     |     NOWAIT 

<omp-if-target-enter-data> ::= 
           <omp-if-cond> 
     |     IF ( TARGET ENTER DATA : <scalar-logical-expression> ) 

<omp-target-exit-data> ::= 
           TARGET EXIT DATA 
     |     TARGET EXIT DATA <target-exit-data-clause-list> 

<target-exit-data-clause-list> ::= 
           <target-exit-data-clause-list> , <target-exit-data-clause> 
     |     <target-exit-data-clause-list> <target-exit-data-clause> 
     |     <target-exit-data-clause> 

<target-exit-data-clause> ::= 
           <omp-if-target-exit-data> 
     |     <omp-device> 
     |     <omp-map> 
     |     <omp-depend> 
     |     NOWAIT 

<omp-if-target-exit-data> ::= 
           <omp-if-cond> 
     |     IF ( TARGET EXIT DATA : <scalar-logical-expression> ) 

<omp-target-parallel> ::= 
           TARGET PARALLEL 
     |     TARGET PARALLEL <target-parallel-clause-list> 

<target-parallel-clause-list> ::= 
           <target-parallel-clause-list> , <target-parallel-clause> 
     |     <target-parallel-clause-list> <target-parallel-clause> 
     |     <target-parallel-clause> 

<target-parallel-clause> ::= 
           <omp-if-cond> 
     |     <omp-if-parallel> 
     |     <omp-if-target> 
     |     <omp-num-threads> 
     |     <omp-default> 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-shared> 
     |     <omp-reduction> 
     |     <omp-procedure-bind> 
     |     <omp-device> 
     |     <omp-map> 
     |     <omp-is-device-ptr> 
     |     <omp-defaultmap> 
     |     NOWAIT 
     |     <omp-depend> 

<omp-target-parallel-do> ::= 
           TARGET PARALLEL DO 
     |     TARGET PARALLEL DO <target-parallel-do-clause-list> 

<target-parallel-do-clause-list> ::= 
           <target-parallel-do-clause-list> , <target-parallel-do-clause> 
     |     <target-parallel-do-clause-list> <target-parallel-do-clause> 
     |     <target-parallel-do-clause> 

<target-parallel-do-clause> ::= 
           <target-parallel-clause> 
     |     <omp-lastprivate> 
     |     <omp-linear> 
     |     <omp-schedule> 
     |     <omp-collapse> 
     |     <omp-ordered-clause> 

<omp-target-parallel-do-simd> ::= 
           TARGET PARALLEL DO SIMD 
     |     TARGET PARALLEL DO SIMD <target-parallel-do-simd-clause-list> 

<target-parallel-do-simd-clause-list> ::= 
           <target-parallel-do-simd-clause-list> , <target-parallel-do-simd-clause> 
     |     <target-parallel-do-simd-clause-list> <target-parallel-do-simd-clause> 
     |     <target-parallel-do-simd-clause> 

<target-parallel-do-simd-clause> ::= 
           <target-parallel-clause> 
     |     COPYIN ( <omp-list> ) 
     |     <simd-clause> 

<omp-target-simd> ::= 
           TARGET SIMD 
     |     TARGET SIMD <target-simd-clause-list> 

<target-simd-clause-list> ::= 
           <target-simd-clause-list> , <target-simd-clause> 
     |     <target-simd-clause-list> <target-simd-clause> 
     |     <target-simd-clause> 

<target-simd-clause> ::= 
           <target-clause> 
     |     <simd-clause> 

<omp-target-teams> ::= 
           TARGET TEAMS 
     |     TARGET TEAMS <target-teams-clause-list> 

<target-teams-clause-list> ::= 
           <target-teams-clause-list> , <target-teams-clause> 
     |     <target-teams-clause-list> <target-teams-clause> 
     |     <target-teams-clause> 

<target-teams-clause> ::= 
           <target-clause> 
     |     <teams-clause> 

<teams-clause> ::= 
           <omp-num-teams> 
     |     <omp-thread-limit> 
     |     <omp-team-default> 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-shared> 
     |     <omp-reduction> 
     |     <omp-allocate> 

<omp-num-teams> ::= 
           NUM_TEAMS ( <scalar-int-expr> ) 

<omp-thread-limit> ::= 
           THREAD_LIMIT ( <scalar-int-expr> ) 

<omp-team-default> ::= 
           DEFAULT ( <omp-team-default-option> ) 

<omp-team-default-option> ::= 
           FIRST 
     |     FIRSTPRIVATE 
     |     SHARED 
     |     <NONE> 

<omp-target-teams-distribute> ::= 
           TARGET TEAMS DISTRIBUTE 
     |     TARGET TEAMS DISTRIBUTE <target-teams-distribute-clause-list> 

<target-teams-distribute-clause-list> ::= 
           <target-teams-distribute-clause-list> , <target-teams-distribute-clause> 
     |     <target-teams-distribute-clause-list> <target-teams-distribute-clause> 
     |     <target-teams-distribute-clause> 

<target-teams-distribute-clause> ::= 
           <target-clause> 
     |     <teams-distribute-clause> 

<teams-distribute-clause> ::= 
           <omp-num-teams> 
     |     <omp-thread-limit> 
     |     <omp-team-default> 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-shared> 
     |     <omp-reduction> 
     |     <omp-lastprivate> 
     |     <omp-collapse> 
     |     <omp-dest-schedule> 

<omp-target-teams-distribute-simd> ::= 
           TARGET TEAMS DISTRIBUTE SIMD 
     |     TARGET TEAMS DISTRIBUTE SIMD <target-teams-distribute-simd-clause-list> 

<target-teams-distribute-simd-clause-list> ::= 
           <target-teams-distribute-simd-clause-list> , <target-teams-distribute-simd-clause> 
     |     <target-teams-distribute-simd-clause-list> <target-teams-distribute-simd-clause> 
     |     <target-teams-distribute-simd-clause> 

<target-teams-distribute-simd-clause> ::= 
           <target-clause> 
     |     <teams-distribute-simd-clause> 

<teams-distribute-simd-clause> ::= 
           <teams-clause> 
     |     <omp-distribute-simd-clause> 

<omp-target-teams-distribute-parallel-do> ::= 
           TARGET TEAMS DISTRIBUTE PARALLEL DO 
     |     TARGET TEAMS DISTRIBUTE PARALLEL DO <target-teams-distribute-parallel-do-clause-list> 

<target-teams-distribute-parallel-do-clause-list> ::= 
           <target-teams-distribute-parallel-do-clause-list> , <target-teams-distribute-parallel-do-clause> 
     |     <target-teams-distribute-parallel-do-clause-list> <target-teams-distribute-parallel-do-clause> 
     |     <target-teams-distribute-parallel-do-clause> 

<target-teams-distribute-parallel-do-clause> ::= 
           <target-clause> 
     |     <teams-distribute-parallel-do-clause> 

<teams-distribute-parallel-do-clause> ::= 
           <teams-clause> 
     |     <distribute-parallel-do-clause> 

<omp-target-teams-distribute-parallel-do-simd> ::= 
           TARGET TEAMS DISTRIBUTE PARALLEL DO SIMD 
     |     TARGET TEAMS DISTRIBUTE PARALLEL DO SIMD <target-teams-distribute-parallel-do-simd-clause-list> 

<target-teams-distribute-parallel-do-simd-clause-list> ::= 
           <target-teams-distribute-parallel-do-simd-clause-list> , <target-teams-distribute-parallel-do-simd-clause> 
     |     <target-teams-distribute-parallel-do-simd-clause-list> <target-teams-distribute-parallel-do-simd-clause> 
     |     <target-teams-distribute-parallel-do-simd-clause> 

<target-teams-distribute-parallel-do-simd-clause> ::= 
           <target-clause> 
     |     <teams-distribute-parallel-do-simd-clause> 

<teams-distribute-parallel-do-simd-clause> ::= 
           <teams-clause> 
     |     <distribute-parallel-do-simd-clause> 

<omp-target-parallel-loop> ::= 
           TARGET PARALLEL LOOP 
     |     TARGET PARALLEL LOOP <target-parallel-loop-clause-list> 

<target-parallel-loop-clause-list> ::= 
           <target-parallel-loop-clause-list> , <omp-target-parallel-loop-clause> 
     |     <target-parallel-loop-clause-list> <omp-target-parallel-loop-clause> 
     |     <omp-target-parallel-loop-clause> 

<omp-target-parallel-loop-clause> ::= 
           <target-parallel-clause> 
     |     <omp-loop-clause> 

<omp-target-teams-loop> ::= 
           TARGET TEAMS LOOP 
     |     TARGET TEAMS LOOP <target-teams-loop-clause-list> 

<target-teams-loop-clause-list> ::= 
           <target-teams-loop-clause-list> , <omp-target-teams-loop-clause> 
     |     <target-teams-loop-clause-list> <omp-target-teams-loop-clause> 
     |     <omp-target-teams-loop-clause> 

<omp-target-teams-loop-clause> ::= 
           <target-teams-clause> 
     |     <omp-loop-clause> 

<omp-target-update> ::= 
           TARGET UPDATE 
     |     TARGET UPDATE <target-update-clause-list> 

<target-update-clause-list> ::= 
           <target-update-clause-list> , <target-update-clause> 
     |     <target-update-clause-list> <target-update-clause> 
     |     <target-update-clause> 

<target-update-clause> ::= 
           <omp-if-target-update> 
     |     <omp-device> 
     |     NOWAIT 
     |     <omp-depend> 
     |     <omp-motion-clause> 

<omp-if-target-update> ::= 
           <omp-if-cond> 
     |     IF ( TARGET UPDATE : <scalar-logical-expression> ) 

<omp-motion-clause> ::= 
           <omp-to> 
     |     <omp-from> 

<omp-to> ::= 
           TO ( <omp-list> ) 
     |     TO ( <omp-mapper-identifier-pair> : <omp-list> ) 

<omp-from> ::= 
           FROM ( <omp-list> ) 
     |     FROM ( <omp-mapper-identifier-pair> : <omp-list> ) 

<omp-taskgroup> ::= 
           TASKGROUP 
     |     TASKGROUP <omp-taskgroup-clause-list> 

<omp-taskgroup-clause-list> ::= 
           <omp-taskgroup-clause-list> , <omp-taskgroup-clause> 
     |     <omp-taskgroup-clause-list> <omp-taskgroup-clause> 
     |     <omp-taskgroup-clause> 

<omp-taskgroup-clause> ::= 
           <omp-task-reduction> 
     |     <omp-allocate> 

<omp-task-reduction> ::= 
           TASK_REDUCTION ( <reduction-identifier> : <omp-list> ) 

<omp-task> ::= 
           TASK 
     |     TASK <task-clause-list> 

<task-clause-list> ::= 
           <task-clause-list> , <task-clause> 
     |     <task-clause-list> <task-clause> 
     |     <task-clause> 

<task-clause> ::= 
           <omp-if-cond> 
     |     <omp-if-task> 
     |     <omp-final> 
     |     UNTIED 
     |     <task-default> 
     |     MERGEABLE 
     |     <omp-private> 
     |     <omp-firstprivate> 
     |     <omp-shared> 
     |     <omp-in-reduction> 
     |     <omp-depend> 
     |     <omp-priority> 
     |     <omp-allocate> 
     |     <omp-affinity> 
     |     <omp-detach> 

<task-default> ::= 
           DEFAULT ( PRIVATE ) 
     |     DEFAULT ( FIRSTPRIVATE ) 
     |     DEFAULT ( SHARED ) 
     |     DEFAULT ( <NONE> ) 

<omp-affinity> ::= 
           AFFINITY ( <omp-locator-list> ) 
     |     AFFINITY ( <omp-aff-modifier> : <omp-locator-list> ) 

<omp-aff-modifier> ::= 
           <omp-depend-modifier> 

<omp-detach> ::= 
           DETACH ( <omp-event-handle> ) 

<omp-event-handle> ::= 
           <omp-var> 

<omp-taskloop> ::= 
           TASKLOOP 
     |     TASKLOOP <taskloop-clause-list> 

<taskloop-clause-list> ::= 
           <taskloop-clause-list> , <taskloop-clause> 
     |     <taskloop-clause-list> <taskloop-clause> 
     |     <taskloop-clause> 

<omp-taskloop-simd> ::= 
           TASKLOOP SIMD 
     |     TASKLOOP SIMD <taskloop-simd-clause-list> 

<taskloop-simd-clause-list> ::= 
           <taskloop-simd-clause-list> , <taskloop-simd-clause> 
     |     <taskloop-simd-clause-list> <taskloop-simd-clause> 
     |     <taskloop-simd-clause> 

<taskloop-simd-clause> ::= 
           <taskloop-clause> 
     |     <simd-clause> 

<omp-taskwait> ::= 
           TASKWAIT 
     |     TASKWAIT <omp-taskwait-clause-list> 

<omp-taskwait-clause-list> ::= 
           <omp-taskwait-clause-list> , <omp-taskwait-clause> 
     |     <omp-taskwait-clause-list> <omp-taskwait-clause> 
     |     <omp-taskwait-clause> 

<omp-taskwait-clause> ::= 
           <omp-depend-clause> 
     |     NOWAIT 

<omp-depend-clause> ::= 
           DEPEND ( <omp-dependence-type> : <actual-arg-spec-list> ) 
     |     DEPEND ( <omp-depend-modifier> , <omp-dependence-type> : <actual-arg-spec-list> ) 

<omp-taskyield> ::= 
           TASKYIELD 

<omp-teams> ::= 
           TEAMS 
     |     TEAMS <teams-clause-list> 

<teams-clause-list> ::= 
           <teams-clause-list> , <teams-clause> 
     |     <teams-clause-list> <teams-clause> 
     |     <teams-clause> 

<omp-teams-distribute> ::= 
           TEAMS DISTRIBUTE 
     |     TEAMS DISTRIBUTE <teams-distribute-clause-list> 

<teams-distribute-clause-list> ::= 
           <teams-distribute-clause-list> , <teams-distribute-clause> 
     |     <teams-distribute-clause-list> <teams-distribute-clause> 
     |     <teams-distribute-clause> 

<omp-teams-loop> ::= 
           TEAMS LOOP 
     |     TEAMS LOOP <teams-loop-clause-list> 

<teams-loop-clause-list> ::= 
           <teams-loop-clause-list> , <omp-teams-loop-clause> 
     |     <teams-loop-clause-list> <omp-teams-loop-clause> 
     |     <omp-teams-loop-clause> 

<omp-teams-loop-clause> ::= 
           <teams-clause> 
     |     <omp-loop-clause> 

<omp-teams-distribute-parallel-do> ::= 
           TEAMS DISTRIBUTE PARALLEL DO 
     |     TEAMS DISTRIBUTE PARALLEL DO <teams-distribute-parallel-do-clause-list> 

<teams-distribute-parallel-do-clause-list> ::= 
           <teams-distribute-parallel-do-clause-list> , <teams-distribute-parallel-do-clause> 
     |     <teams-distribute-parallel-do-clause-list> <teams-distribute-parallel-do-clause> 
     |     <teams-distribute-parallel-do-clause> 

<omp-teams-distribute-parallel-do-simd> ::= 
           TEAMS DISTRIBUTE PARALLEL DO SIMD 
     |     TEAMS DISTRIBUTE PARALLEL DO SIMD <teams-distribute-parallel-do-simd-clause-list> 

<teams-distribute-parallel-do-simd-clause-list> ::= 
           <teams-distribute-parallel-do-simd-clause-list> , <teams-distribute-parallel-do-simd-clause> 
     |     <teams-distribute-parallel-do-simd-clause-list> <teams-distribute-parallel-do-simd-clause> 
     |     <teams-distribute-parallel-do-simd-clause> 

<omp-teams-distribute-simd> ::= 
           TEAMS DISTRIBUTE SIMD 
     |     TEAMS DISTRIBUTE SIMD <teams-distribute-simd-clause-list> 

<teams-distribute-simd-clause-list> ::= 
           <teams-distribute-simd-clause-list> , <teams-distribute-simd-clause> 
     |     <teams-distribute-simd-clause-list> <teams-distribute-simd-clause> 
     |     <teams-distribute-simd-clause> 

<omp-threadprivate> ::= 
           THREADPRIVATE ( <omp-list> ) 

<omp-workshare> ::= 
           WORKSHARE 

structured-block ::= 
           <block> 

<block> ::= 
           <block> <executable-construct;> 
     |     <block> <omp-directive> 
     |     <block> <special-stmt;> 
     |     <executable-construct;> 
     |     <omp-directive> 
     |     <special-stmt;> 
     |     <block> <label> <executable-construct;> 
     |     <label> <executable-construct;> 

<executable-construct;> ::= 
           <execution-part-construct> 

<execution-part-construct> ::= 
           <action-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <associate-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <block-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <case-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <change-team-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <critical-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <do-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <forall-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <if-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <select-rank-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <select-type-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <where-construct> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <entry-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <data-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */
     |     <erroneous-stmt> <;>   /* Tr.onConstruct($$(0),$$(1)); */

<action-stmt> ::= 
           <allocate-stmt> 
     |     <assign-stmt> 
     |     <assignment-stmt> 
     |     <backspace-stmt> 
     |     <call-stmt> 
     |     <close-stmt> 
     |     <cycle-stmt> 
     |     <deallocate-stmt> 
     |     <define-file-unit-stmt> 
     |     <endfile-stmt> 
     |     <error-stop-stmt> 
     |     <exit-stmt> 
     |     <event-post-stmt> 
     |     <event-wait-stmt> 
     |     <fail-image-stmt> 
     |     <flush-stmt> 
     |     <form-team-stmt> 
     |     <forall-stmt> 
     |     <goto-stmt> 
     |     <if-stmt> 
     |     <inquire-stmt> 
     |     <lock-stmt> 
     |     <nullify-stmt> 
     |     <open-stmt> 
     |     <pause-stmt> 
     |     <pointer-assignment-stmt> 
     |     <print-stmt> 
     |     <read-stmt> 
     |     <return-stmt> 
     |     <rewind-stmt> 
     |     <stop-stmt> 
     |     <sync-all-stmt> 
     |     <sync-images-stmt> 
     |     <sync-memory-stmt> 
     |     <sync-team-stmt> 
     |     <unlock-stmt> 
     |     <wait-stmt> 
     |     <where-stmt> 
     |     <write-stmt> 
     |     <arithmetic-if-stmt> 
     |     <computed-goto-stmt> 
     |     continue-stmt 

<allocate-stmt> ::= 
           ALLOCATE <p-allocation-list> 
     |     ALLOCATE <p-type-allocation-list> 

<p-allocation-list> ::= 
           ( <allocation-list> ) 
     |     ( <allocation-list> <,> <allocation-option-list> ) 

<allocation-list> ::= 
           <allocation-list> <,> <allocation> 
     |     <allocation> 

<allocation> ::= 
           <allocate-object> 

<allocate-object> ::= 
           <structure-component> 

<structure-component> ::= 
           <data-ref> 

<allocation-option-list> ::= 
           <allocation-option-list> <,> <alloc-opt> 
     |     <alloc-opt> 

<alloc-opt> ::= 
           ERRMSG = <errmsg-variable> 
     |     MOLD = <source-expr> 
     |     SOURCE = <source-expr> 
     |     STAT = <stat-variable> 

<errmsg-variable> ::= 
           <expr> 

<source-expr> ::= 
           <expr> 

<p-type-allocation-list> ::= 
           ( <type-allocation-list> ) 
     |     ( <type-allocation-list> <,> <allocation-option-list> ) 

<type-allocation-list> ::= 
           <type-spec> <::> <allocation> 
     |     <type-allocation-list> <,> <allocation> 

<assign-stmt> ::= 
           ASSIGN <LABEL> TO <name>   /* Tr.onAssignLabel($$(0),$$(2),$$(4)); */

<assignment-stmt> ::= 
           <designator-l> = <expr> 
     |     <designator-l> = <erroneous-stmt> 

<designator-l> ::= 
           <data-ref-l> 

<data-ref-l> ::= 
           <part-ref-l> <%> <data-ref-l> -: { <%> } 
     |     <part-ref-l> <.> <data-ref> -: { <.> } 
     |     <part-ref-l> 
     |     <function-declaration> 

<part-ref-l> ::= 
           <part-name-l> 
     |     <part-name-l> <image-selector-l> -: { ( } 
     |     <part-name-l> <image-selector-l> <p-substring-range-l> 
     |     <part-name-p-section-subscript-list-l> 
     |     <part-name-p-section-subscript-list-l> <p-substring-range-l> 
     |     <part-name-p-section-subscript-list-l> <image-selector-l> -: { ( } 
     |     <part-name-p-section-subscript-list-l> <image-selector-l> <p-substring-range-l> 

<part-name-l> ::= 
           <name-l> 

<image-selector-l> ::= 
           <lbracket> <cosubscript-list> <rbracket> 
     |     <lbracket> <cosubscript-list> , <image-selector-spec-list> <rbracket> 

<p-substring-range-l> ::= 
           ( <substring-range> ) 

<part-name-p-section-subscript-list-l> ::= 
           <part-name-l> <p-section-subscript-list-l> 
     |     <procedure-name-l> <p-actual-arg-spec-list-l> -: { ( | <lbracket> } 
     |     <procedure-name-l> ( ) -: { ( | <%> | <lbracket> } 

<p-section-subscript-list-l> ::= 
           ( <section-subscript-list> ) 

<procedure-name-l> ::= 
           <name-l> 

<p-actual-arg-spec-list-l> ::= 
           ( <actual-arg-spec-list> ) 
     |     ( <actual-arg-spec-list> <,> <named-arg-spec-list-l> ) 
     |     ( <named-arg-spec-list-l> ) 

<named-arg-spec-list-l> ::= 
           <named-arg-spec-list-l> <,> <named-arg-spec-l> 
     |     <named-arg-spec-l> 

<named-arg-spec-l> ::= 
           keyword = <actual-arg> 

<function-declaration> ::= 
           <part-name-l> <p-name-list-l> +: { = } 

<p-name-list-l> ::= 
           ( <name-list-l> ) 

<name-list-l> ::= 
           <name-list-l> , <name> 
     |     <name> 

<backspace-stmt> ::= 
           BACKSPACE <p-position-spec-list> 
     |     BACKSPACE <file-unit-number> 

<p-position-spec-list> ::= 
           ( <file-unit-number> <,> <position-spec-list> ) 
     |     ( <file-unit-number> ) 
     |     ( <position-spec-list> ) 

<file-unit-number> ::= 
           <expr> 

<position-spec-list> ::= 
           <position-spec-list> <,> <position-spec> 
     |     <position-spec> 

<position-spec> ::= 
           UNIT = <file-unit-number> 
     |     IOMSG = <iomsg-variable> 
     |     IOSTAT = <scalar-int-variable> 
     |     ERR = <label> 

<iomsg-variable> ::= 
           <expr> 

<call-stmt> ::= 
           CALL <function-reference> 

<close-stmt> ::= 
           CLOSE <p-close-spec-list> 

<p-close-spec-list> ::= 
           ( <file-unit-number> ) 
     |     ( <file-unit-number> <,> <close-spec-list> ) 
     |     ( <close-spec-list> ) 

<close-spec-list> ::= 
           <close-spec-list> <,> <close-spec> 
     |     <close-spec> 

<close-spec> ::= 
           UNIT = <file-unit-number> 
     |     IOSTAT = <variable> 
     |     IOMSG = <iomsg-variable> 
     |     ERR = <label> 
     |     STATUS = <expr> 

<cycle-stmt> ::= 
           CYCLE 
     |     CYCLE <construct-name> 

<construct-name> ::= 
           <name> 

<deallocate-stmt> ::= 
           DEALLOCATE <p-allocation-list> 

<define-file-unit-stmt> ::= 
           DEFINE FILE UNIT <p-u-control-spec-list> 

<p-u-control-spec-list> ::= 
           ( <u-control-spec-list> ) 

<u-control-spec-list> ::= 
           <u-control-spec-list> <,> <u-control-spec> 
     |     <u-control-spec> 

<u-control-spec> ::= 
           <expr> 

<endfile-stmt> ::= 
           ENDFILE <file-unit-number> 
     |     ENDFILE <p-position-spec-list> 

<error-stop-stmt> ::= 
           <ERROR> STOP 
     |     <ERROR> STOP <stop-code> 

<stop-code> ::= 
           <expr> 

<exit-stmt> ::= 
           EXIT 
     |     EXIT <construct-name> 

<event-post-stmt> ::= 
           EVENT POST ( <event-variable> ) 
     |     EVENT POST ( <event-variable> , <sync-stat-list> ) 

<event-variable> ::= 
           <data-ref> 

<sync-stat-list> ::= 
           <sync-stat-list> <,> <sync-stat> 
     |     <sync-stat> 

<sync-stat> ::= 
           STAT = <int-variable> 
     |     ERRMSG = <char-variable> 

<int-variable> ::= 
           <variable> 

<char-variable> ::= 
           <variable> 

<event-wait-stmt> ::= 
           EVENT WAIT ( <event-variable> ) 
     |     EVENT WAIT ( <event-variable> , <wait-stat-list> ) 

<wait-stat-list> ::= 
           <wait-stat-list> <,> <wait-stat> 
     |     <wait-stat> 

<wait-stat> ::= 
           STAT = <int-variable> 
     |     ERRMSG = <char-variable> 
     |     UNTIL_COUNT = <int-variable> 

<fail-image-stmt> ::= 
           FAIL IMAGE 

<flush-stmt> ::= 
           FLUSH <p-position-spec-list> 
     |     FLUSH <file-unit-number> 

<form-team-stmt> ::= 
           FORM TEAM ( <team-number> , <team-variable> ) 
     |     FORM TEAM ( <team-number> , <team-variable> , <form-team-spec-list> ) 

<team-number> ::= 
           <scalar-int-expr> 

<team-variable> ::= 
           <variable> 

<form-team-spec-list> ::= 
           <form-team-spec-list> , <form-team-spec> 
     |     <form-team-spec> 

<form-team-spec> ::= 
           NEW_INDEX = <scalar-int-expr> 
     |     <sync-stat> 

<forall-stmt> ::= 
           FORALL <forall-header> <forall-assignment-stmt> 

<forall-header> ::= 
           ( <forall-triplet-spec-list> ) 
     |     ( <type-spec> <::> <forall-triplet-spec-list> ) 
     |     <erroneous-stmt> 

<forall-triplet-spec-list> ::= 
           <forall-triplet-spec-list> <,> <forall-triplet-spec> 
     |     <forall-triplet-spec-list> <,> <expr> +: { ) } 
     |     <forall-triplet-spec> 

<forall-triplet-spec> ::= 
           <assign> : <upper-bound> 
     |     <assign> : <upper-bound> : <step> 

<step> ::= 
           <expr> 

<forall-assignment-stmt> ::= 
           <assignment-stmt> 
     |     <pointer-assignment-stmt> 

<pointer-assignment-stmt> ::= 
           <pointer-object-l> <=rangle> <data-target> 

<pointer-object-l> ::= 
           <part-ref-l> <%> <pointer-object> -: { <%> } 
     |     <pointer-ref-l> <%> <pointer-object> -: { <%> } 
     |     <pointer-ref-l> 

<pointer-object> ::= 
           <part-ref-l> <%> <pointer-object> -: { <%> } 
     |     <pointer-ref> <%> <pointer-object> -: { <%> } 
     |     <pointer-ref> 

<pointer-ref> ::= 
           <name> 
     |     <name> <p-bounds-spec-list> 
     |     <name> <p-bounds-remapping-list> 

<p-bounds-spec-list> ::= 
           ( <bounds-spec-list> ) 

<bounds-spec-list> ::= 
           <bounds-spec-list> <,> <bounds-spec> 
     |     <bounds-spec> 

<bounds-spec> ::= 
           <expr> : 

<p-bounds-remapping-list> ::= 
           ( <bounds-remapping-list> ) 

<bounds-remapping-list> ::= 
           <bounds-remapping-list> <,> <bounds-remapping> 
     |     <bounds-remapping> 

<bounds-remapping> ::= 
           <expr> : <expr> 

<pointer-ref-l> ::= 
           <name-l> 
     |     <name-l> <p-bounds-spec-list> 
     |     <name-l> <p-bounds-remapping-list> 

<goto-stmt> ::= 
           GO TO <LABEL> 
     |     GOTO <LABEL> 

<if-stmt> ::= 
           <if-expr> <action-stmt> 

<if-expr> ::= 
           IF <p-expr> 

<inquire-stmt> ::= 
           INQUIRE <p-inquire-spec-list> 
     |     <inquire-p-inquire-length> <output-item-list> 

<p-inquire-spec-list> ::= 
           ( <inquire-spec-list> ) 
     |     ( <inquire-spec-list> <,> <inquire-named-spec-list> ) 
     |     ( <inquire-named-spec-list> ) 

<inquire-spec-list> ::= 
           <inquire-spec-list> <,> <inquire-spec> 
     |     <inquire-spec> 

<inquire-spec> ::= 
           <file-unit-number> 

<inquire-named-spec-list> ::= 
           <inquire-named-spec-list> <,> <inquire-named-spec> 
     |     <inquire-named-spec> 

<inquire-named-spec> ::= 
           UNIT = <file-unit-number> 
     |     FILE = <file-name-expr> 
     |     ACCESS = <char-variable> 
     |     ACTION = <char-variable> 
     |     ASYNCHRONOUS = <char-variable> 
     |     BLANK = <char-variable> 
     |     DECIMAL = <char-variable> 
     |     DELIM = <char-variable> 
     |     DIRECT = <char-variable> 
     |     DIRECTORY = <char-variable> 
     |     ENCODING = <char-variable> 
     |     ERR = <LABEL> 
     |     EXIST = <logical-variable> 
     |     FORM = <char-variable> 
     |     FORMATTED = <char-variable> 
     |     ID = <int-variable> 
     |     IOMSG = <iomsg-variable> 
     |     IOSTAT = <int-variable> 
     |     NAME = <char-variable> 
     |     NAMED = <logical-variable> 
     |     NEXTREC = <int-variable> 
     |     NUMBER = <int-variable> 
     |     OPENED = <logical-variable> 
     |     PAD = <char-variable> 
     |     PENDING = <logical-variable> 
     |     POS = <int-variable> 
     |     POSITION = <char-variable> 
     |     READ = <char-variable> 
     |     READWRITE = <char-variable> 
     |     RECL = <int-variable> 
     |     ROUND = <char-variable> 
     |     SEQUENTIAL = <char-variable> 
     |     SIGN = <char-variable> 
     |     SIZE = <int-variable> 
     |     STREAM = <char-variable> 
     |     UNFORMATTED = <char-variable> 
     |     WRITE = <char-variable> 
     |     <inquire-extension> = <expr> 

<file-name-expr> ::= 
           <expr> 

<logical-variable> ::= 
           <variable> 

<inquire-extension> ::= 
           ASSOCIATEVARIABLE 
     |     BLOCKSIZE 
     |     BUFFERCOUNT 
     |     CARRIAGECONTROL 
     |     DEFAULTFILE 
     |     DISPOSE 
     |     EXTENDSIZE 
     |     INITIALSIZE 
     |     <KEY> 
     |     MAXREC 
     |     NOSPANBLOCKS 
     |     ORGANIZATION 
     |     RECORDTYPE 
     |     RECORDSIZE 
     |     SHARE 
     |     USEROPEN 
     |     TYPE 

<inquire-p-inquire-length> ::= 
           INQUIRE <p-inquire-length> 

<p-inquire-length> ::= 
           ( <inquire-length> ) 

<inquire-length> ::= 
           IOLENGTH = <variable> 

<output-item-list> ::= 
           <output-item-list> <,> <output-item> 
     |     <output-item> 

<output-item> ::= 
           <expr> 
     |     <io-implied-do> 

<io-implied-do> ::= 
           ( <io-implied-do-object-list> <,> <io-implied-do-control> ) 
     |     ( <p-io-implied-do-object-list> <,> <io-implied-do-control> ) 

<io-implied-do-object-list> ::= 
           <io-implied-do-object-list> <,> <io-implied-do-object> 
     |     <io-implied-do-object> 

<io-implied-do-object> ::= 
           <input-item> 
     |     <output-item> 

<input-item> ::= 
           <variable> 
     |     <io-implied-do> 

<io-implied-do-control> ::= 
           <do-variable> = <scalar-int-expr> <,> <scalar-int-expr> 
     |     <do-variable> = <scalar-int-expr> <,> <scalar-int-expr> <,> <scalar-int-expr> 

<do-variable> ::= 
           <name> 

<p-io-implied-do-object-list> ::= 
           ( <io-implied-do-object-list> ) 

<lock-stmt> ::= 
           LOCK <p-variable> 
     |     LOCK <p-lock-arguments> 

<p-variable> ::= 
           ( <variable> ) 

<p-lock-arguments> ::= 
           ( <variable> ) 
     |     ( <variable> <,> <lock-stat-list> ) 

<lock-stat-list> ::= 
           <lock-stat-list> <,> <lock-stat> 
     |     <lock-stat> 

<lock-stat> ::= 
           ACQUIRED_LOCK = <variable> 
     |     <sync-stat> 

<nullify-stmt> ::= 
           NULLIFY <p-pointer-object-list> 

<p-pointer-object-list> ::= 
           <p-object-list> 

<p-object-list> ::= 
           ( <object-list> ) 

<object-list> ::= 
           <object-list> <,> <object> 
     |     <object> 

<object> ::= 
           <structure-component> 

<open-stmt> ::= 
           OPEN <p-connect-spec-list> 

<p-connect-spec-list> ::= 
           ( <file-unit-number> ) 
     |     ( <file-unit-number> <,> <connect-spec-list> ) 
     |     ( <connect-spec-list> ) 
     |     ( <connect-spec-list> <,> <connect-flag-list> ) 

<connect-spec-list> ::= 
           <connect-spec-list> <,> <connect-spec> 
     |     <connect-spec> 

<connect-spec> ::= 
           UNIT = <file-unit-number> 
     |     ACCESS = <expr> 
     |     ACTION = <expr> 
     |     ASYNCHRONOUS = <expr> 
     |     BLANK = <expr> 
     |     DECIMAL = <expr> 
     |     DELIM = <expr> 
     |     ENCODING = <expr> 
     |     ERR = <label> 
     |     FILE = <expr> 
     |     FORM = <expr> 
     |     IOMSG = <variable> 
     |     IOSTAT = <variable> 
     |     NEWUNIT = <variable> 
     |     PAD = <expr> 
     |     POSITION = <expr> 
     |     RECL = <expr> 
     |     ROUND = <expr> 
     |     SIGN = <expr> 
     |     STATUS = <expr> 
     |     <connect-extension> = <expr> 

<connect-extension> ::= 
           ASSOCIATEVARIABLE 
     |     BLOCKSIZE 
     |     BUFFERCOUNT 
     |     CARRIAGECONTROL 
     |     CONVERT 
     |     DEFAULTFILE 
     |     DISPOSE 
     |     EXTENDSIZE 
     |     INITIALSIZE 
     |     <KEY> 
     |     MAXREC 
     |     NAME 
     |     NOSPANBLOCKS 
     |     ORGANIZATION 
     |     RECORDTYPE 
     |     RECORDSIZE 
     |     SHARE 
     |     USEROPEN 
     |     TYPE 

<connect-flag-list> ::= 
           <connect-flag-list> <,> <connect-flag> 
     |     <connect-flag-list> <,> <connect-spec> 
     |     <connect-flag> 

<connect-flag> ::= 
           NOSHARED 
     |     SHARED-2 
     |     READONLY 

<pause-stmt> ::= 
           PAUSE 
     |     PAUSE <stop-code> 

<print-stmt> ::= 
           PRINT <format>   /*Tr.onPrint($$(0),$$(2)); */
     |     PRINT <format> <,> <output-item-list>   /*Tr.onPrint($$(0),$$(2),$$(4)); */
     |     <dec-print-stmt> 

<format> ::= 
           <char-expr> 
     |     <label> 
     |     <label-do> 
     |     * 

<char-expr> ::= 
           <expr> 

<dec-print-stmt> ::= 
           TYPE_DEC <format> +: <;>   /*Tr.onPrint($$(0),$$(2)); */
     |     TYPE_DEC <format> <,> <output-item-list>   /*Tr.onPrint($$(0),$$(2),$$(4)); */
     |     <type-dec> <format> +: <;>   /*Tr.onPrint($$(0),$$(2)); */
     |     <type-dec> <format> <,> <output-item-list>   /*Tr.onPrint($$(0),$$(2),$$(4)); */

<type-dec> ::= 
           TYPE -: { <name-l> | <name-r> | % | ( | <lbracket> } 

<read-stmt> ::= 
           <read-control> 
     |     <read-control> <input-item-list> 
     |     <read-control> <,> <input-item-list>   /* Tr.warning(L"Extraneous ',' before the i/o item list, it's non standard."); */
     |     <read-format> 
     |     <read-format> <,> <input-item-list> 

<read-control> ::= 
           READ2 <p-i-control-spec-list> -: { <unary-op> } 

<p-i-control-spec-list> ::= 
           ( <i-control-spec-list> ) 
     |     ( <i-control-spec-list> <,> <i-control-named-spec-list> ) 
     |     ( <i-control-named-spec-list> ) 

<i-control-spec-list> ::= 
           <io-unit> <,> <i-control-spec>   /*Tr.onControlSpec($$(0),$$(1),$$(3),'I'); */
     |     <io-unit> 

<io-unit> ::= 
           <file-unit-number> 
     |     * 

<i-control-spec> ::= 
           <format> 
     |     <namelist-group-name> 

<namelist-group-name> ::= 
           <name> 

<i-control-named-spec-list> ::= 
           <i-control-named-spec-list> <,> <i-control-named-spec> 
     |     <i-control-named-spec> 

<i-control-named-spec> ::= 
           UNIT = <io-unit> 
     |     FMT = <format>   /*Tr.onFormatSpec($$(0),$$(1),$$(3), 'I' ); */
     |     NML = <namelist-group-name> 
     |     ADVANCE = <char-expr> 
     |     ASYNCHRONOUS = <char-expr> 
     |     BLANK = <char-expr> 
     |     DECIMAL = <char-expr> 
     |     DELIM = <char-expr> 
     |     END = <label> 
     |     EOR = <label> 
     |     ERR = <label> 
     |     ID = <int-variable> 
     |     IOMSG = <iomsg-variable> 
     |     IOSTAT = <int-variable> 
     |     PAD = <char-expr> 
     |     POS = <int-expr> 
     |     REC = <int-expr> 
     |     ROUND = <char-expr> 
     |     SIGN = <char-expr> 
     |     SIZE = <int-variable> 

<int-expr> ::= 
           <expr> 

<input-item-list> ::= 
           <input-item-list> <,> <input-item> 
     |     <input-item> 

<read-format> ::= 
           <read> <format> +: { <;> | <,> }   /*Tr.onReadFormat($$(0),$$(2)); */

<read> ::= 
           READ2 -: { ( | % | <lbracket> } 

<return-stmt> ::= 
           RETURN 
     |     RETURN <int-expr> 

<rewind-stmt> ::= 
           REWIND <p-position-spec-list> 
     |     REWIND <file-unit-number> 

<stop-stmt> ::= 
           STOP 
     |     STOP <stop-code> 

<sync-all-stmt> ::= 
           SYNC ALL 
     |     SYNC ALL ( ) 
     |     SYNC ALL <p-sync-stat-list> 

<p-sync-stat-list> ::= 
           ( <sync-stat-list> ) 

<sync-images-stmt> ::= 
           SYNC IMAGES ( <sync-image-stat-list> ) 

<sync-image-stat-list> ::= 
           <sync-image-stat-list> <,> <sync-stat> 
     |     <image-set> 

<image-set> ::= 
           <int-expr> 
     |     * 

<sync-memory-stmt> ::= 
           SYNC MEMORY 
     |     SYNC MEMORY ( ) 
     |     SYNC MEMORY ( <sync-stat-list> ) 

<sync-team-stmt> ::= 
           SYNC TEAM ( <team-value> ) 
     |     SYNC TEAM ( <team-value> , <sync-stat-list> ) 

<unlock-stmt> ::= 
           UNLOCK <p-sync-unlock-stat-list> 

<p-sync-unlock-stat-list> ::= 
           ( <variable> ) 
     |     ( <variable> <,> <sync-stat-list> ) 

<wait-stmt> ::= 
           WAIT <p-wait-spec-list> 

<p-wait-spec-list> ::= 
           ( <file-unit-number> ) 
     |     ( <file-unit-number> <,> <wait-spec-list> ) 
     |     ( <wait-spec-list> ) 

<wait-spec-list> ::= 
           <wait-spec-list> <,> <wait-spec> 
     |     <wait-spec> 

<wait-spec> ::= 
           UNIT = <file-unit-number> 
     |     END = <LABEL> 
     |     EOR = <LABEL> 
     |     ERR = <LABEL> 
     |     ID = <scalar-int-expr> 
     |     IOMSG = <variable> 
     |     IOSTAT = <variable> 

<where-stmt> ::= 
           <where-p-expr> <assignment-stmt> 

<where-p-expr> ::= 
           WHERE <p-expr> 

<write-stmt> ::= 
           <write-control> 
     |     <write-control> <output-item-list> 
     |     <write-control> <,> <output-item-list>   /* Tr.warning(L"Extraneous ',' before the i/o item list, it's non standard."); */

<write-control> ::= 
           WRITE2 <p-o-control-spec-list> 

<p-o-control-spec-list> ::= 
           ( <o-control-spec-list> ) 
     |     ( <o-control-spec-list> <,> <o-control-named-spec-list> ) 
     |     ( <o-control-named-spec-list> ) 

<o-control-spec-list> ::= 
           <io-unit> <,> <o-control-spec>   /*Tr.onControlSpec($$(0),$$(1),$$(3), 'O' ); */
     |     <io-unit> 

<o-control-spec> ::= 
           <format> 
     |     <namelist-group-name> 

<o-control-named-spec-list> ::= 
           <o-control-named-spec-list> <,> <o-control-named-spec> 
     |     <o-control-named-spec> 

<o-control-named-spec> ::= 
           UNIT = <io-unit> 
     |     FMT = <format>   /*Tr.onFormatSpec($$(0),$$(1),$$(3), 'O' ); */
     |     NML = <namelist-group-name> 
     |     ADVANCE = <char-expr> 
     |     ASYNCHRONOUS = <char-expr> 
     |     DECIMAL = <char-expr> 
     |     DELIM = <char-expr> 
     |     ERR = <label> 
     |     ID = <int-variable> 
     |     IOMSG = <iomsg-variable> 
     |     IOSTAT = <int-variable> 
     |     POS = <int-expr> 
     |     REC = <int-expr> 
     |     ROUND = <char-expr> 
     |     SIGN = <char-expr> 

<arithmetic-if-stmt> ::= 
           <if-expr>
           <LABEL>
           <,>
           <LABEL>
           <,>
           <LABEL>
           

<computed-goto-stmt> ::= 
           GO TO <p-label-list> <int-expr> 
     |     GO TO <p-label-list> <,> <int-expr> 
     |     GO TO <name> 
     |     GO TO <name> <p-label-list> 
     |     GO TO <name> <,> <p-label-list> 
     |     <goto-p-label-list> <int-expr> 
     |     <goto-p-label-list> <,> <int-expr> 
     |     GOTO <name> 
     |     GOTO <name> <p-label-list> 
     |     GOTO <name> <,> <p-label-list> 

<p-label-list> ::= 
           ( <label-list> ) 

<label-list> ::= 
           <label-list> <,> <LABEL> 
     |     <LABEL> 

<goto-p-label-list> ::= 
           GOTO <p-label-list> 

continue-stmt ::= 
           CONTINUE 

<associate-construct> ::= 
           <associate-stmt> <block> <end-associate-stmt> 
     |     <associate-stmt> <end-associate-stmt> 

<associate-stmt> ::= 
           ASSOCIATE <p-association-list> <;> 
     |     <construct-name-l> : ASSOCIATE <p-association-list> <;> 

<p-association-list> ::= 
           ( <association-list> ) 

<association-list> ::= 
           <association-list> <,> <association> 
     |     <association> 

<association> ::= 
           <associate-name> <=rangle> <expr> 

<associate-name> ::= 
           <name> 

<construct-name-l> ::= 
           <name-l> 

<end-associate-stmt> ::= 
           end-associate-stmt 
     |     <label> end-associate-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0), L"end-associate-stmt",11,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0), L"end-associate-stmt",11,false);*/

end-associate-stmt ::= 
           END ASSOCIATE 
     |     END ASSOCIATE <construct-name> 
     |     END_ASSOCIATE 
     |     END_ASSOCIATE <construct-name> 

<block-construct> ::= 
           <block-stmt;> <stmts> <end-block-stmt> 
     |     <block-stmt;> <end-block-stmt> 

<block-stmt;> ::= 
           <block-stmt> <;> 

<block-stmt> ::= 
           BLOCK 
     |     <construct-name-l> : BLOCK   /* Tr.onBlock($$(0),$$(1)); */

<end-block-stmt> ::= 
           end-block-stmt 
     |     <label> end-block-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-block-stmt",12,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-block-stmt",12,false);*/

end-block-stmt ::= 
           END BLOCK -: { <name> }   /* Tr.onEndBlock($$(0),NULL); */
     |     END BLOCK <construct-name>   /* Tr.onEndBlock($$(0),str(3)); */
     |     END_BLOCK -: { <name> }   /* Tr.onEndBlock($$(0),NULL); */
     |     END_BLOCK <construct-name>   /* Tr.onEndBlock($$(0),str(2)); */

<case-construct> ::= 
           <select-case-stmt> <end-select-stmt> 
     |     <select-case-stmt> <case-blocks> <end-select-stmt> 

<select-case-stmt> ::= 
           select-case-stmt <;> 
     |     <construct-name-l> : select-case-stmt <;> 

select-case-stmt ::= 
           SELECT CASE <p-expr> 
     |     SELECT_CASE <p-expr> 

<end-select-stmt> ::= 
           end-select-stmt 
     |     <label> end-select-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-select-stmt",15,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-select-stmt",15,false);*/

end-select-stmt ::= 
           END SELECT 
     |     END SELECT <construct-name> 
     |     END_SELECT 
     |     END_SELECT <construct-name> 

<case-blocks> ::= 
           <case-block> 

<case-block> ::= 
           <case-block> <special-stmt;> 
     |     <case-block> <executable-construct;> 
     |     <case-block> <label> <executable-construct;> 
     |     <case-block> <omp-directive> 
     |     <case-block> <case-stmt> 
     |     <case-block> <label> <case-stmt> 
     |     <label> <case-stmt> 
     |     <case-stmt> 

<special-stmt;> ::= 
           <format-stmt> <;> 
     |     <include-stmt> <;> 
     |     <label> <include-stmt> <;> 

<format-stmt> ::= 
           <label-format> <format-specification>   /* Tr.ParsedFormatStmt($$(0), $$(1),$$(2),true); */
     |     <label-format> <erroneous-stmt>   /* Tr.ParsedFormatStmt($$(0), $$(1),$$(2),false); */

<label-format> ::= 
           <labeled_FORMAT>   /* Tr.OnLabelFormatPair($$(0),$$(1)); */

<format-specification> ::= 
           ( ) 
     |     ( <format-items> ) 
     |     ( <unlimited-format-item> ) 
     |     ( <format-items> , <unlimited-format-item> ) 

<format-items> ::= 
           <format-items> , <format-item> 
     |     <format-items> , +: { ) }   /* Tr.warning(L"Last Format Item is Blank."); */
     |     <format-items> <format-item> 
     |     <format-item> 

<format-item> ::= 
           <char-or-edit-desc> +: { , | : | / | ) } 
     |     <r> <data-edit-desc> +: { , | : | / | ) } 
     |     <control-edit-desc> 
     |     ( <format-items> ) +: { , | : | / | ) } 
     |     <r> ( <format-items> ) +: { , | : | / | ) } 
     |     <char-or-edit-desc> +: { <follow-data-edit-desc> }   /* Tr.warning( L"No Comma after the data-edit-descriptor: ", str(1) ); */
     |     <r> <data-edit-desc> +: { <follow-data-edit-desc> }   /* Tr.warning( L"No Comma after the data-edit-descriptor: ", str(2) ); */

<char-or-edit-desc> ::= 
           <data-edit-desc> 
     |     <char-string-edit-desc> 

<data-edit-desc> ::= 
           <fmt{G}w> 
     |     <fmt{I,B,O,Z,G,L,A}w> 
     |     <fmt{I,B,O,Z,F,E,EN,ES,G,D}w . d> 
     |     <fmt{I,B,O,Z}w . d> 
     |     <fmt{F,E,EN,ES,G,D,EX}w . d> 
     |     <fmt{E,EN,ES,G,EX}w . d E e> 
     |     A 
     |     F   /* Tr.warning(L"Positive width required after descriptor F."); synthesize(1); */
     |     G   /* Tr.warning(L"Positive width required after descriptor G."); synthesize(1); */
     |     I   /* Tr.warning(L"Positive width required after descriptor I."); synthesize(1); */
     |     L   /* Tr.warning(L"Positive width required after descriptor L."); synthesize(1); */
     |     Q   /* Tr.warning(L"The Q descriptor (Character Count) is non standard."); synthesize(1); */
     |     <fmt{Q}w . d>   /* Tr.warning(L"The Q descriptor '%s' is non standard.",str(1)); synthesize(1); */
     |     <fmt{E}w . d{D|Q}e>   /* Tr.warning(L"The E descriptor '%s' is non standard.",str(1)); synthesize(1); */
     |     <fmt dt & char-literal-constant> <p-v-list>   /* synthesize(1); syncat(L"(...)"); */
     |     <fmt dt & char-literal-constant> 
     |     DT <p-v-list>   /* synthesize(1); syncat(L"(...)"); */
     |     DT 
     |     $ 
     |     \ 

<p-v-list> ::= 
           ( <v-list> ) 

<v-list> ::= 
           <v-list> , <v> 
     |     <v> 

<v> ::= 
           <signed-int-literal-constant> 

<char-string-edit-desc> ::= 
           <char-literal-constant>   /* Tr. OnCharEditDescriptor(str(1)); synthesize(1); */

<r> ::= 
           <int-literal-constant> 
     |     <sign> <int-literal-constant> 

<control-edit-desc> ::= 
           <position-edit-desc> +: { <,> | : | / | ) } 
     |     <position-edit-desc> +: { <data-edit-desc-first> } 
     |     <sign-edit-desc> +: { <,> | : | / | ) } 
     |     <blank-interp-edit-desc> +: { <,> | : | / | ) } 
     |     <round-edit-desc> +: { <,> | : | / | ) } 
     |     <decimal-edit-desc> +: { <,> | : | / | ) } 
     |     <control-edit-descr-no-comma> 

<position-edit-desc> ::= 
           T <n> 
     |     TL <n> 
     |     TR <n> 
     |     <fmt{T|TL|TR}n> 
     |     <n> X 
     |     X   /* Tr.warning(L"Positive width should precede the position edit descriptor 'X'."); */

<n> ::= 
           <int-literal-constant> 
     |     NONE +: { , | : | / | ) }   /* Tr.error(L"Positive width required after a T, TL, or TR."); */

<data-edit-desc-first> ::= 
           <fmt{G}w> 
     |     <fmt{I,B,O,Z,G,L,A}w> 
     |     <fmt{I,B,O,Z,F,E,EN,ES,G,D}w . d> 
     |     <fmt{I,B,O,Z}w . d> 
     |     <fmt{F,E,EN,ES,G,D,EX}w . d> 
     |     <fmt{E,EN,ES,G,EX}w . d E e> 
     |     A 
     |     <fmt dt & char-literal-constant> 
     |     DT 
     |     $ 
     |     \ 

<sign-edit-desc> ::= 
           SS 
     |     SP 
     |     S 

<blank-interp-edit-desc> ::= 
           BN 
     |     BZ 

<round-edit-desc> ::= 
           RU 
     |     RD 
     |     RZ 
     |     RN 
     |     RC 
     |     RP 

<decimal-edit-desc> ::= 
           DC 
     |     DP 

<control-edit-descr-no-comma> ::= 
           / 
     |     <r> / 
     |     : 
     |     <k> P 

<k> ::= 
           <int-literal-constant> 
     |     <sign> <int-literal-constant> 

<follow-data-edit-desc> ::= 
           <fmt{G}w> 
     |     <fmt{I,B,O,Z,G,L,A}w> 
     |     <fmt{I,B,O,Z,F,E,EN,ES,G,D}w . d> 
     |     <fmt{I,B,O,Z}w . d> 
     |     <fmt{F,E,EN,ES,G,D,EX}w . d> 
     |     <fmt{E,EN,ES,G,EX}w . d E e> 
     |     A 
     |     <fmt dt & char-literal-constant> 
     |     <fmt dt & char-literal-constant> 
     |     DT 
     |     <char-literal-constant> 

<unlimited-format-item> ::= 
           * ( <format-items> ) 

<include-stmt> ::= 
           INCLUDE <char-literal-constant>   /* Tr.OnIncludeStatement(str(2)); */

<omp-directive> ::= 
           <omp-atomic-construct> 
     |     <omp-barrier-stmt> 
     |     <omp-cancel-stmt> 
     |     <omp-cancellation-point-stmt> 
     |     <omp-critical-construct> 
     |     <omp-declare-mapper-stmt> 
     |     <omp-declare-reduction-stmt> 
     |     <omp-declare-simd-stmt> 
     |     <omp-declare-target-stmt> 
     |     <omp-declare-variant-stmt> 
     |     <omp-depobj-stmt> 
     |     <omp-distribute-construct> 
     |     <omp-distribute-parallel-do-construct> 
     |     <omp-distribute-parallel-do-simd-construct> 
     |     <omp-distribute-simd-construct> 
     |     <omp-do-construct> 
     |     <omp-do-simd-construct> 
     |     <smp-do-serial> 
     |     <omp-flush-stmt> 
     |     <omp-loop-construct> 
     |     <omp-master-construct> 
     |     <omp-master-taskloop-construct> 
     |     <omp-master-taskloop-simd-construct> 
     |     <omp-metadirective-construct> 
     |     <omp-ordered-construct> 
     |     <omp-parallel-construct> 
     |     <omp-parallel-do-construct> 
     |     <omp-parallel-do-simd-construct> 
     |     <omp-parallel-loop-construct> 
     |     <omp-parallel-master-construct> 
     |     <omp-parallel-master-taskloop-construct> 
     |     <omp-parallel-master-taskloop-simd-construct> 
     |     <omp-parallel-sections-construct> 
     |     <omp-parallel-workshare-construct> 
     |     <omp-requires-directive> 
     |     <ibm-schedule-stmt> 
     |     <omp-sections-construct> 
     |     <omp-simd-construct> 
     |     <omp-single-construct> 
     |     <omp-target-construct> 
     |     <omp-target-data-construct> 
     |     <omp-target-enter-data-stmt> 
     |     <omp-target-exit-data-stmt> 
     |     <omp-target-parallel-construct> 
     |     <omp-target-parallel-do-construct> 
     |     <omp-target-parallel-do-simd-construct> 
     |     <omp-target-parallel-loop-construct> 
     |     <omp-target-simd-construct> 
     |     <omp-target-teams-construct> 
     |     <omp-target-teams-distribute-construct> 
     |     <omp-target-teams-distribute-simd-construct> 
     |     <omp-target-teams-distribute-parallel-do-construct> 
     |     <omp-target-teams-distribute-parallel-do-simd-construct> 
     |     <omp-target-teams-loop-construct> 
     |     <omp-target-update-stmt> 
     |     <omp-taskgroup-construct> 
     |     <omp-task-construct> 
     |     <omp-taskloop-construct> 
     |     <omp-taskloop-simd-construct> 
     |     <omp-taskwait-stmt> 
     |     <omp-taskyield-stmt> 
     |     <omp-teams-construct> 
     |     <omp-teams-distribute-construct> 
     |     <omp-teams-distribute-parallel-do-construct> 
     |     <omp-teams-distribute-parallel-do-simd-construct> 
     |     <omp-teams-distribute-simd-construct> 
     |     <omp-teams-loop-construct> 
     |     <omp-threadprivate-stmt> 
     |     <ibm-threadlocal> 
     |     <omp-workshare-construct> 

<omp-atomic-construct> ::= 
           <omp-atomic-update-construct> 
     |     <omp-atomic-capture-construct> 

<omp-atomic-update-construct> ::= 
           <omp-atomic-update-stmt> update-statement <omp-end-atomic-stmt> 
     |     <omp-atomic-update-stmt> update-statement -: { OMP-END-ATOMIC } 

<omp-atomic-update-stmt> ::= 
           OMP <omp-atomic-update> <\n> 

update-statement ::= 
           <assignment-stmt> <;> 

<omp-end-atomic-stmt> ::= 
           omp-end-atomic-stmt <\n> 

omp-end-atomic-stmt ::= 
           OMP-END-ATOMIC +: { <;> } 
     |     OMP-END-ATOMIC <erroneous-stmt>   /* Tr.error(L"Erroneous omp-end-atomic-stmt. ");*/

<omp-atomic-capture-construct> ::= 
           <omp-atomic-capture-stmt>
           update-statement
           update-statement
           <omp-end-atomic-stmt>
           

<omp-atomic-capture-stmt> ::= 
           OMP <omp-atomic-capture> <\n> 

<omp-barrier-stmt> ::= 
           OMP <omp-barrier> <\n> 

<omp-cancel-stmt> ::= 
           omp-cancel-stmt <\n> 

omp-cancel-stmt ::= 
           OMP <omp-cancel> 
     |     OMP <omp-cancel-do>   /* Tr.onOMPCancelDo($$(0),$$(2),68151); //check in DoLoop;*/

<omp-cancellation-point-stmt> ::= 
           OMP <omp-cancellation-point> <\n> 

<omp-critical-construct> ::= 
           <omp-critical-stmt> structured-block <omp-end-critical;> 
     |     <omp-critical-stmt> <omp-end-critical;> 

<omp-critical-stmt> ::= 
           OMP <omp-critical> <\n> 

<omp-end-critical;> ::= 
           <omp-end-critical> <\n> 

<omp-end-critical> ::= 
           omp-end-critical 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-critical",52,false);*/

omp-end-critical ::= 
           OMP END CRITICAL +: { <;> } 
     |     OMP END CRITICAL ( <name> ) +: { <;> } 
     |     OMP END_CRITICAL +: { <;> } 
     |     OMP END_CRITICAL ( <name> ) +: { <;> } 

<omp-depobj-stmt> ::= 
           OMP <omp-depobj> <\n> 

<omp-distribute-construct> ::= 
           <omp-distribute-stmt> <do-loop> <omp-end-distribute-stmt> 
     |     <omp-distribute-stmt> <omp-end-distribute-stmt> 
     |     <omp-distribute-stmt> <do-loop> -: { OMP-END-DISTRIBUTE } 

<omp-distribute-stmt> ::= 
           OMP <omp-distribute> <\n> 

<do-loop> ::= 
           <do-construct> <;> 
     |     <label> <do-construct> <;> 
     |     <erroneous-stmt> <;>   /* Tr.error(L"Expected immediatelly only a DO Construct."); */

<do-construct> ::= 
           <block-do-construct> 
     |     <nonblock-do-construct> 

<block-do-construct> ::= 
           <nonlabel-do-stmt> <do-block> <end-do-stmt> 
     |     <nonlabel-do-stmt> <end-do-stmt> 

<nonlabel-do-stmt> ::= 
           nonlabel-do-stmt <;> 

nonlabel-do-stmt ::= 
           DO 
     |     DO <loop-control> 
     |     <construct-name-l> : DO 
     |     <construct-name-l> : DO <loop-control> 

<loop-control> ::= 
           loop-control 
     |     <,> loop-control 

loop-control ::= 
           <do-variable> = <expr> <,> <expr> 
     |     <do-variable> = <expr> <,> <expr> <,> <expr> 
     |     WHILE <p-expr> 
     |     CONCURRENT <concurrent-header> 
     |     CONCURRENT <concurrent-header> <concurrent-locality> 

<concurrent-header> ::= 
           <forall-header> 

<concurrent-locality> ::= 
           <concurrent-locality> <locality-spec> 
     |     <locality-spec> 

<locality-spec> ::= 
           LOCAL ( <variable-name-list> ) 
     |     LOCAL_INIT ( <variable-name-list> ) 
     |     SHARED ( <variable-name-list> ) 
     |     DEFAULT ( <NONE> ) 

<variable-name-list> ::= 
           <name-list> 

<do-block> ::= 
           <do-block> <executable-construct;> 
     |     <do-block> <omp-directive> 
     |     <do-block> <omp-scan-stmt> 
     |     <do-block> <omp-cancellation-point-do-stmt> 
     |     <do-block> <special-stmt;> 
     |     <executable-construct;> 
     |     <omp-directive> 
     |     <omp-scan-stmt> 
     |     <omp-cancellation-point-do-stmt> 
     |     <special-stmt;> 
     |     <do-block> <label> <executable-construct;> 
     |     <label> <executable-construct;> 

<omp-scan-stmt> ::= 
           omp-scan-stmt <\n> 

omp-scan-stmt ::= 
           OMP <omp-scan>   /* Tr.onOMPScan($$(0),$$(2),68151); //check in DoLoop;*/

<omp-cancellation-point-do-stmt> ::= 
           omp-cancellation-point-do-stmt <\n> 

omp-cancellation-point-do-stmt ::= 
           OMP <omp-cancellation-point-do>   /* Tr.onOMPCancelDo($$(0),$$(2),68151); //check in DoLoop;*/

<end-do-stmt> ::= 
           end-do-stmt 
     |     <label> end-do-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-do-stmt",13,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-do-stmt",13,false);*/

end-do-stmt ::= 
           END DO 
     |     END DO <construct-name> 
     |     END_DO 
     |     END_DO <construct-name> 

<nonblock-do-construct> ::= 
           <action-term-do-construct> 
     |     <outer-shared-do-construct> 

<action-term-do-construct> ::= 
           <label-do-stmt> <do-body> <do-term-action-stmt> 
     |     <label-do-stmt> <do-term-action-stmt> 

<label-do-stmt> ::= 
           label-do-stmt <;> 

label-do-stmt ::= 
           DO <label>   /* Tr.doLabelsPush( str(2) ) ; */
     |     DO <label> <loop-control>   /* Tr.doLabelsPush( str(2) ) ; */
     |     <construct-name-l> : DO <label>   /* Tr.doLabelsPush( str(4) ) ; */
     |     <construct-name-l> : DO <label> <loop-control>   /* Tr.doLabelsPush( str(4) ); */

<do-body> ::= 
           <do-block> 

<do-term-action-stmt> ::= 
           <label-do> <labeled-do-action-stmt>   /* Tr.doLabelsPop(str(1) ); */
     |     <label-do> end-do-stmt   /* Tr.doLabelsPop(str(1) ); */
     |     <label-do-format> 

<labeled-do-action-stmt> ::= 
           <allocate-stmt> 
     |     <assignment-stmt> 
     |     <backspace-stmt> 
     |     <call-stmt> 
     |     <close-stmt> 
     |     <deallocate-stmt> 
     |     <define-file-unit-stmt> 
     |     <endfile-stmt> 
     |     <event-post-stmt> 
     |     <event-wait-stmt> 
     |     <fail-image-stmt> 
     |     <flush-stmt> 
     |     <form-team-stmt> 
     |     <forall-stmt> 
     |     <goto-stmt> 
     |     <if-stmt> 
     |     <inquire-stmt> 
     |     <lock-stmt> 
     |     <nullify-stmt> 
     |     <open-stmt> 
     |     <pointer-assignment-stmt> 
     |     <print-stmt> 
     |     <read-stmt> 
     |     <rewind-stmt> 
     |     <sync-all-stmt> 
     |     <sync-images-stmt> 
     |     <sync-memory-stmt> 
     |     <sync-team-stmt> 
     |     <unlock-stmt> 
     |     <wait-stmt> 
     |     <where-stmt> 
     |     <write-stmt> 
     |     <computed-goto-stmt> 
     |     continue-stmt 
     |     <erroneous-stmt> <;> 

<outer-shared-do-construct> ::= 
           <label-do-stmt> <do-body> <inner-shared-do-construct> 
     |     <label-do-stmt> <inner-shared-do-construct> 

<inner-shared-do-construct> ::= 
           <label-do-shared-stmt> <do-body> <shared-term-do-construct> 
     |     <label-do-shared-stmt> <shared-term-do-construct> 
     |     <omp-do-for-shared-term> <label-do-shared-stmt> <do-body> <shared-term-do-construct> 
     |     <omp-do-for-shared-term> <label-do-shared-stmt> <shared-term-do-construct> 

<label-do-shared-stmt> ::= 
           label-do-shared-stmt <;> 
     |     <label> label-do-shared-stmt <;> 
     |     <label-do> label-do-shared-stmt <;>   /* Tr.doLabelsPop(str(1) ); */

label-do-shared-stmt ::= 
           DO <label-do>   /* Tr.doLabelsPush( str(2) ) ; */
     |     DO <label-do> <loop-control>   /* Tr.doLabelsPush( str(2) ) ; */
     |     <construct-name-l> : DO <label-do>   /* Tr.doLabelsPush( str(4) ) ; */
     |     <construct-name-l> : DO <label-do> <loop-control>   /* Tr.doLabelsPush( str(4) ) ; */

<shared-term-do-construct> ::= 
           <do-term-shared-stmt> 
     |     <inner-shared-do-construct> 

<do-term-shared-stmt> ::= 
           <do-term-action-stmt> 

<omp-do-for-shared-term> ::= 
           <omp-distribute-parallel-do-stmt> 
     |     <omp-distribute-parallel-do-simd-stmt> 
     |     <omp-distribute-stmt> 
     |     <omp-distribute-simd-stmt> 
     |     <omp-do-stmt> 
     |     <omp-do-simd-stmt> 
     |     <omp-loop-stmt> 
     |     <omp-master-taskloop-stmt> 
     |     <omp-master-taskloop-simd-stmt> 
     |     <omp-parallel-do-stmt> 
     |     <omp-parallel-do-simd-stmt> 
     |     <omp-parallel-loop-stmt> 
     |     <omp-parallel-master-taskloop-stmt> 
     |     <omp-parallel-master-taskloop-simd-stmt> 
     |     <omp-simd-stmt> 
     |     <omp-target-parallel-do-stmt> 
     |     <omp-target-parallel-do-simd-stmt> 
     |     <omp-target-parallel-loop-stmt> 
     |     <omp-target-simd-stmt> 
     |     <omp-target-teams-distribute-stmt> 
     |     <omp-target-teams-distribute-simd-stmt> 
     |     <omp-target-teams-distribute-parallel-do-stmt> 
     |     <omp-target-teams-distribute-parallel-do-simd-stmt> 
     |     <omp-target-teams-loop-stmt> 
     |     <omp-taskloop-stmt> 
     |     <omp-taskloop-simd-stmt> 
     |     <omp-teams-distribute-stmt> 
     |     <omp-teams-distribute-parallel-do-stmt> 
     |     <omp-teams-distribute-parallel-do-simd-stmt> 
     |     <omp-teams-distribute-simd-stmt> 
     |     <omp-teams-loop-stmt> 
     |     <smp-do-serial-stmt> 

<omp-distribute-parallel-do-stmt> ::= 
           OMP <omp-distribute-parallel-do> <\n> 

<omp-distribute-parallel-do-simd-stmt> ::= 
           OMP <omp-distribute-parallel-do-simd> <\n> 

<omp-distribute-simd-stmt> ::= 
           OMP <omp-distribute-simd> <\n> 

<omp-do-stmt> ::= 
           OMP <omp-do> <\n> 

<omp-do-simd-stmt> ::= 
           OMP <omp-do-simd> <\n> 

<omp-loop-stmt> ::= 
           OMP <omp-loop> <\n> 

<omp-master-taskloop-stmt> ::= 
           OMP <omp-master-taskloop> <\n> 

<omp-master-taskloop-simd-stmt> ::= 
           OMP <omp-master-taskloop-simd> <\n> 

<omp-parallel-do-stmt> ::= 
           OMP <omp-parallel-do> <\n> 

<omp-parallel-do-simd-stmt> ::= 
           OMP <omp-parallel-do-simd> <\n> 

<omp-parallel-loop-stmt> ::= 
           OMP <omp-parallel-loop> <\n> 

<omp-parallel-master-taskloop-stmt> ::= 
           OMP <omp-parallel-master-taskloop> <\n> 

<omp-parallel-master-taskloop-simd-stmt> ::= 
           OMP <omp-parallel-master-taskloop-simd> <\n>   /* synthesize(2); */

<omp-simd-stmt> ::= 
           OMP <omp-simd> <\n> 

<omp-target-parallel-do-stmt> ::= 
           OMP <omp-target-parallel-do> <\n> 

<omp-target-parallel-do-simd-stmt> ::= 
           OMP <omp-target-parallel-do-simd> <\n> 

<omp-target-parallel-loop-stmt> ::= 
           OMP <omp-target-parallel-loop> <\n> 

<omp-target-simd-stmt> ::= 
           OMP <omp-target-simd> <\n> 

<omp-target-teams-distribute-stmt> ::= 
           OMP <omp-target-teams-distribute> <\n> 

<omp-target-teams-distribute-simd-stmt> ::= 
           OMP <omp-target-teams-distribute-simd> <\n> 

<omp-target-teams-distribute-parallel-do-stmt> ::= 
           OMP <omp-target-teams-distribute-parallel-do> <\n> 

<omp-target-teams-distribute-parallel-do-simd-stmt> ::= 
           OMP <omp-target-teams-distribute-parallel-do-simd> <\n> 

<omp-target-teams-loop-stmt> ::= 
           OMP <omp-target-teams-loop> <\n> 

<omp-taskloop-stmt> ::= 
           OMP <omp-taskloop> <\n> 

<omp-taskloop-simd-stmt> ::= 
           OMP <omp-taskloop-simd> <\n> 

<omp-teams-distribute-stmt> ::= 
           OMP <omp-teams-distribute> <\n> 

<omp-teams-distribute-parallel-do-stmt> ::= 
           OMP <omp-teams-distribute-parallel-do> <\n> 

<omp-teams-distribute-parallel-do-simd-stmt> ::= 
           OMP <omp-teams-distribute-parallel-do-simd> <\n> 

<omp-teams-distribute-simd-stmt> ::= 
           OMP <omp-teams-distribute-simd> <\n> 

<omp-teams-loop-stmt> ::= 
           OMP <omp-teams-loop> <\n> 

<smp-do-serial-stmt> ::= 
           SMP-DO-SERIAL <\n> 

<omp-end-distribute-stmt> ::= 
           omp-end-distribute-stmt <\n> 

omp-end-distribute-stmt ::= 
           OMP-END-DISTRIBUTE +: { <;> } 

<omp-distribute-parallel-do-construct> ::= 
           <omp-distribute-parallel-do-stmt> <do-loop> <omp-end-distribute-parallel-do-stmt> 
     |     <omp-distribute-parallel-do-stmt> <omp-end-distribute-parallel-do-stmt> 
     |     <omp-distribute-parallel-do-stmt> <do-loop> -: { OMP-END-DISTRIBUTE-PARALLEL-DO } 

<omp-end-distribute-parallel-do-stmt> ::= 
           omp-end-distribute-parallel-do-stmt <\n> 

omp-end-distribute-parallel-do-stmt ::= 
           OMP-END-DISTRIBUTE-PARALLEL-DO +: { <;> } 

<omp-distribute-parallel-do-simd-construct> ::= 
           <omp-distribute-parallel-do-simd-stmt> <do-loop> <omp-end-distribute-parallel-do-simd-stmt> 
     |     <omp-distribute-parallel-do-simd-stmt> <omp-end-distribute-parallel-do-simd-stmt> 
     |     <omp-distribute-parallel-do-simd-stmt> <do-loop> -: { OMP-END-DISTRIBUTE-PARALLEL-DO-SIMD } 

<omp-end-distribute-parallel-do-simd-stmt> ::= 
           omp-end-distribute-parallel-do-simd-stmt <\n> 

omp-end-distribute-parallel-do-simd-stmt ::= 
           OMP-END-DISTRIBUTE-PARALLEL-DO-SIMD +: { <;> } 

<omp-distribute-simd-construct> ::= 
           <omp-distribute-simd-stmt> <do-loop> <omp-end-distribute-simd-stmt> 
     |     <omp-distribute-simd-stmt> <omp-end-distribute-simd-stmt> 
     |     <omp-distribute-simd-stmt> <do-loop> -: { OMP-END-DISTRIBUTE-SIMD } 

<omp-end-distribute-simd-stmt> ::= 
           omp-end-distribute-simd-stmt <\n> 

omp-end-distribute-simd-stmt ::= 
           OMP-END-DISTRIBUTE-SIMD +: { <;> } 

<omp-do-construct> ::= 
           <omp-do-stmt> <do-loop> <omp-end-do-stmt> 
     |     <omp-do-stmt> <omp-end-do-stmt> 
     |     <omp-do-stmt> <do-loop> -: { OMP-END-DO } 

<omp-end-do-stmt> ::= 
           omp-end-do-stmt <\n> 

omp-end-do-stmt ::= 
           OMP-END-DO +: { <;> } 
     |     OMP-END-DO NOWAIT +: { <;> } 

<omp-do-simd-construct> ::= 
           <omp-do-simd-stmt> <do-loop> <omp-end-do-simd-stmt> 
     |     <omp-do-simd-stmt> <do-loop> -: { OMP-END-DO-SIMD } 

<omp-end-do-simd-stmt> ::= 
           omp-end-do-simd-stmt <\n> 

omp-end-do-simd-stmt ::= 
           OMP-END-DO-SIMD +: { <;> } 
     |     OMP-END-DO-SIMD NOWAIT +: { <;> } 

<smp-do-serial> ::= 
           <smp-do-serial-stmt> <do-loop> 

<omp-flush-stmt> ::= 
           OMP <omp-flush> <\n> 

<omp-loop-construct> ::= 
           <omp-loop-stmt> <do-loop> <omp-end-loop-stmt> 
     |     <omp-loop-stmt> <omp-end-loop-stmt> 
     |     <omp-loop-stmt> <do-loop> -: { OMP-END-LOOP } 

<omp-end-loop-stmt> ::= 
           omp-end-loop-stmt <\n> 

omp-end-loop-stmt ::= 
           OMP-END-LOOP +: { <;> } 

<omp-master-construct> ::= 
           <omp-master-stmt> structured-block <omp-end-master-stmt;> 
     |     <omp-master-stmt> <omp-end-master-stmt;> 

<omp-master-stmt> ::= 
           OMP <omp-master> <\n> 

<omp-end-master-stmt;> ::= 
           <omp-end-master-stmt> <\n> 

<omp-end-master-stmt> ::= 
           omp-end-master-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-master-stmt",54,false);*/

omp-end-master-stmt ::= 
           OMP END MASTER +: { <;> } 

<omp-master-taskloop-construct> ::= 
           <omp-master-taskloop-stmt> <do-loop> <omp-end-master-taskloop-stmt> 
     |     <omp-master-taskloop-stmt> <omp-end-master-taskloop-stmt> 
     |     <omp-master-taskloop-stmt> <do-loop> -: { OMP-END-MASTER-TASKLOOP } 

<omp-end-master-taskloop-stmt> ::= 
           omp-end-master-taskloop-stmt <\n> 

omp-end-master-taskloop-stmt ::= 
           OMP-END-MASTER-TASKLOOP +: { <;> } 

<omp-master-taskloop-simd-construct> ::= 
           <omp-master-taskloop-simd-stmt> <do-loop> <omp-end-master-taskloop-simd-stmt> 
     |     <omp-master-taskloop-simd-stmt> <omp-end-master-taskloop-simd-stmt> 
     |     <omp-master-taskloop-simd-stmt> <do-loop> -: { OMP-END-MASTER-TASKLOOP-SIMD } 

<omp-end-master-taskloop-simd-stmt> ::= 
           omp-end-master-taskloop-simd-stmt <\n> 

omp-end-master-taskloop-simd-stmt ::= 
           OMP-END-MASTER-TASKLOOP-SIMD +: { <;> } 

<omp-ordered-construct> ::= 
           <omp-ordered-stmt> structured-block <omp-end-ordered-stmt;> 
     |     <omp-ordered-stmt> <omp-end-ordered-stmt;> 
     |     <omp-ordered-depend-stmt> 

<omp-ordered-stmt> ::= 
           OMP <omp-ordered> <\n> 

<omp-end-ordered-stmt;> ::= 
           <omp-end-ordered-stmt> <\n> 

<omp-end-ordered-stmt> ::= 
           omp-end-ordered-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-ordered-stmt",55,false);*/

omp-end-ordered-stmt ::= 
           OMP END ORDERED +: { <;> } 

<omp-ordered-depend-stmt> ::= 
           OMP <omp-ordered-depend> <\n> 

<omp-parallel-construct> ::= 
           <parallel-stmt> structured-block <omp-end-parallel-stmt;> 
     |     <parallel-stmt> <omp-end-parallel-stmt;> 

<parallel-stmt> ::= 
           OMP <omp-parallel> <\n> 

<omp-end-parallel-stmt;> ::= 
           <omp-end-parallel-stmt> <\n> 

<omp-end-parallel-stmt> ::= 
           omp-end-parallel-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-parallel-stmt",58,false);*/

omp-end-parallel-stmt ::= 
           OMP END PARALLEL +: { <;> } 

<omp-parallel-do-construct> ::= 
           <omp-parallel-do-stmt> <do-loop> <omp-end-parallel-do-stmt> 
     |     <omp-parallel-do-stmt> <omp-end-parallel-do-stmt> 
     |     <omp-parallel-do-stmt> <do-loop> -: { OMP-END-PARALLEL-DO } 

<omp-end-parallel-do-stmt> ::= 
           omp-end-parallel-do-stmt <\n> 

omp-end-parallel-do-stmt ::= 
           OMP-END-PARALLEL-DO +: { <;> } 

<omp-parallel-do-simd-construct> ::= 
           <omp-parallel-do-simd-stmt> <do-loop> <omp-end-parallel-do-simd-stmt> 
     |     <omp-parallel-do-simd-stmt> <omp-end-parallel-do-simd-stmt> 
     |     <omp-parallel-do-simd-stmt> <do-loop> -: { OMP-END-PARALLEL-DO-SIMD } 

<omp-end-parallel-do-simd-stmt> ::= 
           omp-end-parallel-do-simd-stmt <\n> 

omp-end-parallel-do-simd-stmt ::= 
           OMP-END-PARALLEL-DO-SIMD +: { <;> } 

<omp-parallel-loop-construct> ::= 
           <omp-parallel-loop-stmt> <do-loop> <omp-end-parallel-loop-stmt> 
     |     <omp-parallel-loop-stmt> <omp-end-parallel-loop-stmt> 
     |     <omp-parallel-loop-stmt> <do-loop> -: { OMP-END-PARALLEL-LOOP } 

<omp-end-parallel-loop-stmt> ::= 
           omp-end-parallel-loop-stmt <\n> 

omp-end-parallel-loop-stmt ::= 
           OMP-END-PARALLEL-LOOP +: { <;> } 

<omp-parallel-master-construct> ::= 
           <omp-parallel-master-stmt> structured-block <omp-end-parallel-master-stmt;> 
     |     <omp-parallel-master-stmt> <omp-end-parallel-master-stmt;> 

<omp-parallel-master-stmt> ::= 
           OMP <omp-parallel-master> <\n> 

<omp-end-parallel-master-stmt;> ::= 
           <omp-end-parallel-master-stmt> <\n> 

<omp-end-parallel-master-stmt> ::= 
           omp-end-parallel-master-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-parallel-stmt",72,false);*/

omp-end-parallel-master-stmt ::= 
           OMP END PARALLEL MASTER +: { <;> }   /* synthesize(4); */

<omp-parallel-master-taskloop-construct> ::= 
           <omp-parallel-master-taskloop-stmt> <do-loop> <omp-end-parallel-master-taskloop-stmt> 
     |     <omp-parallel-master-taskloop-stmt> <omp-end-parallel-master-taskloop-stmt> 
     |     <omp-parallel-master-taskloop-stmt> <do-loop> -: { OMP-END-PARALLEL-MASTER-TASKLOOP } 

<omp-end-parallel-master-taskloop-stmt> ::= 
           omp-end-parallel-master-taskloop-stmt <\n> 

omp-end-parallel-master-taskloop-stmt ::= 
           OMP-END-PARALLEL-MASTER-TASKLOOP +: { <;> } 

<omp-parallel-master-taskloop-simd-construct> ::= 
           <omp-parallel-master-taskloop-simd-stmt> <do-loop> <omp-end-parallel-master-taskloop-simd-stmt>   /* Tr.onMaster($$(1),$$(3)); */
     |     <omp-parallel-master-taskloop-simd-stmt> <omp-end-parallel-master-taskloop-simd-stmt>   /* Tr.onMaster($$(1),$$(2)); */
     |     <omp-parallel-master-taskloop-simd-stmt> <do-loop> -: { OMP-END-PARALLEL-MASTER-TASKLOOP-SIMD } 

<omp-end-parallel-master-taskloop-simd-stmt> ::= 
           omp-end-parallel-master-taskloop-simd-stmt <\n>   /* synthesize(1); */

omp-end-parallel-master-taskloop-simd-stmt ::= 
           OMP-END-PARALLEL-MASTER-TASKLOOP-SIMD +: { <;> }   /* synthesize(1); */

<omp-parallel-sections-construct> ::= 
           <omp-parallel-sections-stmt> <block> <omp-section-block> <omp-end-parallel-sections-stmt> 
     |     <omp-parallel-sections-stmt> <omp-section-block> <omp-end-parallel-sections-stmt> 
     |     <omp-parallel-sections-stmt> <block> <omp-end-parallel-sections-stmt> 
     |     <omp-parallel-sections-stmt> <omp-end-parallel-sections-stmt> 

<omp-parallel-sections-stmt> ::= 
           OMP <omp-parallel-sections> <\n> 

<omp-section-block> ::= 
           <omp-section-block> <executable-construct;> 
     |     <omp-section-block> <omp-directive> 
     |     <omp-section-block> <special-stmt;> 
     |     <omp-section-block> <label> <executable-construct;> 
     |     <omp-section-block> <omp-section-stmt> 
     |     <omp-section-block> <omp-cancel-sections-stmt> 
     |     <omp-section-block> <omp-cancellation-point-sections-stmt> 
     |     <omp-section-stmt> 
     |     <omp-cancel-sections-stmt> 
     |     <omp-cancellation-point-sections-stmt> 

<omp-section-stmt> ::= 
           OMP <omp-section> <\n> 

<omp-cancel-sections-stmt> ::= 
           OMP <omp-cancel-sections> <\n> 

<omp-cancellation-point-sections-stmt> ::= 
           OMP <omp-cancellation-point-sections> <\n> 

<omp-end-parallel-sections-stmt> ::= 
           omp-end-parallel-sections-stmt <\n> 
     |     <unexpected-end-stmt> <;>   /* Tr.UnBalanced( $$(0),L"omp-end-parallel-sections-stmt",57,false);*/

omp-end-parallel-sections-stmt ::= 
           OMP END PARALLEL SECTIONS +: { <;> } 
     |     OMP END PARALLEL SECTIONS NOWAIT +: { <;> } 

<omp-parallel-workshare-construct> ::= 
           <parallel-workshare-stmt> structured-block <omp-end-parallel-workshare-stmt;> 
     |     <parallel-workshare-stmt> <omp-end-parallel-workshare-stmt;> 

<parallel-workshare-stmt> ::= 
           OMP <omp-parallel-workshare> <\n> 

<omp-end-parallel-workshare-stmt;> ::= 
           <omp-end-parallel-workshare-stmt> <\n> 

<omp-end-parallel-workshare-stmt> ::= 
           omp-end-parallel-workshare-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-parallel-workshare-stmt",59,false);*/

omp-end-parallel-workshare-stmt ::= 
           OMP END PARALLEL WORKSHARE +: { <;> } 

<omp-requires-directive> ::= 
           OMP <omp-requires> <\n> 

<ibm-schedule-stmt> ::= 
           OMP <omp-schedule> <\n>   /* Tr.warning(L"The Schedule Statement is vendor specific & deprecated."); */

<omp-sections-construct> ::= 
           <omp-sections-stmt> <block> <omp-section-block> <end-sections-stmt> 
     |     <omp-sections-stmt> <omp-section-block> <end-sections-stmt> 
     |     <omp-sections-stmt> <end-sections-stmt> 

<omp-sections-stmt> ::= 
           OMP <omp-sections> <\n> 

<end-sections-stmt> ::= 
           OMP END SECTIONS <\n> 
     |     OMP END SECTIONS NOWAIT <\n> 

<omp-simd-construct> ::= 
           <omp-simd-stmt> <do-loop> <omp-end-simd-stmt> 
     |     <omp-simd-stmt> <omp-end-simd-stmt> 
     |     <omp-simd-stmt> <do-loop> -: { OMP-END-SIMD } 

<omp-end-simd-stmt> ::= 
           omp-end-simd-stmt <\n> 

omp-end-simd-stmt ::= 
           OMP-END-SIMD +: { <;> } 

<omp-single-construct> ::= 
           <omp-single-stmt> structured-block <omp-end-single-stmt;> 
     |     <omp-single-stmt> <omp-end-single-stmt;> 

<omp-single-stmt> ::= 
           OMP <omp-single> <\n> 

<omp-end-single-stmt;> ::= 
           <omp-end-single-stmt> <\n> 

<omp-end-single-stmt> ::= 
           omp-end-single-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-single-stmt",60,false);*/

omp-end-single-stmt ::= 
           OMP END SINGLE +: { <;> } 
     |     OMP END SINGLE <end-single-clause-list> +: { <;> } 

<end-single-clause-list> ::= 
           <end-single-clause-list> , <end-single-clause> 
     |     <end-single-clause-list> <end-single-clause> 
     |     <end-single-clause> 

<end-single-clause> ::= 
           <omp-copyprivate> 
     |     NOWAIT 

<omp-copyprivate> ::= 
           COPYPRIVATE ( <omp-list> ) 

<omp-target-construct> ::= 
           <omp-target-stmt> structured-block <omp-end-target-stmt;> 
     |     <omp-target-stmt> <omp-end-target-stmt;> 

<omp-target-stmt> ::= 
           OMP <omp-target> <\n> 

<omp-end-target-stmt;> ::= 
           <omp-end-target-stmt> <\n> 

<omp-end-target-stmt> ::= 
           omp-end-target-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-target-stmt",65,false);*/

omp-end-target-stmt ::= 
           OMP END TARGET +: { <;> } 

<omp-target-data-construct> ::= 
           <omp-target-data-stmt> structured-block <omp-end-target-data-stmt;> 
     |     <omp-target-data-stmt> <omp-end-target-data-stmt;> 

<omp-target-data-stmt> ::= 
           OMP <omp-target-data> <\n> 

<omp-end-target-data-stmt;> ::= 
           <omp-end-target-data-stmt> <\n> 

<omp-end-target-data-stmt> ::= 
           omp-end-target-data-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-target-data-stmt",64,false);*/

omp-end-target-data-stmt ::= 
           OMP END TARGET DATA +: { <;> } 

<omp-target-enter-data-stmt> ::= 
           OMP <omp-target-enter-data> <\n> 

<omp-target-exit-data-stmt> ::= 
           OMP <omp-target-exit-data> <\n> 

<omp-target-parallel-construct> ::= 
           <target-parallel-stmt> structured-block <omp-end-target-parallel-stmt;> 
     |     <target-parallel-stmt> <omp-end-target-parallel-stmt;> 

<target-parallel-stmt> ::= 
           OMP <omp-target-parallel> <\n> 

<omp-end-target-parallel-stmt;> ::= 
           <omp-end-target-parallel-stmt> <\n> 

<omp-end-target-parallel-stmt> ::= 
           omp-end-target-parallel-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-parallel-stmt",66,false);*/

omp-end-target-parallel-stmt ::= 
           OMP END TARGET PARALLEL +: { <;> } 

<omp-target-parallel-do-construct> ::= 
           <omp-target-parallel-do-stmt> <do-loop> <omp-end-target-parallel-do-stmt> 
     |     <omp-target-parallel-do-stmt> <omp-end-target-parallel-do-stmt> 
     |     <omp-target-parallel-do-stmt> <do-loop> -: { OMP-END-TARGET-PARALLEL-DO } 

<omp-end-target-parallel-do-stmt> ::= 
           omp-end-target-parallel-do-stmt <\n> 

omp-end-target-parallel-do-stmt ::= 
           OMP-END-TARGET-PARALLEL-DO +: { <;> } 

<omp-target-parallel-do-simd-construct> ::= 
           <omp-target-parallel-do-simd-stmt> <do-loop> <omp-end-target-parallel-do-simd-stmt> 
     |     <omp-target-parallel-do-simd-stmt> <omp-end-target-parallel-do-simd-stmt> 
     |     <omp-target-parallel-do-simd-stmt> <do-loop> -: { OMP-END-TARGET-PARALLEL-DO-SIMD } 

<omp-end-target-parallel-do-simd-stmt> ::= 
           omp-end-target-parallel-do-simd-stmt <\n> 

omp-end-target-parallel-do-simd-stmt ::= 
           OMP-END-TARGET-PARALLEL-DO-SIMD +: { <;> } 

<omp-target-parallel-loop-construct> ::= 
           <omp-target-parallel-loop-stmt> <do-loop> <omp-end-target-parallel-loop-stmt> 
     |     <omp-target-parallel-loop-stmt> <omp-end-target-parallel-loop-stmt> 
     |     <omp-target-parallel-loop-stmt> <do-loop> -: { OMP-END-TARGET-PARALLEL-LOOP } 

<omp-end-target-parallel-loop-stmt> ::= 
           omp-end-target-parallel-loop-stmt <\n> 

omp-end-target-parallel-loop-stmt ::= 
           OMP-END-TARGET-PARALLEL-LOOP +: { <;> } 

<omp-target-simd-construct> ::= 
           <omp-target-simd-stmt> <do-loop> <omp-end-target-simd-stmt> 
     |     <omp-target-simd-stmt> <omp-end-target-simd-stmt> 
     |     <omp-target-simd-stmt> <do-loop> -: { OMP-END-TARGET-SIMD } 

<omp-end-target-simd-stmt> ::= 
           omp-end-target-simd-stmt <\n> 

omp-end-target-simd-stmt ::= 
           OMP-END-TARGET-SIMD +: { <;> } 

<omp-target-teams-construct> ::= 
           <omp-target-teams-stmt> structured-block <omp-end-target-teams-stmt;> 
     |     <omp-target-teams-stmt> <omp-end-target-teams-stmt;> 

<omp-target-teams-stmt> ::= 
           OMP <omp-target-teams> <\n> 

<omp-end-target-teams-stmt;> ::= 
           <omp-end-target-teams-stmt> <\n> 

<omp-end-target-teams-stmt> ::= 
           omp-end-target-teams-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-target-teams-stmt",72,false);*/

omp-end-target-teams-stmt ::= 
           OMP END TARGET TEAMS +: { <;> } 

<omp-target-teams-distribute-construct> ::= 
           <omp-target-teams-distribute-stmt> <do-loop> <omp-end-target-teams-distribute-stmt> 
     |     <omp-target-teams-distribute-stmt> <omp-end-target-teams-distribute-stmt> 
     |     <omp-target-teams-distribute-stmt> <do-loop> -: { OMP-END-TARGET-TEAMS-DISTRIBUTE } 

<omp-end-target-teams-distribute-stmt> ::= 
           omp-end-target-teams-distribute-stmt <\n> 

omp-end-target-teams-distribute-stmt ::= 
           OMP-END-TARGET-TEAMS-DISTRIBUTE +: { <;> } 

<omp-target-teams-distribute-simd-construct> ::= 
           <omp-target-teams-distribute-simd-stmt> <do-loop> <omp-end-target-teams-distribute-simd-stmt> 
     |     <omp-target-teams-distribute-simd-stmt> <omp-end-target-teams-distribute-simd-stmt> 
     |     <omp-target-teams-distribute-simd-stmt> <do-loop> -: { OMP-END-TARGET-TEAMS-DISTRIBUTE-SIMD } 

<omp-end-target-teams-distribute-simd-stmt> ::= 
           omp-end-target-teams-distribute-simd-stmt <\n> 

omp-end-target-teams-distribute-simd-stmt ::= 
           OMP-END-TARGET-TEAMS-DISTRIBUTE-SIMD +: { <;> } 

<omp-target-teams-distribute-parallel-do-construct> ::= 
           <omp-target-teams-distribute-parallel-do-stmt> <do-loop> <omp-end-target-teams-distribute-parallel-do-stmt> 
     |     <omp-target-teams-distribute-parallel-do-stmt> <omp-end-target-teams-distribute-parallel-do-stmt> 
     |     <omp-target-teams-distribute-parallel-do-stmt> <do-loop> -: { OMP-END-TARGET-TEAMS-DISTRIBUTE-PARALLEL-DO } 

<omp-end-target-teams-distribute-parallel-do-stmt> ::= 
           omp-end-target-teams-distribute-parallel-do-stmt <\n> 

omp-end-target-teams-distribute-parallel-do-stmt ::= 
           OMP-END-TARGET-TEAMS-DISTRIBUTE-PARALLEL-DO +: { <;> } 

<omp-target-teams-distribute-parallel-do-simd-construct> ::= 
           <omp-target-teams-distribute-parallel-do-simd-stmt> <do-loop> <omp-end-target-teams-distribute-parallel-do-simd-stmt> 
     |     <omp-target-teams-distribute-parallel-do-simd-stmt> <omp-end-target-teams-distribute-parallel-do-simd-stmt> 
     |     <omp-target-teams-distribute-parallel-do-simd-stmt> <do-loop> -: { OMP-END-TARGET-TEAMS-DISTRIBUTE-PARALLEL-DO-SIMD } 

<omp-end-target-teams-distribute-parallel-do-simd-stmt> ::= 
           omp-end-target-teams-distribute-parallel-do-simd-stmt <\n> 

omp-end-target-teams-distribute-parallel-do-simd-stmt ::= 
           OMP-END-TARGET-TEAMS-DISTRIBUTE-PARALLEL-DO-SIMD +: { <;> } 

<omp-target-teams-loop-construct> ::= 
           <omp-target-teams-loop-stmt> <do-loop> <omp-end-target-teams-loop-stmt> 
     |     <omp-target-teams-loop-stmt> <omp-end-target-teams-loop-stmt> 
     |     <omp-target-teams-loop-stmt> <do-loop> -: { OMP-END-TARGET-TEAMS-LOOP } 

<omp-end-target-teams-loop-stmt> ::= 
           omp-end-target-teams-loop-stmt <\n> 

omp-end-target-teams-loop-stmt ::= 
           OMP-END-TARGET-TEAMS-LOOP +: { <;> } 

<omp-target-update-stmt> ::= 
           OMP <omp-target-update> <\n> 

<omp-taskgroup-construct> ::= 
           <omp-taskgroup-stmt> structured-block <omp-end-taskgroup-stmt;> 
     |     <omp-taskgroup-stmt> <omp-end-taskgroup-stmt;> 

<omp-taskgroup-stmt> ::= 
           OMP <omp-taskgroup> <\n> 

<omp-end-taskgroup-stmt;> ::= 
           <omp-end-taskgroup-stmt> <\n> 

<omp-end-taskgroup-stmt> ::= 
           omp-end-taskgroup-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-taskgroup-stmt",62,false);*/

omp-end-taskgroup-stmt ::= 
           OMP END TASKGROUP +: { <;> } 

<omp-task-construct> ::= 
           <omp-task-stmt> structured-block <omp-end-task-stmt> 
     |     <omp-task-stmt> <omp-end-task-stmt> 

<omp-task-stmt> ::= 
           OMP <omp-task> <\n> 

<omp-end-task-stmt> ::= 
           omp-end-task-stmt <\n> 
     |     <unexpected-end-stmt> <;>   /* Tr.UnBalanced( $$(0),L"omp-end-task-stmt",61,false);*/

omp-end-task-stmt ::= 
           OMP END TASK +: { <;> } 

<omp-taskloop-construct> ::= 
           <omp-taskloop-stmt> <do-loop> <omp-end-taskloop-stmt> 
     |     <omp-taskloop-stmt> <omp-end-taskloop-stmt> 
     |     <omp-taskloop-stmt> <do-loop> -: { OMP-END-TASKLOOP } 

<omp-end-taskloop-stmt> ::= 
           omp-end-taskloop-stmt <\n> 

omp-end-taskloop-stmt ::= 
           OMP-END-TASKLOOP +: { <;> } 

<omp-taskloop-simd-construct> ::= 
           <omp-taskloop-simd-stmt> <do-loop> <omp-end-taskloop-simd-stmt> 
     |     <omp-taskloop-simd-stmt> <omp-end-taskloop-simd-stmt> 
     |     <omp-taskloop-simd-stmt> <do-loop> -: { OMP-END-TASKLOOP-SIMD } 

<omp-end-taskloop-simd-stmt> ::= 
           omp-end-taskloop-simd-stmt <\n> 

omp-end-taskloop-simd-stmt ::= 
           OMP-END-TASKLOOP-SIMD +: { <;> } 

<omp-taskwait-stmt> ::= 
           OMP <omp-taskwait> <\n> 

<omp-taskyield-stmt> ::= 
           OMP <omp-taskyield> <\n> 

<omp-teams-construct> ::= 
           <omp-teams-stmt> structured-block <omp-end-teams-stmt;> 
     |     <omp-teams-stmt> <omp-end-teams-stmt;> 

<omp-teams-stmt> ::= 
           OMP <omp-teams> <\n> 

<omp-end-teams-stmt;> ::= 
           <omp-end-teams-stmt> <\n> 

<omp-end-teams-stmt> ::= 
           omp-end-teams-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-teams-stmt",67,false);*/

omp-end-teams-stmt ::= 
           OMP END TEAMS +: { <;> } 

<omp-teams-distribute-construct> ::= 
           <omp-teams-distribute-stmt> <do-loop> <omp-end-teams-distribute-stmt> 
     |     <omp-teams-distribute-stmt> <omp-end-teams-distribute-stmt> 
     |     <omp-teams-distribute-stmt> <do-loop> -: { OMP-END-TEAMS-DISTRIBUTE } 

<omp-end-teams-distribute-stmt> ::= 
           omp-end-teams-distribute-stmt <\n> 

omp-end-teams-distribute-stmt ::= 
           OMP-END-TEAMS-DISTRIBUTE +: { <;> } 

<omp-teams-distribute-parallel-do-construct> ::= 
           <omp-teams-distribute-parallel-do-stmt> <do-loop> <omp-end-teams-distribute-parallel-do-stmt> 
     |     <omp-teams-distribute-parallel-do-stmt> <omp-end-teams-distribute-parallel-do-stmt> 
     |     <omp-teams-distribute-parallel-do-stmt> <do-loop> -: { OMP-END-TEAMS-DISTRIBUTE-PARALLEL-DO } 

<omp-end-teams-distribute-parallel-do-stmt> ::= 
           omp-end-teams-distribute-parallel-do-stmt <\n> 

omp-end-teams-distribute-parallel-do-stmt ::= 
           OMP-END-TEAMS-DISTRIBUTE-PARALLEL-DO +: { <;> } 

<omp-teams-distribute-parallel-do-simd-construct> ::= 
           <omp-teams-distribute-parallel-do-simd-stmt> <do-loop> <omp-end-teams-distribute-parallel-do-simd-stmt> 
     |     <omp-teams-distribute-parallel-do-simd-stmt> <omp-end-teams-distribute-parallel-do-simd-stmt> 
     |     <omp-teams-distribute-parallel-do-simd-stmt> <do-loop> -: { OMP-END-TEAMS-DISTRIBUTE-PARALLEL-DO-SIMD } 

<omp-end-teams-distribute-parallel-do-simd-stmt> ::= 
           omp-end-teams-distribute-parallel-do-simd-stmt <\n> 

omp-end-teams-distribute-parallel-do-simd-stmt ::= 
           OMP-END-TEAMS-DISTRIBUTE-PARALLEL-DO-SIMD +: { <;> } 

<omp-teams-distribute-simd-construct> ::= 
           <omp-teams-distribute-simd-stmt> <do-loop> <omp-end-teams-distribute-simd-stmt> 
     |     <omp-teams-distribute-simd-stmt> <omp-end-teams-distribute-simd-stmt> 
     |     <omp-teams-distribute-simd-stmt> <do-loop> -: { OMP-END-TEAMS-DISTRIBUTE-SIMD } 

<omp-end-teams-distribute-simd-stmt> ::= 
           omp-end-teams-distribute-simd-stmt <\n> 

omp-end-teams-distribute-simd-stmt ::= 
           OMP-END-TEAMS-DISTRIBUTE-SIMD +: { <;> } 

<omp-teams-loop-construct> ::= 
           <omp-teams-loop-stmt> <do-loop> <omp-end-teams-loop-stmt> 
     |     <omp-teams-loop-stmt> <omp-end-teams-loop-stmt> 
     |     <omp-teams-loop-stmt> <do-loop> -: { OMP-END-TEAMS-LOOP } 

<omp-end-teams-loop-stmt> ::= 
           omp-end-teams-loop-stmt <\n> 

omp-end-teams-loop-stmt ::= 
           OMP-END-TEAMS-LOOP +: { <;> } 

<omp-threadprivate-stmt> ::= 
           OMP <omp-threadprivate> <\n> 

<ibm-threadlocal> ::= 
           IBM THREADLOCAL <threadlocal-entity-list> <\n> 
     |     IBM THREADLOCAL <::> <threadlocal-entity-list> <\n> 

<threadlocal-entity-list> ::= 
           <threadlocal-entity-list> , <omp-common-block-name> 
     |     <omp-common-block-name> 

<omp-common-block-name> ::= 
           / <name> / 

<omp-workshare-construct> ::= 
           <omp-workshare-stmt> <workshare-block> <omp-end-workshare-stmt> 

<omp-workshare-stmt> ::= 
           OMP <omp-workshare> <\n> 

<workshare-block> ::= 
           <workshare-block> <workshare-part-construct> 
     |     <workshare-block> <workshare-part-directive> 
     |     <workshare-part-construct> 
     |     <workshare-part-directive> 
     |     <workshare-block> <label> <workshare-part-construct> 
     |     <label> <workshare-part-construct> 

<workshare-part-construct> ::= 
           <workshare-action-stmt> <;> 
     |     <forall-construct> <;> 
     |     <where-construct> <;> 
     |     <erroneous-stmt> <;> 

<workshare-action-stmt> ::= 
           <assignment-stmt> 
     |     <forall-stmt> 
     |     <where-stmt> 

<forall-construct> ::= 
           <forall-construct-stmt> <end-forall-stmt> 
     |     <forall-construct-stmt> <forall-body-constructs> <end-forall-stmt> 

<forall-construct-stmt> ::= 
           forall-construct-stmt <;> 

forall-construct-stmt ::= 
           FORALL <forall-header> 
     |     <construct-name-l> : FORALL <forall-header> 

<end-forall-stmt> ::= 
           end-forall-stmt 
     |     <label> end-forall-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-forall-stmt",10,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-forall-stmt",10,false);*/

end-forall-stmt ::= 
           END FORALL 
     |     END_FORALL 
     |     END FORALL <construct-name> 
     |     END_FORALL <construct-name> 

<forall-body-constructs> ::= 
           <forall-body-constructs> <forall-body-construct> 
     |     <forall-body-constructs> <label> <forall-body-construct> 
     |     <forall-body-construct> 

<forall-body-construct> ::= 
           <forall-assignment-stmt> <;> 
     |     <where-stmt> <;> 
     |     <where-construct> <;> 
     |     <forall-construct> <;> 
     |     <forall-stmt> <;> 

<where-construct> ::= 
           <where-construct-stmts> <end-where-stmt> 
     |     <where-construct-stmts> <elsewhere-stmts> <end-where-stmt> 
     |     <where-construct-stmts> <masked-elsewhere-stmts> <end-where-stmt> 
     |     <where-construct-stmts> <masked-elsewhere-stmts> <elsewhere-stmts> <end-where-stmt> 

<where-construct-stmts> ::= 
           <where-construct-stmts> <where-body-construct;> 
     |     <where-construct-stmts> <label> <where-body-construct;> 
     |     <where-construct-stmt> 

<where-body-construct;> ::= 
           <assignment-stmt> <;> 
     |     <where-stmt> <;> 
     |     <where-construct> <;> 

<where-construct-stmt> ::= 
           WHERE <p-expr> <;> 
     |     <construct-name-l> : WHERE <p-expr> <;> 

<end-where-stmt> ::= 
           end-where-stmt 
     |     <label> end-where-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-where-stmt",20,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-where-stmt",20,false);*/

end-where-stmt ::= 
           END WHERE 
     |     END WHERE <construct-name> 
     |     END_WHERE 
     |     END_WHERE <construct-name> 

<elsewhere-stmts> ::= 
           <elsewhere-stmts> <where-body-construct;> 
     |     <elsewhere-stmts> <label> <where-body-construct;> 
     |     <elsewhere-stmt> 

<elsewhere-stmt> ::= 
           elsewhere-stmt <;> 
     |     <label> elsewhere-stmt <;> 

elsewhere-stmt ::= 
           ELSE_WHERE 
     |     ELSE_WHERE <construct-name> 

<masked-elsewhere-stmts> ::= 
           <masked-elsewhere-stmts> <where-body-construct;> 
     |     <masked-elsewhere-stmts> <label> <where-body-construct;> 
     |     <masked-elsewhere-stmt> 

<masked-elsewhere-stmt> ::= 
           masked-elsewhere-stmt <;> 
     |     <label> masked-elsewhere-stmt <;> 

masked-elsewhere-stmt ::= 
           ELSE_WHERE ( <expr> ) 
     |     ELSE_WHERE ( <expr> ) <construct-name> 

<workshare-part-directive> ::= 
           <omp-atomic-construct> 
     |     <omp-critical-construct> 
     |     <omp-master-taskloop-construct> 
     |     <omp-master-taskloop-simd-construct> 
     |     <omp-metadirective-construct> 
     |     <omp-parallel-construct> 
     |     <omp-parallel-master-construct> 
     |     <omp-parallel-master-taskloop-construct> 
     |     <omp-parallel-master-taskloop-simd-construct> 
     |     <omp-parallel-workshare-construct> 
     |     <omp-parallel-do-construct> 
     |     <omp-parallel-sections-construct> 

<omp-end-workshare-stmt> ::= 
           omp-end-workshare-stmt <\n> 
     |     <unexpected-end-stmt> <;>   /* Tr.UnBalanced( $$(0),L"omp-end-workshare-stmt",63,false);*/

omp-end-workshare-stmt ::= 
           OMP END WORKSHARE +: { <;> } 
     |     OMP END WORKSHARE NOWAIT +: { <;> } 

<case-stmt> ::= 
           case-stmt <;> 

case-stmt ::= 
           CASE <case-selector> 
     |     CASE <case-selector> <name> 

<case-selector> ::= 
           <p-case-value-range-list> 
     |     DEFAULT 

<p-case-value-range-list> ::= 
           ( <case-value-range-list> ) 

<case-value-range-list> ::= 
           <case-value-range-list> <,> <case-value-range> 
     |     <case-value-range> 

<case-value-range> ::= 
           <case-value> 
     |     <case-value> : 
     |     : <case-value> 
     |     <case-value> : <case-value> 

<case-value> ::= 
           <expr> 

<change-team-construct> ::= 
           <change-team-stmt> <block> <end-change-team-stmt> 

<change-team-stmt> ::= 
           CHANGE_TEAM ( <team-value> ) <;> 
     |     CHANGE_TEAM ( <team-value> , <sync-stat-list> ) <;> 
     |     CHANGE_TEAM ( <team-value> , <coarray-association-list> ) <;> 
     |     CHANGE_TEAM ( <team-value> , <coarray-association-list> , <sync-stat-list> ) <;> 
     |     <construct-name-l> : CHANGE_TEAM ( <team-value> ) <;> 
     |     <construct-name-l> : CHANGE_TEAM ( <team-value> , <sync-stat-list> ) <;> 
     |     <construct-name-l> : CHANGE_TEAM ( <team-value> , <coarray-association-list> ) <;> 
     |     <construct-name-l> : CHANGE_TEAM ( <team-value> , <coarray-association-list> , <sync-stat-list> ) <;> 

CHANGE_TEAM ::= 
           CHANGE TEAM 
     |     CHANGETEAM 

<coarray-association-list> ::= 
           <coarray-association-list> , <coarray-association> 
     |     <coarray-association> 

<coarray-association> ::= 
           <codimension-decl> <=rangle> <selector> 

<codimension-decl> ::= 
           <name> <[coarray-spec]> 

<selector> ::= 
           <variable> 

<end-change-team-stmt> ::= 
           end-change-team-stmt 
     |     <label> end-change-team-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-change-team-stmt",34,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-change-team-stmt",34,false);*/

end-change-team-stmt ::= 
           END TEAM 
     |     END TEAM <construct-name> 
     |     END TEAM ( ) 
     |     END TEAM ( ) <construct-name> 
     |     END TEAM ( <sync-stat-list> ) 
     |     END TEAM ( <sync-stat-list> ) <construct-name> 
     |     END_TEAM 
     |     END_TEAM <construct-name> 
     |     END_TEAM ( ) 
     |     END_TEAM ( ) <construct-name> 
     |     END_TEAM ( <sync-stat-list> ) 
     |     END_TEAM ( <sync-stat-list> ) <construct-name> 

<critical-construct> ::= 
           <critical-stmt> <block> <end-critical-stmt> 

<critical-stmt> ::= 
           CRITICAL <;> 
     |     CRITICAL ( ) <;> 
     |     CRITICAL ( <sync-stat-list> ) <;> 
     |     <construct-name-l> : CRITICAL <;> 
     |     <construct-name-l> : CRITICAL ( ) <;> 
     |     <construct-name-l> : CRITICAL ( <sync-stat-list> ) <;> 

<end-critical-stmt> ::= 
           end-critical-stmt 
     |     <label> end-critical-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-critical-stmt",33,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-critical-stmt",33,false);*/

end-critical-stmt ::= 
           END CRITICAL 
     |     END CRITICAL <construct-name> 
     |     END_CRITICAL 
     |     END_CRITICAL <construct-name> 

<if-construct> ::= 
           <if-then-stmts> <end-if-stmt> 
     |     <if-then-stmts> <else-stmts> <end-if-stmt> 
     |     <if-then-stmts> <else-if-stmts> <end-if-stmt> 
     |     <if-then-stmts> <else-if-stmts> <else-stmts> <end-if-stmt> 

<if-then-stmts> ::= 
           <if-then-stmts> <executable-construct;> 
     |     <if-then-stmts> <omp-directive> 
     |     <if-then-stmts> <label> <executable-construct;> 
     |     <if-then-stmt> 
     |     <if-then-stmts> <special-stmt;> 

<if-then-stmt> ::= 
           <if-expr> THEN <;> 
     |     <construct-name-l> : <if-expr> THEN <;> 

<end-if-stmt> ::= 
           end-if-stmt 
     |     <label> end-if-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-if-stmt",14,false);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"end-if-stmt",14,false);*/

end-if-stmt ::= 
           END IF 
     |     END IF <construct-name> 
     |     END_IF 
     |     END_IF <construct-name> 

<else-stmts> ::= 
           <else-stmts> <executable-construct;> 
     |     <else-stmts> <omp-directive> 
     |     <else-stmts> <special-stmt;> 
     |     <else-stmts> <label> <executable-construct;> 
     |     <else-stmt> 
     |     <label> <else-stmt> 

<else-stmt> ::= 
           ELSE <;> 
     |     ELSE <construct-name> <;> 

<else-if-stmts> ::= 
           <else-if-stmts> <executable-construct;> 
     |     <else-if-stmts> <omp-directive> 
     |     <else-if-stmts> <special-stmt;> 
     |     <else-if-stmts> <label> <executable-construct;> 
     |     <else-if-stmt> 
     |     <label> <else-if-stmt> 
     |     <else-if-stmts> <else-if-stmt> 
     |     <else-if-stmts> <label> <else-if-stmt> 

<else-if-stmt> ::= 
           ELSE IF <p-expr> THEN <;> 
     |     ELSE IF <p-expr> THEN <construct-name> <;> 
     |     ELSE_IF <p-expr> THEN <;> 
     |     ELSE_IF <p-expr> THEN <construct-name> <;> 

<select-rank-construct> ::= 
           <select-rank-stmt> <end-select-stmt> 
     |     <select-rank-stmt> <select-rank-case-blocks> <end-select-stmt> 

<select-rank-stmt> ::= 
           select-rank-stmt <;> 
     |     <construct-name-l> : select-rank-stmt <;> 

select-rank-stmt ::= 
           SELECT RANK <p-expr> 
     |     SELECT RANK ( <associate-name> <=rangle> <expr> ) 
     |     SELECT_RANK <p-expr> 
     |     SELECT_RANK ( <associate-name> <=rangle> <expr> ) 

<select-rank-case-blocks> ::= 
           <select-rank-case-block> 

<select-rank-case-block> ::= 
           <select-rank-case-block> <special-stmt;> 
     |     <select-rank-case-block> <executable-construct;> 
     |     <select-rank-case-block> <label> <executable-construct;> 
     |     <select-rank-case-block> <omp-directive> 
     |     <select-rank-case-block> <select-rank-case-stmt> 
     |     <select-rank-case-block> <label> <case-stmt> 
     |     <label> <select-rank-case-stmt> 
     |     <select-rank-case-stmt> 

<select-rank-case-stmt> ::= 
           select-rank-case-stmt <;> 

select-rank-case-stmt ::= 
           RANK <rank-selector> 
     |     RANK <rank-selector> <construct-name> 

<rank-selector> ::= 
           <p-select-rank-expr> 
     |     DEFAULT 

<p-select-rank-expr> ::= 
           ( <select-rank-expr> ) 

<select-rank-expr> ::= 
           <expr> 
     |     * 

<select-type-construct> ::= 
           <select-type-stmt> <end-select-stmt> 
     |     <select-type-stmt> <type-guard-stmt-blocks> <end-select-stmt> 

<select-type-stmt> ::= 
           select-type-stmt <;> 
     |     <construct-name-l> : select-type-stmt <;> 

select-type-stmt ::= 
           SELECT TYPE <p-expr> 
     |     SELECT TYPE ( <associate-name> <=rangle> <expr> ) 
     |     SELECT_TYPE <p-expr> 
     |     SELECT_TYPE ( <associate-name> <=rangle> <expr> ) 

<type-guard-stmt-blocks> ::= 
           <type-guard-stmt-blocks> <execution-part-construct> 
     |     <type-guard-stmt-blocks> <omp-directive> 
     |     <type-guard-stmt-blocks> <label> <execution-part-construct> 
     |     <type-guard-stmt-blocks> <type-guard-stmt;> 
     |     <type-guard-stmt-blocks> <label> <type-guard-stmt;> 
     |     <type-guard-stmt-blocks> <special-stmt;> 
     |     <label> <type-guard-stmt;> 
     |     <type-guard-stmt;> 

<type-guard-stmt;> ::= 
           type-guard-stmt <;> 

type-guard-stmt ::= 
           TYPE IS <p-type-spec> 
     |     TYPE IS <p-type-spec> <construct-name> 
     |     CLASS IS <p-derived-type-spec> 
     |     CLASS IS <p-derived-type-spec> <construct-name> 
     |     CLASS DEFAULT 
     |     CLASS DEFAULT <construct-name> 

<p-type-spec> ::= 
           ( <type-spec> ) 

<data-stmt> ::= 
           <data-stmt-sets> 

<data-stmt-sets> ::= 
           <data-stmt-sets> <,> <data-stmt-set> 
     |     <data-stmt-sets> <data-stmt-set> 
     |     <data-stmt-set-first> 

<data-stmt-set> ::= 
           <data-stmt-object-list> / <data-stmt-value-list> / 

<data-stmt-object-list> ::= 
           <data-stmt-object-list> <,> <data-stmt-object> 
     |     <data-stmt-object> 

<data-stmt-object> ::= 
           <data-ref> 
     |     <data-implied-do> 

<data-implied-do> ::= 
           ( <data-i-do-object-list> <,> <data-i-do-cntrl> ) 

<data-i-do-object-list> ::= 
           <data-i-do-object-list> <,> <data-i-do-object> 
     |     <data-i-do-object> 

<data-i-do-object> ::= 
           <data-ref> 
     |     <data-implied-do> 
     |     <expr> 

<data-i-do-cntrl> ::= 
           <key = expr> <,> <expr> 
     |     <key = expr> <,> <expr> <,> <expr> 

<data-stmt-set-first> ::= 
           <data-stmt-object-list-first> / <data-stmt-value-list> / 

<data-stmt-object-list-first> ::= 
           <data-stmt-object-list-first> <,> <data-stmt-object> 
     |     <data-stmt-object-first> 

<data-stmt-object-first> ::= 
           DATA <data-ref> 
     |     DATA <data-implied-do> 

<omp-end-metadirective;> ::= 
           <omp-end-metadirective> <\n> 

<omp-end-metadirective> ::= 
           omp-end-metadirective 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced( $$(0),L"omp-end-critical",71,false);*/

omp-end-metadirective ::= 
           OMP END METADIRECTIVE +: { <;> } 
     |     OMP END_METADIRECTIVE +: { <;> } 

<omp-metadirective-stmt> ::= 
           OMP METADIRECTIVE <\n> 
     |     OMP METADIRECTIVE <omp-metadirective-clause-list> <\n> 

<subroutine-stmt> ::= 
           <subroutine-stmt;> 

<subroutine-stmt;> ::= 
           subroutine-stmt <;> 
     |     subroutine-stmt +: EOF 

subroutine-stmt ::= 
           SUBROUTINE <name>   /* Tr.onSub($$all,0,2,0,0); */
     |     SUBROUTINE <name> <(> <)>   /* Tr.onSub($$all,0,2,0,0); */
     |     SUBROUTINE <name> <(> <)> <language-binding-spec>   /* Tr.onSub($$all,0,2,0,5); */
     |     SUBROUTINE <name> <(> <dummy-arg-list> <)>   /* Tr.onSub($$all,0,2,4,0); */
     |     SUBROUTINE <name> <(> <dummy-arg-list> <)> <language-binding-spec>   /* Tr.onSub($$all,0,2,4,6); */
     |     <prefix> SUBROUTINE <name>   /* Tr.onSub($$all,1,3,0,0); */
     |     <prefix> SUBROUTINE <name> <(> <)>   /* Tr.onSub($$all,1,3,0,0); */
     |     <prefix> SUBROUTINE <name> <(> <)> <language-binding-spec>   /* Tr.onSub($$all,1,3,0,6); */
     |     <prefix> SUBROUTINE <name> <(> <dummy-arg-list> <)>   /* Tr.onSub($$all,1,3,5,0); */
     |     <prefix> SUBROUTINE <name> <(> <dummy-arg-list> <)> <language-binding-spec>   /* Tr.onSub($$all,1,3,5,7); */

<end-subroutine-stmt;> ::= 
           <end-subroutine-stmt> <;> 
     |     <end-subroutine-stmt> +: EOF 

<end-subroutine-stmt> ::= 
           end-subroutine-stmt 
     |     <label> end-subroutine-stmt 
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-subroutine-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0), L"end-subroutine-stmt",1,true);*/

end-subroutine-stmt ::= 
           END   /* Tr.onEndSub($$(0),NULL); */
     |     END SUBROUTINE +: { <;> | EOF }   /* Tr.onEndSub($$(0),NULL); */
     |     END SUBROUTINE <name> +: { <;> | EOF }   /* Tr.onEndSub($$(0),str(3)); */
     |     END_SUBROUTINE   /* Tr.onEndSub($$(0),NULL); */
     |     END_SUBROUTINE <name> +: { <;> | EOF }   /* Tr.onEndSub($$(0),str(2)); */

<procedure-stmt> ::= 
           PROCEDURE <name-list> <;> 
     |     PROCEDURE <::> <name-list> <;> 
     |     MODULE PROCEDURE <name-list> <;> 
     |     MODULE PROCEDURE <::> <name-list> <;> 

<parameter-stmt> ::= 
           PARAMETER <p-named-constant-def-list> 
     |     PARAMETER <named-constant-def-list> 

<p-named-constant-def-list> ::= 
           ( <named-constant-def-list> ) 

<named-constant-def-list> ::= 
           <named-constant-def-list> <,> <named-constant-def> 
     |     <named-constant-def> 

<named-constant-def> ::= 
           <named-constant> = <constant-expr> 

<procedure-declaration-stmt> ::= 
           PROCEDURE ( ) <proc-decl-list> 
     |     PROCEDURE ( ) <::> <proc-decl-list> 
     |     PROCEDURE ( ) <,> <proc-attr-spec-list> <::> <proc-decl-list> 
     |     PROCEDURE <p-proc-interface> <proc-decl-list> 
     |     PROCEDURE <p-proc-interface> <::> <proc-decl-list> 
     |     PROCEDURE <p-proc-interface> <,> <proc-attr-spec-list> <::> <proc-decl-list> 

<proc-attr-spec-list> ::= 
           <proc-attr-spec-list> <,> <proc-attr-spec> 
     |     <proc-attr-spec> 

<proc-attr-spec> ::= 
           <access-spec> 
     |     <language-binding-spec> 
     |     INTENT <p-intent-spec> 
     |     OPTIONAL 
     |     POINTER 
     |     SAVE 

<p-intent-spec> ::= 
           ( <intent-spec> ) 

<intent-spec> ::= 
           IN 
     |     OUT 
     |     IN_OUT 
     |     IN OUT 

<other-specification-stmt> ::= 
           <access-stmt> 
     |     <allocatable-stmt> 
     |     <asynchronous-stmt> 
     |     <bind-stmt> 
     |     <codimension-stmt> 
     |     <common-stmt> 
     |     <data-stmt> 
     |     <dimension-stmt> 
     |     <equivalence-stmt> 
     |     <external-stmt> 
     |     <intent-stmt> 
     |     <intrinsic-stmt> 
     |     <namelist-stmt> 
     |     <optional-stmt> 
     |     <pointer-stmt> 
     |     <cray-pointer-stmt> 
     |     <protected-stmt> 
     |     <save-stmt> 
     |     <target-stmt> 
     |     <volatile-stmt> 
     |     <value-stmt> 

<access-stmt> ::= 
           <access-spec> 
     |     <access-spec> <access-id-list> +: { <;> } 
     |     <access-spec> <::> <access-id-list> +: { <;> } 

<access-id-list> ::= 
           <access-id-list> <,> <access-id> +: { <;> | <,> } 
     |     <access-id> 

<access-id> ::= 
           <use-name> 
     |     <generic-spec> 

<allocatable-stmt> ::= 
           ALLOCATABLE <allocatable-decl-list> 
     |     ALLOCATABLE <::> <allocatable-decl-list> 

<allocatable-decl-list> ::= 
           <allocatable-decl-list> <,> <allocatable-decl> 
     |     <allocatable-decl> 

<allocatable-decl> ::= 
           <object-name> 
     |     <object-name> <[coarray-spec]> 
     |     <object-name> ( <array-spec> ) 
     |     <object-name> ( <array-spec> ) <[coarray-spec]> 

<object-name> ::= 
           <name> 

<array-spec> ::= 
           <explicit-shape-spec-list> 
     |     <assumed-shape-spec-list> 
     |     <deferred-shape-spec> 
     |     <assumed-size-spec-list> 
     |     <implied-shape-spec-list> 
     |     <assumed-rank-spec> 

<assumed-shape-spec-list> ::= 
           <assumed-shape-spec-list> <,> <assumed-shape-spec> 
     |     <assumed-shape-spec> 

<assumed-shape-spec> ::= 
           : 
     |     <lower-bound> : 

<assumed-size-spec-list> ::= 
           <assumed-size-spec-list> <,> <explicit-shape-spec> +: , 
     |     <explicit-shape-spec> 
     |     <assumed-size-spec-list> <,> <implied-shape-spec> -: , 
     |     <implied-shape-spec> 

<implied-shape-spec> ::= 
           * 
     |     <lower-bound> : * 

<implied-shape-spec-list> ::= 
           <implied-shape-spec-list> <,> <implied-shape-spec> 
     |     <implied-shape-spec> 

<assumed-rank-spec> ::= 
           <..> 

<asynchronous-stmt> ::= 
           ASYNCHRONOUS <name-list> 
     |     ASYNCHRONOUS <::> <name-list> 

<bind-stmt> ::= 
           <language-binding-spec> <bind-entity-list> 
     |     <language-binding-spec> <::> <bind-entity-list> 

<bind-entity-list> ::= 
           <bind-entity-list> <,> <bind-entity> 
     |     <bind-entity> 

<bind-entity> ::= 
           <name> 
     |     / <common-block-name> / 

<common-block-name> ::= 
           <name> 

<codimension-stmt> ::= 
           CODIMENSION <codimension-decl-list> 
     |     CODIMENSION <::> <codimension-decl-list> 

<codimension-decl-list> ::= 
           <codimension-decl-list> <,> <codimension-decl> 
     |     <codimension-decl> 

<common-stmt> ::= 
           COMMON <common-block-list> 

<common-block-list> ::= 
           <common-block-list> <,> <common-block> 
     |     <common-block-list> <common-block> 
     |     <common-block> 

<common-block> ::= 
           <common-block-object> 
     |     / / <common-block-object> 
     |     / <common-block-name> / <common-block-object> 

<common-block-object> ::= 
           <variable-name> 
     |     <variable-name> <p-array-spec> 

<variable-name> ::= 
           <name> 

<p-array-spec> ::= 
           ( <array-spec> ) 

<dimension-stmt> ::= 
           DIMENSION <array-named-specs> 
     |     DIMENSION <::> <array-named-specs> 

<array-named-specs> ::= 
           <array-named-specs> <,> <array-named-spec> 
     |     <array-named-spec> 

<array-named-spec> ::= 
           <name> <p-array-spec> 

<equivalence-stmt> ::= 
           <equivalence-set-list> 

<equivalence-set-list> ::= 
           <equivalence-set-list> <,> <equivalence-set> 
     |     <equivalence-set-first> 

<equivalence-set> ::= 
           ( <equivalence-pair> ) 

<equivalence-pair> ::= 
           <equivalence-object-list> 

<equivalence-object-list> ::= 
           <equivalence-object-list> <,> <equivalence-object> 
     |     <equivalence-object> 

<equivalence-object> ::= 
           <variable-name> 
     |     <array-element> 

<array-element> ::= 
           <data-ref> 

<equivalence-set-first> ::= 
           EQUIVALENCE <p-equivalence-pair> 

<p-equivalence-pair> ::= 
           ( <equivalence-pair> ) 

<external-stmt> ::= 
           EXTERNAL <name-list> 
     |     EXTERNAL <::> <name-list> 

<intent-stmt> ::= 
           INTENT <p-intent-spec> <dummy-arg-name-list> 
     |     INTENT <p-intent-spec> <::> <dummy-arg-name-list> 

<dummy-arg-name-list> ::= 
           <name-list> 

<intrinsic-stmt> ::= 
           INTRINSIC <name-list> 
     |     INTRINSIC <::> <name-list> 

<namelist-stmt> ::= 
           NAMELIST <name-lists> 

<name-lists> ::= 
           <name-lists> <,> / <name> / <name>   /* Tr.onNMLList($$(0),$$(1),$$(4),$$(6)); */
     |     <name-lists> / <name> / <name>   /* Tr.onNMLList($$(0),$$(1),$$(3),$$(5)); */
     |     <name-lists> <,> <name>   /* Tr.onNMLNext($$(0),$$(1),$$(3)); */
     |     / <name> / <name>   /* Tr.onNMLFirst($$(0),$$(2),$$(4)); */

<optional-stmt> ::= 
           OPTIONAL <dummy-arg-name-list> 
     |     OPTIONAL <::> <dummy-arg-name-list> 

<pointer-stmt> ::= 
           POINTER <pointer-decl-list> 
     |     POINTER <::> <pointer-decl-list> 

<pointer-decl-list> ::= 
           <pointer-decl-list> <,> <pointer-decl> 
     |     <pointer-decl> 

<pointer-decl> ::= 
           <object-name> 
     |     <object-name> <p-deferred-shape-spec-list> 

<p-deferred-shape-spec-list> ::= 
           ( <deferred-shape-spec-list> ) 

<cray-pointer-stmt> ::= 
           POINTER <cray-list> 

<cray-list> ::= 
           <cray-list> , <p-pointer-pair> 
     |     <p-pointer-pair> 

<p-pointer-pair> ::= 
           ( <pointer-pair> ) 

<pointer-pair> ::= 
           <name> <,> <expr> 

<protected-stmt> ::= 
           PROTECTED <name-list> 
     |     PROTECTED <::> <name-list> 

<save-stmt> ::= 
           SAVE 
     |     SAVE <saved-entity-list> 
     |     SAVE <::> <saved-entity-list> 
     |     <dec-static> <saved-entity-list> 
     |     <dec-static> <::> <saved-entity-list> 

<saved-entity-list> ::= 
           <saved-entity-list> <,> <saved-entity> 
     |     <saved-entity> 

<saved-entity> ::= 
           <object-name> 
     |     <object-name> <initialization-in-save-error> 
     |     / <common-block-name> / 

<initialization-in-save-error> ::~ 
           <initialization>   /* Tr.error(L"Initialization in a SAVE statement"); */

<dec-static> ::= 
           AUTOMATIC 
     |     STATIC 

<target-stmt> ::= 
           TARGET <target-decl-list> 
     |     TARGET <::> <target-decl-list> 

<target-decl-list> ::= 
           <target-decl-list> <,> <target-decl> 
     |     <target-decl> 

<target-decl> ::= 
           <object-name> 
     |     <object-name> <[coarray-spec]> 
     |     <object-name> <p-array-spec> 
     |     <object-name> <p-array-spec> <[coarray-spec]> 

<volatile-stmt> ::= 
           VOLATILE <name-list> 
     |     VOLATILE <::> <name-list> 

<value-stmt> ::= 
           VALUE <dummy-arg-name-list> 
     |     VALUE <::> <dummy-arg-name-list> 

<type-declaration-stmt> ::= 
           <declaration-type-spec> <entity-decl-list> 
     |     <declaration-type-spec> <::> <entity-decl-init-list> 
     |     <declaration-type-spec> , <attr-spec-list> <::> <entity-decl-init-list> 
     |     <declaration-type-spec> , <::> <entity-decl-init-list>   /* Tr.warning (L" Non Portable ',' without an attributes list.");*/
     |     <record-type-spec> <entity-decl-list> 
     |     <record-type-spec> <::> <entity-decl-init-list> 
     |     <record-type-spec> , <attr-spec-list> <::> <entity-decl-init-list> 
     |     <record-type-spec> , <::> <entity-decl-init-list>   /* Tr.warning (L" Non Portable ',' without an attributes list.");*/

<entity-decl-list> ::= 
           <entity-decl-list> <,> <entity-decl> 
     |     <entity-decl> 
     |     <entity-decl-list> <,> <entity-decl> <initialization-obsolete> 
     |     <entity-decl> <initialization-obsolete> 

<entity-decl> ::= 
           <entity> 
     |     <entity> * <char-length> 
     |     <entity> <[coarray-spec]> 
     |     <entity> <[coarray-spec]> * <char-length> 
     |     <entity> <p-array-spec2> 
     |     <entity> <p-array-spec2> * <char-length> 
     |     <entity> * <char-length> <p-array-spec2>   /* Tr.warning (L" Non Portable array declaration '%s' *<element-size>(dimension)",str(1)); */
     |     <entity> ( <array-spec> ) <[coarray-spec]> 
     |     <entity> ( <array-spec> ) <[coarray-spec]> * <char-length> 

<entity> ::= 
           <name>   /* Tr.onEntity($$(0),$$(1)); */

<p-array-spec2> ::= 
           ( <array-spec> ) 

<entity-decl-init-list> ::= 
           <entity-decl-init-list> <,> <entity-decl> 
     |     <entity-decl> 
     |     <entity-decl-init-list> <,> <entity-decl> <initialization> 
     |     <entity-decl> <initialization> 

<attr-spec-list> ::= 
           <attr-spec-list> <,> <attr-spec> 
     |     <attr-spec> 

<attr-spec> ::= 
           <access-spec> 
     |     ALLOCATABLE 
     |     ASYNCHRONOUS 
     |     CODIMENSION <[coarray-spec]> 
     |     CONTIGUOUS 
     |     DIMENSION <p-array-spec> 
     |     EXTERNAL 
     |     INTENT <p-intent-spec> 
     |     INTRINSIC 
     |     <language-binding-spec> 
     |     OPTIONAL 
     |     PARAMETER 
     |     POINTER 
     |     PROTECTED 
     |     SAVE 
     |     TARGET 
     |     VALUE 
     |     VOLATILE 
     |     <dec-static> 
     |     <keyword-l>   /* Tr.error(L"Expecting an Attribute Specification but read:", str(1)); */

<keyword-l> ::? 
           keyword   /* synthesize(1); */

<stmt-function-stmt> ::= 
           <function-declaration> = <expr> 

<subroutine-subprogram> ::= 
           <subroutine-stmt> <end-subroutine-stmt;> 
     |     <subroutine-stmt> <internal-subprogram-part> <end-subroutine-stmt;> 
     |     <subroutine-stmt> <stmts> <end-subroutine-stmt;> 
     |     <subroutine-stmt> <stmts> <internal-subprogram-part> <end-subroutine-stmt;> 
     |     <label> <subroutine-stmt> <end-subroutine-stmt;> 
     |     <label> <subroutine-stmt> <internal-subprogram-part> <end-subroutine-stmt;> 
     |     <label> <subroutine-stmt> <stmts> <end-subroutine-stmt;> 
     |     <label> <subroutine-stmt> <stmts> <internal-subprogram-part> <end-subroutine-stmt;> 

<program-stmt;> ::= 
           <program-stmt> <;> 

<program-stmt> ::= 
           program-stmt 
     |     <label> program-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */

program-stmt ::= 
           PROGRAM <program_name>   /* Tr.onProgram($$(0),$$(2)); */

<external-subprogram> ::= 
           <function-subprogram> 
     |     <subroutine-subprogram> 

<module> ::= 
           <module-stmt;> <end-module-stmt;> 
     |     <module-stmt;> <module-subprogram-part> <end-module-stmt;> 
     |     <module-stmt;> <spec-stmts> <end-module-stmt;> 
     |     <module-stmt;> <spec-stmts> <module-subprogram-part> <end-module-stmt;> 

<module-stmt;> ::= 
           <module-stmt> <;> 

<module-stmt> ::= 
           module-stmt 
     |     <label> module-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */

module-stmt ::= 
           MODULE <module-name>   /* Tr.onModule($$(0),$$(2)); */

<end-module-stmt;> ::= 
           <end-module-stmt> <;> 
     |     <end-module-stmt> +: EOF 

<end-module-stmt> ::= 
           end-module-stmt 
     |     <label> end-module-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-module-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-module-stmt",1,true);*/

end-module-stmt ::= 
           END   /* Tr.onEndModule($$(0),NULL); */
     |     END MODULE +: { <;> | EOF }   /* Tr.onEndModule($$(0),NULL); */
     |     END MODULE <module-name> +: { <;> | EOF }   /* Tr.onEndModule($$(0),str(3)); */
     |     END_MODULE +: { <;> | EOF }   /* Tr.onEndModule($$(0),NULL); */
     |     END_MODULE <module-name> +: { <;> | EOF }   /* Tr.onEndModule($$(0),str(2)); */

<module-subprogram-part> ::= 
           <module-subprograms> 

<module-subprograms> ::= 
           <module-subprograms> <module-subprogram> 
     |     <contains-stmt> 

<module-subprogram> ::= 
           <function-subprogram> 
     |     <subroutine-subprogram> 
     |     <separate-module-subprogram> 

<separate-module-subprogram> ::= 
           <mp-subprogram-stmt;> <end-mp-subprogram-stmt;> 
     |     <mp-subprogram-stmt;> <internal-subprogram-part> <end-mp-subprogram-stmt;> 
     |     <mp-subprogram-stmt;> <stmts> <end-mp-subprogram-stmt;> 
     |     <mp-subprogram-stmt;> <stmts> <internal-subprogram-part> <end-mp-subprogram-stmt;> 

<mp-subprogram-stmt;> ::= 
           <mp-subprogram-stmt> <;> 

<mp-subprogram-stmt> ::= 
           mp-subprogram-stmt 
     |     <label> mp-subprogram-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */

mp-subprogram-stmt ::= 
           MODULE PROCEDURE <procedure-name>   /* Tr.onMPSub($$(0),$$(3)); */

<end-mp-subprogram-stmt;> ::= 
           <end-mp-subprogram-stmt> <;> 
     |     <end-mp-subprogram-stmt> +: EOF 

<end-mp-subprogram-stmt> ::= 
           end-mp-subprogram-stmt 
     |     <label> end-mp-subprogram-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-mp-subprogram-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-mp-subprogram-stmt",1,true);*/

end-mp-subprogram-stmt ::= 
           END   /* Tr.onEndMPSub($$(0),NULL); */
     |     END PROCEDURE +: { <;> }   /* Tr.onEndMPSub($$(0),NULL); */
     |     END PROCEDURE <procedure-name> +: { <;> }   /* Tr.onEndMPSub($$(0),str(3)); */
     |     END_PROCEDURE +: { <;> }   /* Tr.onEndMPSub($$(0),NULL); */
     |     END_PROCEDURE <procedure-name> +: { <;> }   /* Tr.onEndMPSub($$(0),str(2)); */

<submodule> ::= 
           <submodule-stmt;> <end-submodule-stmt;> 
     |     <submodule-stmt;> <module-subprogram-part> <end-submodule-stmt;> 
     |     <submodule-stmt;> <spec-stmts> <end-submodule-stmt;> 
     |     <submodule-stmt;> <spec-stmts> <module-subprogram-part> <end-submodule-stmt;> 

<submodule-stmt;> ::= 
           <submodule-stmt> <;> 

<submodule-stmt> ::= 
           submodule-stmt 
     |     <label> submodule-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */

submodule-stmt ::= 
           SUBMODULE <(> <parent-identifier> <)> <module-name>   /* Tr.onSubModule($$(0),$$(3), $$(5)); */

<parent-identifier> ::= 
           <ancestor-module-name> 
     |     <ancestor-module-name> : <parent-submodule-name> 

<ancestor-module-name> ::= 
           <name> 

<parent-submodule-name> ::= 
           <name> 

<end-submodule-stmt;> ::= 
           <end-submodule-stmt> <;> 
     |     <end-submodule-stmt> +: EOF 

<end-submodule-stmt> ::= 
           end-submodule-stmt 
     |     <label> end-submodule-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-submodule-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-submodule-stmt",1,true);*/

end-submodule-stmt ::= 
           END   /* Tr.onEndSubModule($$(0),NULL); */
     |     END SUBMODULE   /* Tr.onEndSubModule($$(0),NULL); */
     |     END SUBMODULE <module-name>   /* Tr.onEndSubModule($$(0),str(3)); */
     |     END_SUBMODULE   /* Tr.onEndSubModule($$(0),NULL); */
     |     END_SUBMODULE <module-name>   /* Tr.onEndSubModule($$(0),str(2)); */

<block-data> ::= 
           <block-data-stmt;> <end-block-data-stmt;> 
     |     <block-data-stmt;> <spec-stmts> <end-block-data-stmt;> 

<block-data-stmt;> ::= 
           <block-data-stmt> <;> 

<block-data-stmt> ::= 
           block-data-stmt 
     |     <label> block-data-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */

block-data-stmt ::= 
           BLOCK DATA +: { <;> } 
     |     BLOCK DATA <block-data-name>   /* Tr.onBData($$(0),$$(3)); */
     |     BLOCK_DATA +: { <;> } 
     |     BLOCK_DATA <block-data-name>   /* Tr.onBData($$(0),$$(2)); */

<block-data-name> ::= 
           <name> 

<end-block-data-stmt;> ::= 
           <end-block-data-stmt> <;> 
     |     <end-block-data-stmt> +: EOF 

<end-block-data-stmt> ::= 
           end-block-data-stmt 
     |     <label> end-block-data-stmt   /* Tr.onLabel($$(0),$$(1),$$(2)); */
     |     <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-block-data-stmt",1,true);*/
     |     <label> <unexpected-end-stmt>   /* Tr.UnBalanced($$(0),L"end-block-data-stmt",1,true);*/

end-block-data-stmt ::= 
           END   /* Tr.onEndBData($$(0),NULL); */
     |     END BLOCK DATA   /* Tr.onEndBData($$(0),NULL); */
     |     END BLOCK DATA <block-data-name>   /* Tr.onEndBData($$(0),str(4)); */
     |     END_BLOCK   /* Tr.onEndBData($$(0),NULL); */
     |     END_BLOCK DATA   /* Tr.onEndBData($$(0),NULL); */
     |     END_BLOCK DATA <block-data-name>   /* Tr.onEndBData($$(0),str(3)); */
     |     END_BLOCK_DATA   /* Tr.onEndBData($$(0),NULL); */
     |     END_BLOCK_DATA <block-data-name>   /* Tr.onEndBData($$(0),str(2)); */

<out-of-unit-directive> ::? 
           <omp-requires-directive> +: { <unit-context> }   /* Tr.warning(L"OpenMP Directive not in Program Unit."); */

<unit-context> ::= 
           BLOCK 
     |     BLOCK_DATA 
     |     FUNCTION 
     |     MODULE 
     |     SUBMODULE 
     |     SUBROUTINE 
     |     PROGRAM 

